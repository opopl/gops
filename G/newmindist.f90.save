!   OPTIM: A program for optimizing geometries and calculating reaction pathways
!   Copyright (C) 1999-2006 David J. Wales
!   This file is part of OPTIM.
!
!   OPTIM is free software; you can redistribute it and/or modify
!   it under the terms of the GNU General Public License as published by
!   the Free Software Foundation; either version 2 of the License, or
!   (at your option) any later version.
!
!   OPTIM is distributed in the hope that it will be useful,
!   but WITHOUT ANY WARRANTY; without even the implied warranty of
!   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!   GNU General Public License for more details.
!
!   You should have received a copy of the GNU General Public License
!   along with this program; if not, write to the Free Software
!   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
!
!   Finds the minimum distance between two geometries.
!   Geometry in RA should not change. RB is returned as the
!   closest geometry to RA if PRESERVET is .FALSE.
!
!   New analytic method based on quaterions from
!   Kearsley, Acta Cryst. A, 45, 208-210, 1989.
!
! jmc As long as zsym isn't 'W' (in which case mind does something special) mind
! doesn't care what atomic symbol we give it.
!
SUBROUTINE NEWMINDIST(RA,RB,NATOMS,DIST,BULKT,TWOD,ZUSE,PRESERVET,RIGIDBODY,DEBUG,RMAT)
use commons,only: myunit
IMPLICIT NONE
INTEGER J1, NATOMS, NSIZE, INFO, JINFO, JMIN
DOUBLE PRECISION RA(3*NATOMS), RB(3*NATOMS), DIST, QMAT(4,4), XM, YM, ZM, XP, YP, ZP, OVEC(3), H1VEC(3), H2VEC(3), &
  &              DIAG(4), TEMPA(9*NATOMS), RMAT(3,3), MINV, Q1, Q2, Q3, Q4, CMXA, CMYA, CMZA, CMXB, CMYB, CMZB
DOUBLE PRECISION, ALLOCATABLE :: XA(:), XB(:)
LOGICAL BULKT, TWOD, RIGIDBODY, PRESERVET, DEBUG
CHARACTER(LEN=5) ZUSE
! 
! Convert rigid body coordinates to Cartesians for rigid bodies. 
!
IF (ZUSE(1:1).EQ.'W') THEN
   ALLOCATE(XA(3*3*(NATOMS/2)),XB(3*3*(NATOMS/2)))
   NSIZE=3*(NATOMS/2)
   DO J1=1,NATOMS/2
      CALL CONVERT(RA(3*(J1-1)+1),RA(3*(J1-1)+2),RA(3*(J1-1)+3), &
     &        RA(3*(NATOMS/2+J1-1)+1),RA(3*(NATOMS/2+J1-1)+2),RA(3*(NATOMS/2+J1-1)+3),OVEC,H1VEC,H2VEC)
      XA(3*(J1-1)+1+1)=OVEC(1)
      XA(3*(J1-1)+1+2)=OVEC(2)
      XA(3*(J1-1)+1+3)=OVEC(3)
      XA(3*(J1-1)+2+1)=H1VEC(1)
      XA(3*(J1-1)+2+2)=H1VEC(2)
      XA(3*(J1-1)+2+3)=H1VEC(3)
      XA(3*(J1-1)+3+1)=H2VEC(1)
      XA(3*(J1-1)+3+2)=H2VEC(2)
      XA(3*(J1-1)+3+3)=H2VEC(3)
      CALL CONVERT(RB(3*(J1-1)+1),RB(3*(J1-1)+2),RB(3*(J1-1)+3), &
     &      RB(3*(NATOMS/2+J1-1)+1),RB(3*(NATOMS/2+J1-1)+2),RB(3*(NATOMS/2+J1-1)+3),OVEC,H1VEC,H2VEC)
      XB(3*(J1-1)+1+1)=OVEC(1)
      XB(3*(J1-1)+1+2)=OVEC(2)
      XB(3*(J1-1)+1+3)=OVEC(3)
      XB(3*(J1-1)+2+1)=H1VEC(1)
      XB(3*(J1-1)+2+2)=H1VEC(2)
      XB(3*(J1-1)+2+3)=H1VEC(3)
      XB(3*(J1-1)+3+1)=H2VEC(1)
      XB(3*(J1-1)+3+2)=H2VEC(2)
      XB(3*(J1-1)+3+3)=H2VEC(3)
   ENDDO
ELSEIF (RIGIDBODY) THEN
   WRITE(MYUNIT, '(A)') 'newmindist> New quaterion procedure not yet coded for general angle-axis variables'
   STOP
ELSEIF (TWOD) THEN
!  ALLOCATE(XA(3*(NATOMS/2)*number of sites,XB(3*(NATOMS/2)*number of sites))
!  NSIZE=(NATOMS/2)*number of sites
   WRITE(MYUNIT, '(A)') 'newmindist> New quaterion procedure not yet coded for flatland'
! There is one unknown angle, so this should be trivial!'
   STOP
ELSE
   ALLOCATE(XA(3*NATOMS),XB(3*NATOMS))
   NSIZE=NATOMS
   XA(1:3*NATOMS)=RA(1:3*NATOMS)
   XB(1:3*NATOMS)=RB(1:3*NATOMS)
ENDIF
!
! Move centre of coordinates of B to centre of coordinates of A
!
CMXA=0.0D0; CMYA=0.0D0; CMZA=0.0D0
DO J1=1,NSIZE
   CMXA=CMXA+XA(3*(J1-1)+1)
   CMYA=CMYA+XA(3*(J1-1)+2)
   CMZA=CMZA+XA(3*(J1-1)+3)
ENDDO
CMXA=CMXA/NSIZE; CMYA=CMYA/NSIZE; CMZA=CMZA/NSIZE
!
!  Leave A alone
!
! DO J1=1,NSIZE
!    XA(3*(J1-1)+1)=XA(3*(J1-1)+1)-CMX
!    XA(3*(J1-1)+2)=XA(3*(J1-1)+2)-CMY
!    XA(3*(J1-1)+3)=XA(3*(J1-1)+3)-CMZ
! ENDDO
CMXB=0.0D0; CMYB=0.0D0; CMZB=0.0D0
DO J1=1,NSIZE
   CMXB=CMXB+XB(3*(J1-1)+1)
   CMYB=CMYB+XB(3*(J1-1)+2)
   CMZB=CMZB+XB(3*(J1-1)+3)
ENDDO
CMXB=CMXB/NSIZE; CMYB=CMYB/NSIZE; CMZB=CMZB/NSIZE
DO J1=1,NSIZE
   XB(3*(J1-1)+1)=XB(3*(J1-1)+1)-CMXB+CMXA
   XB(3*(J1-1)+2)=XB(3*(J1-1)+2)-CMYB+CMYA
   XB(3*(J1-1)+3)=XB(3*(J1-1)+3)-CMZB+CMZA
ENDDO

QMAT(1:4,1:4)=0.0D0
DO J1=1,NSIZE
   XM=XA(3*(J1-1)+1)-XB(3*(J1-1)+1)
   YM=XA(3*(J1-1)+2)-XB(3*(J1-1)+2)
   ZM=XA(3*(J1-1)+3)-XB(3*(J1-1)+3)
   XP=XA(3*(J1-1)+1)+XB(3*(J1-1)+1)
   YP=XA(3*(J1-1)+2)+XB(3*(J1-1)+2)
   ZP=XA(3*(J1-1)+3)+XB(3*(J1-1)+3)
   QMAT(1,1)=QMAT(1,1)+XM**2+YM**2+ZM**2
   QMAT(1,2)=QMAT(1,2)+YP*ZM-YM*ZP
   QMAT(1,3)=QMAT(1,3)+XM*ZP-XP*ZM
   QMAT(1,4)=QMAT(1,4)+XP*YM-XM*YP
   QMAT(2,2)=QMAT(2,2)+YP**2+ZP**2+XM**2
   QMAT(2,3)=QMAT(2,3)+XM*YM-XP*YP
   QMAT(2,4)=QMAT(2,4)+XM*ZM-XP*ZP
   QMAT(3,3)=QMAT(3,3)+XP**2+ZP**2+YM**2
   QMAT(3,4)=QMAT(3,4)+YM*ZM-YP*ZP
   QMAT(4,4)=QMAT(4,4)+XP**2+YP**2+ZM**2
ENDDO
QMAT(2,1)=QMAT(1,2); QMAT(3,1)=QMAT(1,3); QMAT(3,2)=QMAT(2,3); QMAT(4,1)=QMAT(1,4); QMAT(4,2)=QMAT(2,4); QMAT(4,3)=QMAT(3,4)

CALL DSYEV('V','U',4,QMAT,4,DIAG,TEMPA,9*NATOMS,INFO)
IF (INFO.NE.0) WRITE(MYUNIT, '(A,I6,A)') 'newmindist> WARNING - INFO=',INFO,' in DSYEV'

MINV=1.0D100
DO J1=1,4
   IF (DIAG(J1).LT.MINV) THEN
      JMIN=J1
      MINV=DIAG(J1)
   ENDIF
ENDDO
IF (MINV.LT.0.0D0) THEN
   IF (ABS(MINV).LT.1.0D-6) THEN
      MINV=0.0D0
   ELSE
      WRITE(MYUNIT, '(A,G20.10,A)') 'newmindist> WARNING MINV is ',MINV,' change to absolute value'
      MINV=-MINV
   ENDIF
ENDIF
DIST=SQRT(MINV)

IF (DEBUG) WRITE(MYUNIT, '(A,G20.10,A,I6)') 'newmindist> minimum residual is ',DIAG(JMIN),' for eigenvector ',JMIN
Q1=QMAT(1,JMIN); Q2=QMAT(2,JMIN); Q3=QMAT(3,JMIN); Q4=QMAT(4,JMIN)
!
! RMAT will contain the matrix that maps RB onto the best correspondence with RA
!
RMAT(1,1)=Q1**2+Q2**2-Q3**2-Q4**2
RMAT(1,2)=2*(Q2*Q3+Q1*Q4)
RMAT(1,3)=2*(Q2*Q4-Q1*Q3)
RMAT(2,1)=2*(Q2*Q3-Q1*Q4)
RMAT(2,2)=Q1**2+Q3**2-Q2**2-Q4**2
RMAT(2,3)=2*(Q3*Q4+Q1*Q2)
RMAT(3,1)=2*(Q2*Q4+Q1*Q3)
RMAT(3,2)=2*(Q3*Q4-Q1*Q2)
RMAT(3,3)=Q1**2+Q4**2-Q2**2-Q3**2

IF (.NOT.PRESERVET) THEN
   IF (ZUSE(1:1).EQ.'W') THEN
      DO J1=1,NATOMS/2
         OVEC(1)=XB(1+(J1-1)*3+1)
         OVEC(2)=XB(2+(J1-1)*3+1)
         OVEC(3)=XB(3+(J1-1)*3+1)
         H1VEC(1)=XB(1+(J1-1)*3+2)
         H1VEC(2)=XB(2+(J1-1)*3+2)
         H1VEC(3)=XB(3+(J1-1)*3+2)
         H2VEC(1)=XB(1+(J1-1)*3+3)
         H2VEC(2)=XB(2+(J1-1)*3+3)
         H2VEC(3)=XB(3+(J1-1)*3+3)
         CALL CONVERT2(OVEC,H1VEC,H2VEC,RB(3*(J1-1)+1),RB(3*(J1-1)+2),RB(3*(J1-1)+3), &
  &                    RB(3*(NATOMS/2+J1-1)+1),RB(3*(NATOMS/2+J1-1)+2),RB(3*(NATOMS/2+J1-1)+3))
      ENDDO
   ELSEIF (RIGIDBODY) THEN
  WRITE(MYUNIT, '(A)') 'newmindist> back transformation not programmed yet for rigid bodies'
   ENDIF
   RB(1:3*NATOMS)=XB(1:3*NATOMS) ! centre of mass to the origin
   CALL NEWROTGEOM(NSIZE,RB,RMAT)
ENDIF

END SUBROUTINE NEWMINDIST

SUBROUTINE NEWROTGEOM(NATOMS,COORDS,ROTMAT)
use commons,only: myunit
IMPLICIT NONE
INTEGER I, J, K, NATOMS
DOUBLE PRECISION COORDS(*), R1, R0(3), ROTMAT(3,3)

DO I=1,NATOMS
   R0(1)=COORDS(3*(I-1)+1)
   R0(2)=COORDS(3*(I-1)+2)
   R0(3)=COORDS(3*(I-1)+3)
   DO J=1,3
      R1=0.0D0
      DO K=1,3
         R1=R1+ROTMAT(J,K)*R0(K)
      ENDDO
      COORDS(3*(I-1)+J)=R1
   ENDDO
ENDDO

RETURN
END SUBROUTINE NEWROTGEOM

