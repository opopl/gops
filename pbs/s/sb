#!/usr/bin/env bash

set_base_vars(){
# {{{
s_purpose="submit PBS jobs"
s_project="~/gops/pbs/s/"

export sys=G46
export nf=10
export nm=1
export od="out"
export force=0.00
export ca=5
export m_lbfgs=10
export nsteps=50000
export fqmax="1.0D-4"
export sqmax="1.0D-3"
export data_ext="tex"

export natoms=46
export radius=10.0
export nrg=10
export seed=1
export n_en=5
export pull_start=1
export pull_end=46
export force=0.0
export temp=0.03
export exe=GMIN
export gs_energy=-0.2936531215

allmodes=( 1 2 3 4 5 6 ) 
queue=s1
# }}}
}


set_v(){
#{{{
case "$1" in 
  	ca) echo "5 10 50 100" ;;
esac
#}}}
}

# preliminary stuff {{{

# directory where this script resides
export shd="`dirname $(readlink -f $0)`"
# name of this script 
export this_script=` basename $0 `

vim_opts="-n -p"
v="vim $vim_opts"
repos=( "config" "scripts" "templates" "vrt" "install" "doc-coms" "doc-cit" )

set_base_vars

define_base_dirs(){
# {{{
# main Wales group software directory
export wg_dir="$shd/../../"
packdir=$HOME/arch/packed
unpackdir=$HOME/arch/unpacked
# }}}
}

#}}}

display_help(){
# {{{
# general beginning part {{{
cat << EOF
=============================================
SCRIPT NAME: $this_script 
PROJECT: $s_project
PURPOSE: $s_purpose
USAGE: $this_script [ OPTIONS ] 

	OPTIONS:

	============
	General
	============

			display the help message

	vm		v(iew) m(yself), i.e., edit this script
	-g		gvim invocation
	
	============
EOF
# }}}
# actual interesting part {{{
cat << EOF
		
		a 				run over all modes

		-f force					specify force. Default: $force
		-nf nf						give number of force points. Default: $nf
		-p1 pull_start				start atom number. Default: $pull_start
		-p2 end_start				end atom number. Default: $pull_end
	
		-N nsteps					number of basin-hopping steps. Default: $nsteps
		-ca ca						NACCEPT in GMIN. Number of quenches, 
										after which the acceptance is checked and adjusted.
										Default: ca=$ca
		-nrg nrg					specify the number of starting random geometries.
										Default: nrg=$nrg


		-m sb_mode		submission mode:
							1	Go and WT in force ranges 0-3 
							2	Single force regime (need also specify force via -f switch)
									default: $force
							3 	0.0 0.0001 
							4   0.0005 0.0015 
							5   0.0016 0.0025 
							6   0.0026 0.0035 
							7	0.0036 0.01, nf=80

		-v ID				vary identifier ID over a set of values. Values are:
								ID		VALUES

								ca	 	` set_v ca` 
							

EOF
# }}}
# final general part {{{
cat << EOF
REMARKS:
AUTHOR: O. Poplavskyy
=============================================
EOF
# }}}
# }}}
}

[ -z "$*" ] && ( display_help; exit 0 )

main(){
# {{{
export doid=0
export printid=0
export doa=0

while [ ! -z "$1" ]; do
  # check other command-line arguments{{{
	case "$1" in
		#a -v {{{
		a) doa=1 ;;
		-v) export idin=$2; export doid=1 ;;
		-doid)  export doid=1 ;;
	  #}}}
	  *)
	  	case "$1" in 
		#pulling {{{
  		-f) export force=$2 ;;
  		-p1) export pull_start=$2 ;;
  		-p2) export pull_end=$2 ;;
	     #}}}
  		-nf) export nf=$2 ;;
  		-N) export nsteps=$2 ;;
  		-ca) export ca=$2 ;;
  		-nrg) export nrg=$2 ;  ;;
		-m)  export sb_mode=$2 ;;
		-idin)  export printid=1; export idin=$2 ;;
	  	esac
		args=( ${args[@]} $1 $2 ); shift ;;
	esac    # --- end of case ---
	shift
  #}}}
done

# id {{{
if [ $doid -eq 1 ]; then 
	  		idvals=( ` set_v $idin ` ) 
				for val in ${idvals[@]}; do
				  $0 -$idin $val -idin $idin ${args[@]}
				done
				exit
fi
#}}}
# a {{{
if [ $doa -eq 1 ]; then 
	for mode in ${allmodes[@]}; do
				$0 -m $mode $args
	done
	exit
fi
#}}}

# execution {{{
# depending on sb_mode, define: nm cmd {{{
case "$sb_mode" in
 	1) # GO and WT in force ranges 0-3 {{{
		let nm=8
		cmd="sleep 3"
 		echo "GO and WT in force ranges 0-3"
		;;
		# }}}
	2)	# force increment run within a single force range {{{
		nm=1
		echo "force increment run within a single force range"
		# }}}
	;;
	[3-9]) ;;
esac
# }}}

for ((n=0;n<$nm;n++)); do 
# {{{
# depending on sb_mode, pass to q0 the n-dependent parameters
# also, change the queue name, if necessary
case "$sb_mode" in 
  	1) # Go and WT in force ranges 0-3 {{{
		n1=$(($n%2)) 
		n2=$(($n/2)) 
		
		case "$n2" in
			0) fr=( 0.0001 0.001 ) ;;
			1) fr=( 0.001 0.01 ) ;;
			2) fr=( 0.01 0.1 ) ;;
			3) fr=( 0.1 1.0 ) ;;
		esac
		
		case "$n1" in
			0) export sys="G46" ; od="go$n2" ; queue=s1 ;;
			1) export sys="P46" ; od="wt$n2" ; queue=s1 ;;
		esac
		;;
	      # }}}	
	2) fr=( $force ) ; let nf=1 ;;
	3) fr=( 0.0 0.0001 ) ;;
	4) fr=( 0.0005 0.0015 ) ;;
	5) fr=( 0.0016 0.0025 ) ;;
	6) fr=( 0.0026 0.0035 ) ;;
	7) fr=( 0.0036 0.01 ) ; nf=80 ;;
esac

export force_min="${fr[0]}"
export force_max="${fr[1]}"
export force_i=$( echo "scale=10; ($force_max-$force_min)/$nf" | bc )
  
qsub -V q0 -q $queue ; $cmd ; 
# }}}
done
#}}}

# }}}
}

# main part 
# {{{

script_opts=( $* )
define_base_dirs

while [ ! -z "$1" ]; do
  	case "$1" in
		  #{{{
		  #vm) $v $0; exit ;;
	  	vm) $shd/vf b; exit ;;
		h) display_help $*; exit ;;
		-g) v="$v -g" ;;
	  	*) main $* && exit 0 ;;
	esac
  	shift
        #}}}
done

# }}}


