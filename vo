#!/bin/bash

shd="`dirname $(readlink -f $0)`"
source $shd/sh_header.sh

source $shd/set_output_pars.sh

let is_help=0 
let view_force=0
let reset_files=0

rgyr_dir="$data_dir/rgyr/"
ef_dir="$data_dir/ef"

current_dn=` cat current_dn `

if [ -z $1 ]; then 
	all_files="$main_log_file rrr.log q0.log t.dat q.log ao.log ao_count ac_ratios mlog $current_dn/GMIN_out ${output_files[@]}"
 	vim $vim_opts $all_files 
      else
	while [ ! -z "$1" ]; do # read command-line arguments {{{
	  	case "$1" in
		  	-h) is_help=1 # display help message {{{
cat << EOF
=================================
SCRIPT NAME: vo
PURPOSE: view output files. They include:
	./out/ or other dir specified by -d switch
		r.log gm.xyz ef.dat gmin_out hits pdf ac_ratios	
		mlog
		energy.dat markov.dat
		tl.dat ("local" t.dat) 
	./
		ao.log pl.log ao_count q.log q0.log
		t.dat rrr.log
	./current-dn (current directory in which GMIN is running; is runtime variable)
		GMIN_out
USAGE: vo [ OPTS ]
OPTS:
			view base output files
	-h		display this help message
	-ac i		view archived output files of index i	
				for correspondence between index i, 
				and the archived directory name to be used,
				view ao.log
	-j job_number	view output from job with job_number
	-f force	view run-time output for force
	-d DIR		output dirname is DIR
	-dn dn_dir
	-fe string	open file with specific extension, e.g., dat
	q		q.log, q0.log
	t		t.dat (for timing)
	sv		saved
	-g		graphical vim (gvim)

	RGYR (Radii of gyration)

	-rg NAME	view rgyr (radius of gyration) file rgyr_NAME.dat
	-rga		all rgyr files

	ENERGIES

	-efa		all ef_*.dat files in ef/ directory
	-ef NAME	view ef_NAME.dat file  
=================================
EOF
			;;
			# }}}
			t) # view timings file {{{ 
				reset_files=1
				all_files=t.dat 
				;;
			# }}}
			-dn) 
				reset_files=1
				export output_dir="$2" 
				all_files="$output_dir/GMIN_out $output_dir/*.dat $output_dir/lowest"
				;;
			-dj)
				vo -dn dn-j$2 
				exit
				;;
			sv) # saved {{{
				reset_files=1
				export base_output_dir="sv"
				export output_dir="$data_dir/$base_output_dir"
				all_files=$output_dir/*
				;;
				# }}}
			-efa | -ef) reset_files=1 # view energy-vs-force {{{
				case "$1" in
				  	-ef) all_files=$ef_dir/ef_$2.dat ;;
				  	-efa) all_files=$ef_dir/ef_*.dat ;;
				esac
			;;
			# }}}
			-rg | -rga) # {{{
				reset_files=1
				case "$1" in
				  	-rg) all_files=$rgyr_dir/rgyr_$2.dat ;;
				  	-rga) all_files=$rgyr_dir/rgyr_*.dat ;;
				esac
			;;
			# }}} 
		  	-ac) # use ao_count (for archived data directories) {{{
		       		let ao_count=$2
				ao_count=$(($ao_count+1)) 
				awk_string="NR==$ao_count { print \$2 }"
				export base_output_dir=` awk "$awk_string" ao.log `
				;; 	
				# }}}
			-j) job_number=$2 ;;
			-f) 
				export output_dir="f-$2" 
				view_force=1
				;;
			-fe) ext=$2 
				reset_files=1 
				all_files=\*.$ext
			;;
			q) reset_files=1
				all_files="q.log q0.log"
				;;
			-d) export base_output_dir="$2" ;;
			-g) vim_opts="$vim_opts -g" 
		esac
		shift
	done # }}}
fi

if [ $is_help -eq 0 ]; then   # {{{
	source $shd/set_output_pars.sh
	if [ $reset_files -eq 0 ]; then 
		all_files="$main_log_file rrr.log t.dat q.log q0.log ao.log ao_count ac_ratios mlog $current_dn/GMIN_out ${output_files[@]}"
		if [ $view_force -eq 1 ]; then
	  		all_files="$output_dir/GMIN_out"
		fi
	fi
	vim $vim_opts $all_files 
fi # }}}
