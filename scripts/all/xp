#!/bin/bash

# set_base_vars() use() intro() {{{

set_base_vars(){
#{{{

export shd="`dirname $(readlink -f $0)`"
export this_script=` basename $0 `

export vim_opts="-n -p"
export v="vim $vim_opts"

#export r="$shd"
#export xyz_dir="$r/../xyz/"
#export tmp_dir="$r/tmp"
#export pics_dir="$r/../pics/"
#export file0="chf"

export r="$PWD"
export xyz_dir="$r/xyz/"
export tmp_dir="$r/tmp"
export pics_dir="$r/pics/"
export file0="chf"

export reset_f=0
export reset_pof=0

export frame_min=1
export frame_max=1
export font_size=30
export show_date=0 
export write_log_file=1
export pic_ext="gif"
export rotate=0
export no_rotate=1
export use_opt=0

export append_angles=0
export append_force=0
export print_text="all"

export zoom=70

export rx=0 ; 
export ry=0 ; 
export rz=0

export xai=10 ; 
export yai=10  
export zai=10
export xamin=0; 
export yamin=0; 
export zamin=0
export xamin=45; 
export yamin=45; 
export zamin=45

#}}}
}

use(){
source $shd/"$this_script"_$1.sh
}

intro(){
#{{{
if [ $no_rotate -eq 1 ]; then
  	xamax=$xamin
  	yamax=$yamin
  	zamax=$zamin
fi 

mkdir -p $tmp_dir
mkdir -p $pics_dir
#}}}
}

# }}}

set_base_vars
intro

display_help(){
# {{{
# general beginning part {{{
cat << EOF
=============================================
SCRIPT NAME: $this_script 
PROJECT: $s_project
PURPOSE: $s_purpose
USAGE: $this_script [ OPTIONS ] 

	OPTIONS:

	============
	General
	============

			display the help message

	vm		v(iew) m(yself), i.e., edit this script
	-g		gvim invocation
	
	============
EOF
# }}}
# actual interesting part {{{
cat << EOF

some option

EOF
# }}}
# final general part {{{
cat << EOF
REMARKS:
AUTHOR: O. Poplavskyy
SCRIPT LOCATION:
	$0
=============================================
EOF
# }}}
# }}}
}

main(){
# {{{

#case .. in {{{
	  	case "$1" in
		  	# ==================
			#
		  	# Ground state of the WT/Go model
			#
		  	"-0") 
				ax=$2; shift; ay=$2; shift; az=$2; shift; shift
				./xp -ax $ax -ay $ay -az $az \
					--in_file gogs \
					--in_dir ../x0 \
					--pics_dir ../pics-gogs \
				       	--picoutfile gogs-$ax-$ay-$az $* ; 
				exit 
				;; 
			"-00") ./xp -0 45 90 45 $* ; exit ;;
			"-0x") shift; ./xp -00 -pof gogs-rx -rx 0 180 $*; exit  ;;
			"-0y") shift; ./xp -00 -pof gogs-ry -ry 0 180 $*; exit  ;;
			"-0z") shift; ./xp -00 -pof gogs-rz -rz 0 180 $*; exit  ;;
			#
			# printing text in output images
			#
			"-nt") print_text="no" ;;
			"-pra") print_text="ra" ;;
			#
			# ===================
			#
		  	"-rm") rm -f $pics_dir/*.$pic_ext ; exit ;;
	    		"-f" | "--in_file" ) file0="$2" ;;
			"-p" | "--pics_dir") pics_dir="$2"
				mkdir -p $pics_dir ;;
			"-zm") zoom=$2 ;;
			"-opt") use_opt=1 ;;
			"-rot") rotate=1; no_rotate=0 ;;
			"-pof" | "--picoutfile") reset_pof=1 ; pof="$2"."$pic_ext" ;;
			"-a") source "$this_script"_cmd"$1".sh ;;
			"-aa") append_angles=1 ;;
			"-af") append_force=1 ;;
			"-naf") append_force=0 ;;
			"-ax") 
				xamin=$2 
				xamax=$xamin
			;;
			"-ay") 
				yamin=$2 
				yamax=$yamin
			;;
			"-az") 
				zamin=$2
				zamax=$zamin
			       	;;

			"-rx") rx=1; no_rotate=0; xamin=$2; xamax=$3; xai=$4 ;;
			"-ry") ry=1; no_rotate=0; yamin=$2; yamax=$3; yai=$4 ;;
			"-rz") rz=1; no_rotate=0; zamin=$2; zamax=$3; zai=$4 ;;

			"-d" | "--in_dir") xyz_dir="$2" ;;
			"-l") ls $xyz_dir ; exit ;;
			"-fmin") frame_min=$2 ; reset_f=1 ;;
			"-fmax") frame_max=$2 ; reset_f=1 ;;
			"-fr") frame_min=$2 ; frame_max=$2 ; reset_f=1 ;;
			"-fns") font_size=$2 ;;
			"-fa") reset_f="2" ;;
			"-log") write_log_file=1 ;;
esac
#}}}

echo "*********************"
echo "Starting $this_script..."
echo "Command-line arguments supplied:"
echo "${cmd_args[@]}"
echo 

	  old_full_file=${full_file%.xyz}.old.xyz
	  cp $full_file $old_full_file 

	  file=$file0.xyz ; full_file=$xyz_dir/$file
	  source "$this_script"_bln.sh

	  # now sort with respect to forces #source sort_forces.sh

	  case "$reset_f" in
	    	0)
	  		frame_max=1
	  		frame_min=1
			;;
		2)	frame_min=1
			frame_max=$num_frames
		;;
	  esac

	  mkdir -p $pics_dir

	  echo "Input XYZ file: $file0 "
	  echo "Input XYZ-directory: $xyz_dir"
	  echo "Number of frames: $num_frames"
	  echo "Output image directory: $pics_dir"
 	  echo "====================================="

	  source "$this_script"_loop_over_frames.sh	  
	  cp $old_full_file $full_file
	 #}}}
  ;;
esac    

# }}}
}

[ -z "$*" ] && ( display_help; exit 0 )

# main part 
# {{{

script_opts=( $* )
cmd_args=( "$@" ) 

while [ ! -z "$1" ]; do
  	case "$1" in
		  #{{{
	  	vm) $v $0 $hm/scripts/f.sh; exit ;;
		h) display_help $*; exit ;;
		-g) v="$v -g" ;;
	  	*) main $* && exit 0 ;;
	esac
  	shift
        #}}}
done

# }}}


