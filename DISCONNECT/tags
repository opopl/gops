!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1	disconnectionDPS.f90	/^1     IF(IR-L.LT.M)THEN$/;"	l	subroutine:INDEXX	file:
11	disconnectionDPS.f90	/^11    CONTINUE$/;"	l	subroutine:INDEXX	file:
11	disconnectionDPS.f90	/^11    DO J1=1,NMIN$/;"	l	subroutine:GETNCONN	file:
111	disconnectionDPS.f90	/^111   CONTINUE$/;"	l	program:DISCONNECTION	file:
12	disconnectionDPS.f90	/^12        CONTINUE$/;"	l	subroutine:INDEXX	file:
1234	disconnectionDPS.f90	/^1234  ENDDO$/;"	l	program:DISCONNECTION	file:
13	disconnectionDPS.f90	/^13      CONTINUE$/;"	l	subroutine:INDEXX	file:
2	disconnectionDPS.f90	/^2         INDX(I+1)=INDXT$/;"	l	subroutine:INDEXX	file:
3	disconnectionDPS.f90	/^3       CONTINUE$/;"	l	subroutine:INDEXX	file:
4	disconnectionDPS.f90	/^4       CONTINUE$/;"	l	subroutine:INDEXX	file:
5	disconnectionDPS.f90	/^5       INDX(L)=INDX(J)$/;"	l	subroutine:INDEXX	file:
5	disconnectionDPS.f90	/^5  CHANGED=.FALSE.$/;"	l	program:DISCONNECTION	file:
666	disconnectionDPS.f90	/^666   CONTINUE$/;"	l	program:DISCONNECTION	file:
AGAIN	disconnectionDPS.f90	/^   LOGICAL :: AGAIN,/;"	v	program:DISCONNECTION
BARRIERS	disconnectionDPS.f90	/^   LOGICAL :: BARRIERS,/;"	v	module:VARS
BASIN	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:,:), ALLOCATABLE :: BASIN,/;"	v	module:VARS
BASIN_GMIN	disconnectionDPS.f90	/^      & N_NODES, N_TS, PATH, USED, BIG_ONES, BASIN_GMIN,/;"	v	program:DISCONNECTION
BASIN_NO	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO,/;"	v	program:DISCONNECTION
BIG_ONES	disconnectionDPS.f90	/^      & N_NODES, N_TS, PATH, USED, BIG_ONES,/;"	v	program:DISCONNECTION
BRANCHES	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:,:), ALLOCATABLE :: BASIN, BRANCHES,/;"	v	module:VARS
BRANCH_TRIM	disconnectionDPS.f90	/^   CHARACTER(LEN=8) :: MIN_TRIM, BRANCH_TRIM,/;"	v	program:DISCONNECTION
BRANCH_TRIM2	disconnectionDPS.f90	/^   CHARACTER(LEN=8) :: MIN_TRIM, BRANCH_TRIM, BRANCH_TRIM2$/;"	v	program:DISCONNECTION
BRANCH_XY	disconnectionDPS.f90	/^   DOUBLE PRECISION, DIMENSION(:,:,:), ALLOCATABLE :: BRANCH_XY$/;"	v	program:DISCONNECTION
B_HIGH	disconnectionDPS.f90	/^   DOUBLE PRECISION :: B_HIGH,/;"	v	program:DISCONNECTION
B_LOW	disconnectionDPS.f90	/^   DOUBLE PRECISION :: B_HIGH, B_LOW,/;"	v	program:DISCONNECTION
C	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C,/;"	v	program:DISCONNECTION
CENTRESPAN	disconnectionDPS.f90	/^   DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: LEVELWEIGHTS, CENTRESPAN$/;"	v	module:VARS
CENTRE_GMIN	disconnectionDPS.f90	/^   LOGICAL :: BARRIERS, CENTRE_GMIN,/;"	v	module:VARS
CHANGED	disconnectionDPS.f90	/^   LOGICAL :: AGAIN, CHANGED$/;"	v	program:DISCONNECTION
CHILDREN	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: NODES, FIRSTCOL, LASTCOL, COLSPAN, CHILDREN$/;"	v	module:VARS
COLSPAN	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: NODES, FIRSTCOL, LASTCOL, COLSPAN,/;"	v	module:VARS
COL_0	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:,:), ALLOCATABLE :: BASIN, BRANCHES, COL_0,/;"	v	module:VARS
CONNECT	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: CONNECT,/;"	v	program:DISCONNECTION
CONNECTIONS	disconnectionDPS.f90	/^SUBROUTINE CONNECTIONS(/;"	s
CONNECTMIN	disconnectionDPS.f90	/^   INTEGER :: CONNECTMIN=/;"	v	module:VARS
COUNT_MIN	disconnectionDPS.f90	/^SUBROUTINE COUNT_MIN(/;"	s
COUNT_TS	disconnectionDPS.f90	/^SUBROUTINE COUNT_TS(/;"	s
DEADTS	disconnectionDPS.f90	/^   LOGICAL, ALLOCATABLE :: DEADTS(/;"	v	program:DISCONNECTION
DELTA_E	disconnectionDPS.f90	/^   DOUBLE PRECISION :: DELTA_E,/;"	v	module:VARS
DISCONNECTION	disconnectionDPS.f90	/^PROGRAM DISCONNECTION$/;"	p
DJWBASIN	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: DJWBASIN(/;"	v	program:DISCONNECTION
DUMMY	disconnectionDPS.f90	/^   DOUBLE PRECISION VMIN, VMAX, DUMMY,/;"	v	program:DISCONNECTION
DUMP_NUMBERS	disconnectionDPS.f90	/^   LOGICAL :: BARRIERS, CENTRE_GMIN, DUMP_NUMBERS,/;"	v	module:VARS
DUMP_SIZES	disconnectionDPS.f90	/^   LOGICAL :: BARRIERS, CENTRE_GMIN, DUMP_NUMBERS, DUMP_SIZES,/;"	v	module:VARS
E	disconnectionDPS.f90	/^      DOUBLE /;"	k	type:TRANSITION_STATE
ENDPOINTS	disconnectionDPS.f90	/^SUBROUTINE ENDPOINTS(/;"	s
END_E	disconnectionDPS.f90	/^   DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: END_E$/;"	v	program:DISCONNECTION
END_M	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: CONNECT, END_M,/;"	v	program:DISCONNECTION
END_X	disconnectionDPS.f90	/^   DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: END_X,/;"	v	module:VARS
END_Y	disconnectionDPS.f90	/^   DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: END_X, END_Y,/;"	v	module:VARS
ENERGY	disconnectionDPS.f90	/^   DOUBLE PRECISION :: B_HIGH, B_LOW, ENERGY,/;"	v	program:DISCONNECTION
ERR	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO, ERR,/;"	v	program:DISCONNECTION
ETHRESH	disconnectionDPS.f90	/^   DOUBLE PRECISION ETHRESH$/;"	v	program:DISCONNECTION
EXCLUDEALL	disconnectionDPS.f90	/^   LOGICAL :: BARRIERS, CENTRE_GMIN, DUMP_NUMBERS, DUMP_SIZES, EXCLUDEALL,/;"	v	module:VARS
E_GMIN	disconnectionDPS.f90	/^      & X1, X2, X3, X_POS, Y1, Y2, Y3, Y_POS, PADDING, E_GMIN,/;"	v	program:DISCONNECTION
E_HIGH	disconnectionDPS.f90	/^   DOUBLE PRECISION :: DELTA_E, E_HIGH$/;"	v	module:VARS
F	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F,/;"	v	program:DISCONNECTION
F90	Makefile	/^F90=$(FC90)$/;"	m
F90FLAGS	Makefile	/^F90FLAGS = -O$/;"	m
FILE_MIN	disconnectionDPS.f90	/^   CHARACTER(LEN=120) :: FILE_MIN,/;"	v	module:VARS
FILE_PICK	disconnectionDPS.f90	/^   CHARACTER(LEN=120) :: FILE_MIN, FILE_PICK,/;"	v	module:VARS
FILE_TRACE	disconnectionDPS.f90	/^   CHARACTER(LEN=120) :: FILE_MIN, FILE_PICK, FILE_TS, FILE_WEIGHTS, &    $/;"	v	module:VARS
FILE_TS	disconnectionDPS.f90	/^   CHARACTER(LEN=120) :: FILE_MIN, FILE_PICK, FILE_TS,/;"	v	module:VARS
FILE_WEIGHTS	disconnectionDPS.f90	/^   CHARACTER(LEN=120) :: FILE_MIN, FILE_PICK, FILE_TS, FILE_WEIGHTS,/;"	v	module:VARS
FIRSTCOL	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: NODES, FIRSTCOL,/;"	v	module:VARS
FONT_SIZE	disconnectionDPS.f90	/^   INTEGER :: FONT_SIZE=/;"	v	module:PAGE
FRAC	disconnectionDPS.f90	/^   DOUBLE PRECISION :: B_HIGH, B_LOW, ENERGY, FRAC,/;"	v	program:DISCONNECTION
GETNCONN	disconnectionDPS.f90	/^      SUBROUTINE GETNCONN(/;"	s
GET_DP	disconnectionDPS.f90	/^   SUBROUTINE GET_DP(/;"	s	module:KEYWORDS
GET_INTEGER	disconnectionDPS.f90	/^   SUBROUTINE GET_INTEGER(/;"	s	module:KEYWORDS
GET_LOGICAL	disconnectionDPS.f90	/^   SUBROUTINE GET_LOGICAL(/;"	s	module:KEYWORDS
GET_STRING	disconnectionDPS.f90	/^   SUBROUTINE GET_STRING(/;"	s	module:KEYWORDS
GMIN	disconnectionDPS.f90	/^      & N_NODES, N_TS, PATH, USED, BIG_ONES, BASIN_GMIN,/;"	v	program:DISCONNECTION
GROUPMAP	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: DJWBASIN(:), NMINGROUP(:), GROUPMAP(/;"	v	program:DISCONNECTION
HEADER	disconnectionDPS.f90	/^SUBROUTINE HEADER$/;"	s
H_PG	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO, ERR, H_PG,/;"	v	program:DISCONNECTION
I	disconnectionDPS.f90	/^   IN/;"	v	program:DISCONNECTION
IDENTIFY	disconnectionDPS.f90	/^   LOGICAL :: BARRIERS, CENTRE_GMIN, DUMP_NUMBERS, DUMP_SIZES, EXCLUDEALL, &$/;"	v	module:VARS
IDENTIFY_NODE	disconnectionDPS.f90	/^   LOGICAL :: IDENTIFY_NODE=/;"	v	module:VARS
IDENTIFY_NODE_SIZE	disconnectionDPS.f90	/^   LOGICAL :: IDENTIFY_NODE_SIZE=/;"	v	module:VARS
IDMINT	disconnectionDPS.f90	/^   LOGICAL :: IDMINT=/;"	v	module:VARS
INDEXX	disconnectionDPS.f90	/^      SUBROUTINE INDEXX(/;"	s
INDX1	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: CONNECT, END_M, INDX1,/;"	v	program:DISCONNECTION
INPUT	disconnectionDPS.f90	/^   CHARACTER(LEN=TOT_LENGTH) :: INPUT$/;"	v	module:KEYWORDS
J	disconnectionDPS.f90	/^   INTEGER :: I, J,/;"	v	program:DISCONNECTION
J1	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C, MM, NCONNMAX, J1,/;"	v	program:DISCONNECTION
J2	disconnectionDPS.f90	/^   INTEGER NBASIN, NCOUNT, J2$/;"	v	program:DISCONNECTION
K	disconnectionDPS.f90	/^   INTEGER :: I, J, K,/;"	v	program:DISCONNECTION
KEYWORDS	disconnectionDPS.f90	/^MODULE KEYWORDS$/;"	m
LABEL_SIZE	disconnectionDPS.f90	/^   INTEGER :: LABEL_SIZE=/;"	v	module:PAGE
LAB_FMT	disconnectionDPS.f90	/^   CHARACTER(LEN=10) :: LAB_FMT$/;"	v	module:VARS
LASTCOL	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: NODES, FIRSTCOL, LASTCOL,/;"	v	module:VARS
LEVELWEIGHTS	disconnectionDPS.f90	/^   DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: LEVELWEIGHTS,/;"	v	module:VARS
LOWEST	disconnectionDPS.f90	/^   INTEGER :: N_LEVELS, N_MIN, LOWEST,/;"	v	module:VARS
LPAFS	disconnectionDPS.f90	/^   DOUBLE PRECISION :: B_HIGH, B_LOW, ENERGY, FRAC, LPAFS,/;"	v	program:DISCONNECTION
M	disconnectionDPS.f90	/^   DOUBLE PRECISION, DIME/;"	v	module:VARS
MARGIN_X	disconnectionDPS.f90	/^   INTEGER :: MARGIN_X=/;"	v	module:PAGE
MARGIN_Y	disconnectionDPS.f90	/^   INTEGER :: MARGIN_X=40, MARGIN_Y=/;"	v	module:PAGE
MARKNODE	disconnectionDPS.f90	/^      NODE_SIZE, PARENT, MARKNODE$/;"	v	module:VARS
MATCHMIN	disconnectionDPS.f90	/^   LOGICAL :: MATCHMIN=/;"	v	module:VARS
MAX_LENGTH	disconnectionDPS.f90	/^   INTEGER, PARAMETER :: MAX_LINES=2, MAX_LENGTH=/;"	v	module:KEYWORDS
MAX_LINES	disconnectionDPS.f90	/^   INTEGER, PARAMETER :: MAX_LINES=/;"	v	module:KEYWORDS
MAX_MIN	disconnectionDPS.f90	/^   INTEGER :: N_LEVELS, N_MIN, LOWEST, MAX_MIN,/;"	v	module:VARS
MAX_MIN2	disconnectionDPS.f90	/^   INTEGER :: N_LEVELS, N_MIN, LOWEST, MAX_MIN, MAX_MIN2$/;"	v	module:VARS
MIN1	disconnectionDPS.f90	/^      INTEGER :: N, MIN1,/;"	k	type:TRANSITION_STATE
MIN1	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO, ERR, H_PG, MIN1,/;"	v	program:DISCONNECTION
MIN2	disconnectionDPS.f90	/^      INTEGER :: N, MIN1, MIN2$/;"	k	type:TRANSITION_STATE
MIN2	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO, ERR, H_PG, MIN1, MIN2,/;"	v	program:DISCONNECTION
MINIDS	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: MINIDS(/;"	v	module:VARS
MINRANGE	disconnectionDPS.f90	/^   INTEGER :: MINRANGE=/;"	v	module:VARS
MINTRS	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: MINTRS(/;"	v	module:VARS
MINUS	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: PLUS(:), MINUS(/;"	v	program:DISCONNECTION
MIN_TEMP	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO, ERR, H_PG, MIN1, MIN2, MIN_TEMP,/;"	v	program:DISCONNECTION
MIN_TRIM	disconnectionDPS.f90	/^   CHARACTER(LEN=8) :: MIN_TRIM,/;"	v	program:DISCONNECTION
MIX	disconnectionDPS.f90	/^SUBROUTINE MIX(/;"	s
MM	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C, MM,/;"	v	program:DISCONNECTION
MONOTONIC	disconnectionDPS.f90	/^      IDENTIFY, MONOTONIC,/;"	v	module:VARS
N	disconnectionDPS.f90	/^      INT/;"	k	type:TRANSITION_STATE
NBASIN	disconnectionDPS.f90	/^   INTEGER NBASIN,/;"	v	program:DISCONNECTION
NCONN	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: NCONN(/;"	v	module:VARS
NCONNMAX	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C, MM, NCONNMAX,/;"	v	program:DISCONNECTION
NCONNMIN	disconnectionDPS.f90	/^   INTEGER :: NCONNMIN=/;"	v	module:VARS
NCOUNT	disconnectionDPS.f90	/^   INTEGER NBASIN, NCOUNT,/;"	v	program:DISCONNECTION
NCYCLE	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C, MM, NCONNMAX, J1, NDEAD, NCYCLE,/;"	v	program:DISCONNECTION
NDEAD	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C, MM, NCONNMAX, J1, NDEAD,/;"	v	program:DISCONNECTION
NDISTA	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: PLUS(:), MINUS(:), NDISTA(/;"	v	program:DISCONNECTION
NDUMMY	disconnectionDPS.f90	/^   INTEGER NDUMMY,/;"	v	program:DISCONNECTION
NEXT_ITEM	disconnectionDPS.f90	/^   SUBROUTINE NEXT_ITEM(/;"	s	module:KEYWORDS
NLEFTMIN	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C, MM, NCONNMAX, J1, NDEAD, NCYCLE, NUNCONA, NLEFTMIN,/;"	v	program:DISCONNECTION
NLEFTTS	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C, MM, NCONNMAX, J1, NDEAD, NCYCLE, NUNCONA, NLEFTMIN, NLEFTTS$/;"	v	program:DISCONNECTION
NMINGROUP	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: DJWBASIN(:), NMINGROUP(/;"	v	program:DISCONNECTION
NMINID	disconnectionDPS.f90	/^   INTEGER :: NMINID=/;"	v	module:VARS
NMINTR	disconnectionDPS.f90	/^   INTEGER :: NMINTR=/;"	v	module:VARS
NN	disconnectionDPS.f90	/^   INTEGER NDUMMY, NN /;"	v	program:DISCONNECTION
NODES	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: NODES,/;"	v	module:VARS
NODE_SIZE	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:,:), ALLOCATABLE :: BASIN, BRANCHES, COL_0, ORDER, &$/;"	v	module:VARS
NUNCONA	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S, R, F, C, MM, NCONNMAX, J1, NDEAD, NCYCLE, NUNCONA,/;"	v	program:DISCONNECTION
N_BR	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO, ERR, H_PG, MIN1, MIN2, MIN_TEMP, N_BR,/;"	v	program:DISCONNECTION
N_COLS	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO, ERR, H_PG, MIN1, MIN2, MIN_TEMP, N_BR, N_COLS,/;"	v	program:DISCONNECTION
N_LEVELS	disconnectionDPS.f90	/^   INTEGER :: N_LEVELS,/;"	v	module:VARS
N_MIN	disconnectionDPS.f90	/^   INTEGER :: N_LEVELS, N_MIN,/;"	v	module:VARS
N_NODES	disconnectionDPS.f90	/^   INTEGER :: BASIN_NO, ERR, H_PG, MIN1, MIN2, MIN_TEMP, N_BR, N_COLS, &$/;"	v	program:DISCONNECTION
N_TS	disconnectionDPS.f90	/^      & N_NODES, N_TS,/;"	v	program:DISCONNECTION
ORDER	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:,:), ALLOCATABLE :: BASIN, BRANCHES, COL_0, ORDER,/;"	v	module:VARS
P	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P,/;"	v	program:DISCONNECTION
PADDING	disconnectionDPS.f90	/^      & X1, X2, X3, X_POS, Y1, Y2, Y3, Y_POS, PADDING,/;"	v	program:DISCONNECTION
PAGE	disconnectionDPS.f90	/^MODULE PAGE$/;"	m
PAGE_X	disconnectionDPS.f90	/^   INTEGER :: PAGE_X=/;"	v	module:PAGE
PAGE_Y	disconnectionDPS.f90	/^   INTEGER :: PAGE_X=595,  PAGE_Y=/;"	v	module:PAGE
PARENT	disconnectionDPS.f90	/^      NODE_SIZE, PARENT,/;"	v	module:VARS
PATH	disconnectionDPS.f90	/^      & N_NODES, N_TS, PATH,/;"	v	program:DISCONNECTION
PG	disconnectionDPS.f90	/^   CHARACTER(LEN=3) :: PG$/;"	v	program:DISCONNECTION
PLUS	disconnectionDPS.f90	/^   INTEGER, ALLOCATABLE :: PLUS(/;"	v	program:DISCONNECTION
POSITION	disconnectionDPS.f90	/^   INTEGER :: POSITION$/;"	v	module:KEYWORDS
Q	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q,/;"	v	program:DISCONNECTION
R	disconnectionDPS.f90	/^   INTEGER /;"	v	program:DISCONNECTION
R2	disconnectionDPS.f90	/^   DOUBLE PRECISION VMIN, VMAX, DUMMY,R2$/;"	v	program:DISCONNECTION
READ_LINE	disconnectionDPS.f90	/^   SUBROUTINE READ_LINE(/;"	s	module:KEYWORDS
READ_OPTIONS	disconnectionDPS.f90	/^SUBROUTINE READ_OPTIONS$/;"	s
READ_TRFILE	disconnectionDPS.f90	/^   SUBROUTINE READ_TRFILE(/;"	s	module:KEYWORDS
S	disconnectionDPS.f90	/^   INTEGER :: I, J, K, P, Q, S,/;"	v	program:DISCONNECTION
SCALE_WIDTH	disconnectionDPS.f90	/^   INTEGER :: SCALE_WIDTH=/;"	v	module:PAGE
SORTED	disconnectionDPS.f90	/^   INTEGER, DIMENSION(:), ALLOCATABLE :: CONNECT, END_M, INDX1, SORTED$/;"	v	program:DISCONNECTION
SPLIT	disconnectionDPS.f90	/^      IDENTIFY, MONOTONIC, SPLIT,/;"	v	module:VARS
SPLIT_OPTION	disconnectionDPS.f90	/^      & X1, X2, X3, X_POS, Y1, Y2, Y3, Y_POS, PADDING, E_GMIN, SPLIT_OPTION$/;"	v	program:DISCONNECTION
TOT_LENGTH	disconnectionDPS.f90	/^   INTEGER, PARAMETER :: TOT_LENGTH=/;"	v	module:KEYWORDS
TRANSITION_STATE	disconnectionDPS.f90	/^   TYPE TRANSITION_STATE$/;"	t	program:DISCONNECTION
TRMINT	disconnectionDPS.f90	/^   LOGICAL :: TRMINT=/;"	v	module:VARS
TRPRINT	disconnectionDPS.f90	/^   LOGICAL :: TRPRINT=/;"	v	module:VARS
TS	disconnectionDPS.f90	/^   TYPE(TRANSITION_STATE), DIMENSION(:), ALLOCATABLE :: TS$/;"	v	program:DISCONNECTION
TSBARTHRESH	disconnectionDPS.f90	/^   DOUBLE PRECISION :: TSBARTHRESH=/;"	v	module:VARS
TSTHRESH	disconnectionDPS.f90	/^   DOUBLE PRECISION :: TSTHRESH=/;"	v	module:VARS
UPPER_CASE	disconnectionDPS.f90	/^   SUBROUTINE UPPER_CASE(/;"	s	module:KEYWORDS
USED	disconnectionDPS.f90	/^      & N_NODES, N_TS, PATH, USED,/;"	v	program:DISCONNECTION
VARS	disconnectionDPS.f90	/^MODULE VARS /;"	m
VMAX	disconnectionDPS.f90	/^   DOUBLE PRECISION VMIN, VMAX,/;"	v	program:DISCONNECTION
VMIN	disconnectionDPS.f90	/^   DOUBLE PRECISION VMIN,/;"	v	program:DISCONNECTION
WEIGHTS	disconnectionDPS.f90	/^      IDENTIFY, MONOTONIC, SPLIT, WEIGHTS$/;"	v	module:VARS
X1	disconnectionDPS.f90	/^   DOUBLE PRECISION :: B_HIGH, B_LOW, ENERGY, FRAC, LPAFS, &$/;"	v	program:DISCONNECTION
X2	disconnectionDPS.f90	/^      & X1, X2,/;"	v	program:DISCONNECTION
X3	disconnectionDPS.f90	/^      & X1, X2, X3,/;"	v	program:DISCONNECTION
X_POS	disconnectionDPS.f90	/^      & X1, X2, X3, X_POS,/;"	v	program:DISCONNECTION
X_POS	disconnectionDPS.f90	/^FUNCTION X_POS(/;"	f
Y1	disconnectionDPS.f90	/^      & X1, X2, X3, X_POS, Y1,/;"	v	program:DISCONNECTION
Y2	disconnectionDPS.f90	/^      & X1, X2, X3, X_POS, Y1, Y2,/;"	v	program:DISCONNECTION
Y3	disconnectionDPS.f90	/^      & X1, X2, X3, X_POS, Y1, Y2, Y3,/;"	v	program:DISCONNECTION
Y_POS	disconnectionDPS.f90	/^      & X1, X2, X3, X_POS, Y1, Y2, Y3, Y_POS,/;"	v	program:DISCONNECTION
Y_POS	disconnectionDPS.f90	/^FUNCTION Y_POS(/;"	f
above	manipulate.f90	/^SUBROUTINE above(/;"	s
below	manipulate.f90	/^SUBROUTINE below(/;"	s
between	manipulate.f90	/^SUBROUTINE between(/;"	s
c	manipulate.f90	/^   DOUBLE PRECISION :: ch/;"	v	program:manipulate
change	manipulate.f90	/^   DOUBLE PRECISION :: change,/;"	v	program:manipulate
command	manipulate.f90	/^   CHARACTER(LEN=20) :: command$/;"	v	program:manipulate
directly_below	manipulate.f90	/^SUBROUTINE directly_below(/;"	s
f	manipulate.f90	/^   DOUBLE PRECISION :: change, x, y, xp, yp, x1, x2, y1, y2, f,/;"	v	program:manipulate
find	manipulate.f90	/^SUBROUTINE find(/;"	s
first	manipulate.f90	/^   INTEGER :: nlines, first,/;"	v	module:tree
get_dp	manipulate.f90	/^   SUBROUTINE get_dp(/;"	s	module:keywords
get_integer	manipulate.f90	/^   SUBROUTINE get_integer(/;"	s	module:keywords
get_logical	manipulate.f90	/^   SUBROUTINE get_logical(/;"	s	module:keywords
get_string	manipulate.f90	/^   SUBROUTINE get_string(/;"	s	module:keywords
hlist	manipulate.f90	/^   DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: hlist$/;"	v	program:manipulate
i	manipulate.f90	/^   INTEGER :: i,/;"	v	program:manipulate
input	manipulate.f90	/^   CHARACTER(LEN=tot_length) :: input$/;"	v	module:keywords
j	manipulate.f90	/^   INTEGER :: i, j,/;"	v	program:manipulate
k	manipulate.f90	/^   INTEGER :: i, j, k,/;"	v	program:manipulate
keywords	manipulate.f90	/^MODULE keywords$/;"	m
list_x	manipulate.f90	/^   DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: list_x,/;"	v	module:tree
list_y	manipulate.f90	/^   DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: list_x, list_y$/;"	v	module:tree
m	manipulate.f90	/^   INTEGER :: i, j, k, m,/;"	v	program:manipulate
manipulate	manipulate.f90	/^PROGRAM manipulate$/;"	p
max_length	manipulate.f90	/^   INTEGER, PARAMETER :: max_lines=2, max_length=/;"	v	module:keywords
max_lines	manipulate.f90	/^   INTEGER, PARAMETER :: max_lines=/;"	v	module:keywords
move	manipulate.f90	/^SUBROUTINE move(/;"	s
next_item	manipulate.f90	/^   SUBROUTINE next_item(/;"	s	module:keywords
nh	manipulate.f90	/^   INTEGER :: i, j, k, m, nh$/;"	v	program:manipulate
nlines	manipulate.f90	/^   INTEGER :: nlines,/;"	v	module:tree
nlist	manipulate.f90	/^   INTEGER :: nlines, first, nlist$/;"	v	module:tree
position	manipulate.f90	/^   INTEGER :: position$/;"	v	module:keywords
postscript	manipulate.f90	/^   CHARACTER(LEN=50), DIMENSION(:), ALLOCATABLE :: postscript$/;"	v	module:tree
read_line	manipulate.f90	/^   SUBROUTINE read_line(/;"	s	module:keywords
read_tree	manipulate.f90	/^SUBROUTINE read_tree(/;"	s
rmline	manipulate.f90	/^SUBROUTINE rmline(/;"	s
success	manipulate.f90	/^   LOGICAL :: success$/;"	v	program:manipulate
tol	manipulate.f90	/^   DOUBLE PRECISION, PARAMETER :: tol /;"	v	module:tree
tot_length	manipulate.f90	/^   INTEGER, PARAMETER :: tot_length=/;"	v	module:keywords
tree	manipulate.f90	/^MODULE tree$/;"	m
upper_case	manipulate.f90	/^  SUBROUTINE upper_case(/;"	s	module:keywords
write_tree	manipulate.f90	/^SUBROUTINE write_tree(/;"	s
x	manipulate.f90	/^   DOUBLE PRECISION :: change, x,/;"	v	program:manipulate
x1	manipulate.f90	/^   DOUBLE PRECISION :: change, x, y, xp, yp, x1,/;"	v	program:manipulate
x2	manipulate.f90	/^   DOUBLE PRECISION :: change, x, y, xp, yp, x1, x2,/;"	v	program:manipulate
xp	manipulate.f90	/^   DOUBLE PRECISION :: change, x, y, xp,/;"	v	program:manipulate
y	manipulate.f90	/^   DOUBLE PRECISION :: change, x, y,/;"	v	program:manipulate
y1	manipulate.f90	/^   DOUBLE PRECISION :: change, x, y, xp, yp, x1, x2, y1,/;"	v	program:manipulate
y2	manipulate.f90	/^   DOUBLE PRECISION :: change, x, y, xp, yp, x1, x2, y1, y2,/;"	v	program:manipulate
yp	manipulate.f90	/^   DOUBLE PRECISION :: change, x, y, xp, yp,/;"	v	program:manipulate
