C   GPL LICENSE INFO {{{
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C }}}
C
C DOXYGEN: G46MERDIFF {{{
C
C> \MAINPAGE 
C> \NAME G46MERDIFF

C
C> \BRIEF CALCULATE THE ENERGY, GRADIENT, AND SECOND DERIVATIVES MATRIX FOR THE GO-LIKE BLN MODEL \N
C> \AUTHOR JOHN ROSE
C>
C> A PARTICLE CONFIGURATION AND NUMBER OF PARTICLES IS PASSED TO THE SUBROUTINE AND
C> THE ENERGY, GRADIENT, AND MATRIX OF SECOND DERIVATIVES IS RETURNED.
C>
C> \PARAM N          NUMBER OF PARTICLES
C> \PARAM QO         ARRAY OF CARTESIAN PARTICLE COORDINATES
C> \PARAM GRAD       ARRAY OF GRADIENTS
C> \PARAM ENERGY     ENERGY
C }}}
        SUBROUTINE G46MERDIFF(QO, N, GRAD, ENERGY, GTEST)
C {{{ 
C DECLARATIONS {{{
        USE MODHESS
        IMPLICIT NONE
        LOGICAL GTEST, STEST
        INTEGER NTYPE(46), N
        DOUBLE PRECISION QO(3*N), GRAD(3*N), ENERGY
        DOUBLE PRECISION A_PARAM(N,N), B_PARAM(N,N),D_PARAM(N),
     1                   C_PARAM(N), RK_THETA, RK_R, EPSILON, SIGMA, THETA_0, DELTA, RMASS
        PARAMETER (RMASS = 40.0, EPSILON = 0.0100570)
        PARAMETER (SIGMA=3.4, DELTA=1.0D-6, THETA_0 = 1.8326)
        PARAMETER (RK_R = 20.0*0.0100570, RK_THETA = 20.0*0.0100570)
        DOUBLE PRECISION X(N), Y(N), Z(N), XR(N,N), YR(N,N), ZR(N,N),
     2                  DOT_PROD(N,3), X_PROD(N), BOND_ANGLE(N), TOR_ANGLE(N), RADII(N,N)
C }}}
C       COMMON/WORK/A_PARAM(N,N),
C    1  B_PARAM(N,N),NTYPE(46),
C    1  D_PARAM(N),C_PARAM(N)

        STEST=.FALSE.

        CALL GPARAM_ARRAY(A_PARAM,B_PARAM,C_PARAM,D_PARAM,N)
        CALL CALC_INT_COORDS(QO,N,A_PARAM,B_PARAM,C_PARAM,D_PARAM,X,Y,Z,XR,YR,ZR,DOT_PROD,X_PROD, BOND_ANGLE,TOR_ANGLE,
     1                            RADII,NTYPE)
        CALL CALC_ENERGY(QO,ENERGY,N,A_PARAM,B_PARAM,C_PARAM,D_PARAM,X,Y,Z,XR,YR,ZR,DOT_PROD,X_PROD, BOND_ANGLE,TOR_ANGLE,
     1                            RADII,NTYPE)
        IF ((.NOT.GTEST).AND.(.NOT.STEST)) RETURN
        CALL CALC_GRADIENT(QO,GRAD,N,A_PARAM,B_PARAM,C_PARAM,D_PARAM,X,Y,Z,XR,YR,ZR,DOT_PROD,X_PROD, BOND_ANGLE,TOR_ANGLE,
     1                            RADII,NTYPE)

C COMMENTED SECTION {{{
C        DIF=1.0D-4
C        DO J1=1,3*N
C           TEMP1=QO(J1)
C           QO(J1)=QO(J1)+DIF
C           CALL CALC_INT_COORDS(QO,N)
C           CALL CALC_ENERGY(QO,V1,N)
C           QO(J1)=QO(J1)-2.0D0*DIF
C           CALL CALC_INT_COORDS(QO,N)
C           CALL CALC_ENERGY(QO,V2,N)
C           TGRAD(J1)=(V1-V2)/(2.0D0*DIF)
C           QO(J1)=TEMP1
C        ENDDO
C        CALL CALC_INT_COORDS(QO,N)

C       PRINT*,'ANALYTICAL/NUMERICAL FIRST DERIVATIVES:'
C       WRITE(*,'(3G20.10)') (GRAD(J1)/TGRAD(J1),J1=1,3*N)
C }}}

        IF (.NOT.STEST) RETURN
        CALL CALC_DYN(QO,N,A_PARAM,B_PARAM,C_PARAM,D_PARAM,X,Y,Z,XR,YR,ZR,DOT_PROD,X_PROD, BOND_ANGLE,TOR_ANGLE,
     1                            RADII,NTYPE)

        RETURN
        END
C }}}
C
C DOXYGEN: GPARAM_ARRAY {{{
C>
C> \BRIEF FILL THE PARAMETER ARRAYS WHICH SPECIFY INTERACTION POTENTIALS
C> \PARAM N INTEGER  - NUMBER OF PARTICLES
C> \PARAM A_PARAM \PARAM B_PARAM - LJ INTERACTION BETWEEN NON-BONDED PARTICLES 
C> \PARAM C_PARAM \PARAM D_PARAM - DIHEDRAL ANGLE POTENTIAL
C>
C}}}
        SUBROUTINE GPARAM_ARRAY(A_PARAM,B_PARAM,C_PARAM,D_PARAM,N)
C {{{
C DECLARATIONS {{{
        IMPLICIT NONE
        LOGICAL CONNECT(46,46)
        INTEGER J, ICOUNT, I, J2, J1, N
        DOUBLE PRECISION NTYPE(46), A_PARAM(N,N), B_PARAM(N,N)
        DOUBLE PRECISION C_PARAM(N), D_PARAM(N), EPSILON
        PARAMETER (EPSILON = 0.0100570)
C }}}
C SPECIFY AMINO ACID TYPES BY FILLING IN THE ARRAY NTYPE(:) {{{

        NTYPE(1) = 1
        NTYPE(2) = 1
        NTYPE(3) = 1
        NTYPE(4) = 1
        NTYPE(5) = 1
        NTYPE(6) = 1
        NTYPE(7) = 1
        NTYPE(8) = 1
        NTYPE(9) = 1
        NTYPE(10) = 3
        NTYPE(11) = 3
        NTYPE(12) = 3
        NTYPE(13) = 2
        NTYPE(14) = 1
        NTYPE(15) = 2
        NTYPE(16) = 1
        NTYPE(17) = 2
        NTYPE(18) = 1
        NTYPE(19) = 2
        NTYPE(20) = 1
        NTYPE(21) = 3
        NTYPE(22) = 3
        NTYPE(23) = 3
        NTYPE(24) = 1
        NTYPE(25) = 1
        NTYPE(26) = 1
        NTYPE(27) = 1
        NTYPE(28) = 1
        NTYPE(29) = 1
        NTYPE(30) = 1
        NTYPE(31) = 1
        NTYPE(32) = 1
        NTYPE(33) = 3
        NTYPE(34) = 3
        NTYPE(35) = 3
        NTYPE(36) = 2
        NTYPE(37) = 1
        NTYPE(38) = 2
        NTYPE(39) = 1
        NTYPE(40) = 2
        NTYPE(41) = 1
        NTYPE(42) = 2
        NTYPE(43) = 1
        NTYPE(44) = 2
        NTYPE(45) = 1
        NTYPE(46) = 2
     
C }}}
C GO-LIKE MODEL CONNECTIVITIES: FILL IN ARRAY CONNECT(:,:) {{{
C
        DO J1=1,46
           DO J2=J1,46
              CONNECT(J2,J1)=.FALSE.
           ENDDO
        ENDDO
        CONNECT(20, 1)=.TRUE.
        CONNECT(24, 1)=.TRUE.
        CONNECT(45, 1)=.TRUE.
        CONNECT(24, 2)=.TRUE.
        CONNECT(43, 2)=.TRUE.
        CONNECT(45, 2)=.TRUE.
        CONNECT(18, 3)=.TRUE.
        CONNECT(20, 3)=.TRUE.
        CONNECT(25, 3)=.TRUE.
        CONNECT(26, 3)=.TRUE.
        CONNECT(43, 3)=.TRUE.
        CONNECT(26, 4)=.TRUE.
        CONNECT(41, 4)=.TRUE.
        CONNECT(16, 5)=.TRUE.
        CONNECT(18, 5)=.TRUE.
        CONNECT(26, 5)=.TRUE.
        CONNECT(27, 5)=.TRUE.
        CONNECT(28, 5)=.TRUE.
        CONNECT(41, 5)=.TRUE.
        CONNECT(28, 6)=.TRUE.
        CONNECT(39, 6)=.TRUE.
        CONNECT(16, 7)=.TRUE.
        CONNECT(28, 7)=.TRUE.
        CONNECT(29, 7)=.TRUE.
        CONNECT(30, 7)=.TRUE.
        CONNECT(39, 7)=.TRUE.
        CONNECT(30, 8)=.TRUE.
        CONNECT(37, 8)=.TRUE.
        CONNECT(14, 9)=.TRUE.
        CONNECT(30, 9)=.TRUE.
        CONNECT(31, 9)=.TRUE.
        CONNECT(32, 9)=.TRUE.
        CONNECT(37, 9)=.TRUE.
        CONNECT(30, 14)=.TRUE.
        CONNECT(31, 14)=.TRUE.
        CONNECT(28, 16)=.TRUE.
        CONNECT(29, 16)=.TRUE.
        CONNECT(26, 18)=.TRUE.
        CONNECT(24, 20)=.TRUE.
        CONNECT(25, 20)=.TRUE.
        CONNECT(45, 24)=.TRUE.
        CONNECT(41, 26)=.TRUE.
        CONNECT(43, 26)=.TRUE.
        CONNECT(39, 28)=.TRUE.
        CONNECT(41, 28)=.TRUE.
        CONNECT(39, 30)=.TRUE.
        CONNECT(37, 32)=.TRUE.
        CONNECT(1, 20)=.TRUE.
        CONNECT(1, 24)=.TRUE.
        CONNECT(1, 45)=.TRUE.
        CONNECT(2, 24)=.TRUE.
        CONNECT(2, 43)=.TRUE.
        CONNECT(2, 45)=.TRUE.
        CONNECT(3, 18)=.TRUE.
        CONNECT(3, 20)=.TRUE.
        CONNECT(3, 25)=.TRUE.
        CONNECT(3, 26)=.TRUE.
        CONNECT(3, 43)=.TRUE.
        CONNECT(4, 26)=.TRUE.
        CONNECT(4, 41)=.TRUE.
        CONNECT(5, 16)=.TRUE.
        CONNECT(5, 18)=.TRUE.
        CONNECT(5, 26)=.TRUE.
        CONNECT(5, 27)=.TRUE.
        CONNECT(5, 28)=.TRUE.
        CONNECT(5, 41)=.TRUE.
        CONNECT(6, 28)=.TRUE.
        CONNECT(6, 39)=.TRUE.
        CONNECT(7, 16)=.TRUE.
        CONNECT(7, 28)=.TRUE.
        CONNECT(7, 29)=.TRUE.
        CONNECT(7, 30)=.TRUE.
        CONNECT(7, 39)=.TRUE.
        CONNECT(8, 30)=.TRUE.
        CONNECT(8, 37)=.TRUE.
        CONNECT(9, 14)=.TRUE.
        CONNECT(9, 30)=.TRUE.
        CONNECT(9, 31)=.TRUE.
        CONNECT(9, 32)=.TRUE.
        CONNECT(9, 37)=.TRUE.
        CONNECT(14, 30)=.TRUE.
        CONNECT(14, 31)=.TRUE.
        CONNECT(16, 28)=.TRUE.
        CONNECT(16, 29)=.TRUE.
        CONNECT(18, 26)=.TRUE.
        CONNECT(20, 24)=.TRUE.
        CONNECT(20, 25)=.TRUE.
        CONNECT(24, 45)=.TRUE.
        CONNECT(26, 41)=.TRUE.
        CONNECT(26, 43)=.TRUE.
        CONNECT(28, 39)=.TRUE.
        CONNECT(28, 41)=.TRUE.
        CONNECT(30, 39)=.TRUE.
        CONNECT(32, 37)=.TRUE.

C }}}
C PARAMETERS FOR THE DIHEDRAL ANGLE POTENTIAL: FILL IN ARRAYS C_PARAM(:,:), D_PARAM(:,:) {{{

        DO I = 1, N-3
        ICOUNT = 0

        DO J = 0,3
        IF(NTYPE(I+J) .EQ. 3)THEN
        ICOUNT = ICOUNT + 1
        ENDIF
        ENDDO

        IF(ICOUNT .GE. 2)THEN
        C_PARAM(I+1) = 0.0
        D_PARAM(I+1) = 0.2*EPSILON
        ELSE
        C_PARAM(I+1) = 1.2*EPSILON
        D_PARAM(I+1) = 1.2*EPSILON
        ENDIF

        ICOUNT = 0

        ENDDO
C }}}
C PARAMETERS FOR THE L-J INTERACTION BETWEEN NON-BONDED PARTICLES:
C ARRAYS A_PARAM(:,:), B_PARAM(:,:)
C {{{

        DO I = 1, N-1
           DO J = I+1, N

           IF (NTYPE(I) .EQ. 3 .OR. NTYPE(J) .EQ. 3) THEN
             A_PARAM(I,J) = 1.0*EPSILON 
             B_PARAM(I,J) = 0.0 
             A_PARAM(J,I) = 1.0*EPSILON 
             B_PARAM(J,I) = 0.0
           ELSEIF (NTYPE(I) .EQ. 1 .AND. NTYPE(J) .EQ. 1)THEN
             A_PARAM(I,J) =  EPSILON
             A_PARAM(J,I) =  EPSILON
             IF (CONNECT(I,J)) THEN
                B_PARAM(I,J) = -EPSILON 
                B_PARAM(J,I) = -EPSILON
             ELSE
                B_PARAM(I,J) = 0.0D0
                B_PARAM(J,I) = 0.0D0
             ENDIF
           ELSE
             A_PARAM(I,J) = EPSILON*2.0/3.0 
             B_PARAM(I,J) = EPSILON*2.0/3.0 
             A_PARAM(J,I) = EPSILON*2.0/3.0 
             B_PARAM(J,I) = EPSILON*2.0/3.0 
           ENDIF
   
           ENDDO
        ENDDO
C }}}
        RETURN
        END
C }}}
