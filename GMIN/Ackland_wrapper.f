
C   OPTIM: A PROGRAM FOR OPTIMIZING GEOMETRIES AND CALCULATING REACTION PATHWAYS
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C
C***********************************************************************
C
C SUBROUTINE FOR ACKLAND METAL POTENTIALS. PERIODIC BOUNDARY CONDITIONS!
C
C***********************************************************************
C
      SUBROUTINE ACK(X,VNEW,PSC,GTEST)
      USE COMMONS, ONLY : ACKLANDID, NATOMS, BOXLX, BOXLY, BOXLZ, CUTOFF, VT
      IMPLICIT NONE
      INTEGER N, J1, J2, J, I, MZ, MY, MX 
      DOUBLE PRECISION X(3*NATOMS), POTA, POTB, DIST, PSC, VNEW(3*NATOMS),RC
      COMMON /PARAM_CUT_OFF/RC	

      DOUBLE PRECISION RHO(3*NATOMS)
      DOUBLE PRECISION VEC(NATOMS,NATOMS,3),RNEIGH(NATOMS,NATOMS,3),FORCE(3,NATOMS)
      DOUBLE PRECISION RBUF,R,ZERO,NORM,RHO_TEMP,VPOT_TEMP,FEMBED_D_I
      DOUBLE PRECISION VPOT,VPOT_D,RHO_POT,RHO_POT_D,FEMBED,FEMBED_D
      INTEGER IPOT,ICOUNT,JA
      INTEGER IC(NATOMS),NEIGH_TYPE(NATOMS,NATOMS),NDIR(NATOMS)
      LOGICAL GTEST

      N=NATOMS 
      RC=CUTOFF
!
! IF ACKLANDID IS NEGATIVE WE USE CLUSTER BOUNDARY CONDITIONS!
!
      IPOT=ABS(ACKLANDID)
      ZERO=1.0D-12
C
C  CALCULATION OF CONNECTING VECTORS; TO IMPLEMENT THE PERIODIC
C  BOUNDARY CONDITIONS, THE SHORTEST VECTOR BETWEEN TWO ATOMS IS
C  USED:
C
      ICOUNT=0
      IC(:)=0
      
      IF (ACKLANDID.GT.0) THEN
         DO 25 J1=1,N
            VEC(J1,J1,1)=0.0D0
            VEC(J1,J1,2)=0.0D0
            VEC(J1,J1,3)=0.0D0
	    
	    ICOUNT=IC(J1)
            
	    DO 15 J2=J1+1,N
               VEC(J2,J1,1)=X(3*(J2-1)+1)-X(3*(J1-1)+1)
               VEC(J2,J1,2)=X(3*(J2-1)+2)-X(3*(J1-1)+2)
               VEC(J2,J1,3)=X(3*(J2-1)+3)-X(3*(J1-1)+3)
               MX=NINT(VEC(J2,J1,1)/BOXLX)
               MY=NINT(VEC(J2,J1,2)/BOXLY)
               MZ=NINT(VEC(J2,J1,3)/BOXLZ)
               VEC(J2,J1,1)=VEC(J2,J1,1) - BOXLX * FLOAT(MX)
               VEC(J2,J1,2)=VEC(J2,J1,2) - BOXLY * FLOAT(MY)
               VEC(J2,J1,3)=VEC(J2,J1,3) - BOXLZ * FLOAT(MZ)
               VEC(J1,J2,1)=-VEC(J2,J1,1)
               VEC(J1,J2,2)=-VEC(J2,J1,2)
               VEC(J1,J2,3)=-VEC(J2,J1,3)
	       NORM=VEC(J1,J2,1)**2 + VEC(J1,J2,2)**2 + VEC(J1,J2,3)**2
	       IF (NORM < RC*RC.AND.NORM>ZERO) THEN
	       ICOUNT=ICOUNT+1
	       IC(J2)=IC(J2)+1
	       RNEIGH(J2,IC(J2),1)=VEC(J1,J2,1)
	       RNEIGH(J2,IC(J2),2)=VEC(J1,J2,2)
	       RNEIGH(J2,IC(J2),3)=VEC(J1,J2,3)
	       
	       RNEIGH(J1,ICOUNT,1)=VEC(J2,J1,1)
	       RNEIGH(J1,ICOUNT,2)=VEC(J2,J1,2)
	       RNEIGH(J1,ICOUNT,3)=VEC(J2,J1,3)
	       
	       NEIGH_TYPE(J1,ICOUNT)=J2
	       NEIGH_TYPE(J2,IC(J2))=J1
	       
	       END IF
15          CONTINUE
         NDIR(J1)=ICOUNT
25       CONTINUE
      ELSE ! CLUSTER CASE !   
         DO J1=1,N
            VEC(J1,J1,1)=0.0D0
            VEC(J1,J1,2)=0.0D0
            VEC(J1,J1,3)=0.0D0
	    
	    ICOUNT=IC(J1)
            
	    DO J2=J1+1,N
               VEC(J2,J1,1)=X(3*(J2-1)+1)-X(3*(J1-1)+1)
               VEC(J2,J1,2)=X(3*(J2-1)+2)-X(3*(J1-1)+2)
               VEC(J2,J1,3)=X(3*(J2-1)+3)-X(3*(J1-1)+3)
               VEC(J1,J2,1)=-VEC(J2,J1,1)
               VEC(J1,J2,2)=-VEC(J2,J1,2)
               VEC(J1,J2,3)=-VEC(J2,J1,3)
	       NORM=VEC(J1,J2,1)**2 + VEC(J1,J2,2)**2 + VEC(J1,J2,3)**2
	       IF (NORM < RC*RC.AND.NORM>ZERO) THEN
	          ICOUNT=ICOUNT+1
	          IC(J2)=IC(J2)+1
	          RNEIGH(J2,IC(J2),1)=VEC(J1,J2,1)
	          RNEIGH(J2,IC(J2),2)=VEC(J1,J2,2)
	          RNEIGH(J2,IC(J2),3)=VEC(J1,J2,3)
	       
	          RNEIGH(J1,ICOUNT,1)=VEC(J2,J1,1)
	          RNEIGH(J1,ICOUNT,2)=VEC(J2,J1,2)
	          RNEIGH(J1,ICOUNT,3)=VEC(J2,J1,3)
	       
	          NEIGH_TYPE(J1,ICOUNT)=J2
	          NEIGH_TYPE(J2,IC(J2))=J1
	       
	       END IF
            ENDDO
            NDIR(J1)=ICOUNT
         ENDDO

      ENDIF
C
C STORE DENSITY MATRIX: IN THE CASE OF THE PERFECT FCC LATTICE,
C THE INFINITELY EXTENDED CRYSTAL IMPLIES THAT EVERY RHO(J) IS
C EQUAL TO RHO(1).
C
      DO 11 I=1,N
	 
	 RHO_TEMP=0.D0
         VPOT_TEMP=0.D0
	 
	 DO 122 J=1,NDIR(I)
	     
	     JA=NEIGH_TYPE(I,J)
	     
	     RBUF=DSQRT(RNEIGH(I,J,1)**2+RNEIGH(I,J,2)**2+RNEIGH(I,J,3)**2)
	     
	     RHO_TEMP  = RHO_TEMP  +  RHO_POT(IPOT,RBUF)
	     VPOT_TEMP = VPOT_TEMP +  VPOT(IPOT,RBUF)
	     
122      CONTINUE
       RHO(I)=RHO_TEMP
       VT(I)=VPOT_TEMP
!C        WRITE(*,*) I, RHO(I)
11    CONTINUE
C
C CALCULATE THE POTENTIAL ENERGY:
C
      POTA=0.0D0
      POTB=0.0D0
      DO 13 I=1,N
        POTA=POTA+VT(I)
        POTB=POTB - FEMBED(IPOT,RHO(I))
13    CONTINUE
      PSC=POTA - POTB

CDEBUG      WRITE(*,*) POTA, -POTB, PSC
C      STOP
      
      FORCE(:,:)=0.D0
      
      IF (GTEST) THEN
         DO I=1,N
	    FEMBED_D_I=FEMBED_D(IPOT,RHO(I))
	    DO J=1,NDIR(I)
	       JA=NEIGH_TYPE(I,J)
	       RBUF=DSQRT(RNEIGH(I,J,1)**2+RNEIGH(I,J,2)**2+RNEIGH(I,J,3)**2)
   
               FORCE(1,I)= FORCE(1,I)+RNEIGH(I,J,1)*(2*VPOT_D(IPOT,RBUF)+      !&
     1              (FEMBED_D_I+ FEMBED_D(IPOT,RHO(JA)) )*                 !&
     1		     RHO_POT_D(IPOT,RBUF)  ) /RBUF
               FORCE(2,I)= FORCE(2,I)+RNEIGH(I,J,2)*(2*VPOT_D(IPOT,RBUF)+      !&
     1               (FEMBED_D_I+ FEMBED_D(IPOT,RHO(JA)) )*                !&
     1		     RHO_POT_D(IPOT,RBUF)  ) /RBUF
               FORCE(3,I)= FORCE(3,I)+RNEIGH(I,J,3)*(2*VPOT_D(IPOT,RBUF)+      !&
     1               (FEMBED_D_I+ FEMBED_D(IPOT,RHO(JA)) )*                !&
     1		     RHO_POT_D(IPOT,RBUF)  ) /RBUF
            END DO  
	    VNEW(3*(I-1)+1)=-FORCE(1,I)   
	    VNEW(3*(I-1)+2)=-FORCE(2,I)   
	    VNEW(3*(I-1)+3)=-FORCE(3,I) 
	 END DO    
      ENDIF
	  

      RETURN
      END
