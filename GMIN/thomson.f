C   GMIN: A PROGRAM FOR FINDING GLOBAL MINIMA
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF GMIN.
C
C   GMIN IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   GMIN IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C
C  ENERGY AND GRADIENT FOR THOMSON PROBLEM IN THETA, PHI COORDINATES.
C
      SUBROUTINE THOMSON(X,V,ETHOMSON,GTEST)
      USE COMMONS
      IMPLICIT NONE
      LOGICAL GTEST
      INTEGER J1, J2, J3, J4
      DOUBLE PRECISION X(*), DIST, V(*), ETHOMSON, DUMMY, CT1, ST1, CT2, ST2, CPDIFF, SPDIFF
      DOUBLE PRECISION COST(NATOMS), SINT(NATOMS), COSP(NATOMS), SINP(NATOMS)
      DOUBLE PRECISION, PARAMETER :: SR2=1.4142135623730950488D0

      DO J1=1,NATOMS
         J3=2*J1
         COST(J1)=COS(X(J3-1))
         SINT(J1)=SIN(X(J3-1))
         COSP(J1)=COS(X(J3))
         SINP(J1)=SIN(X(J3))
      ENDDO

      ETHOMSON=0.0D0
      VT(1:NATOMS)=0.0D0
      V(1:2*NATOMS)=0.0D0
      DO J1=1,NATOMS
         J3=2*J1
         CT1=COST(J1)
         ST1=SINT(J1)
         DO J2=J1+1,NATOMS
            J4=2*J2
            CT2=COST(J2)
            ST2=SINT(J2)
            CPDIFF=COSP(J1)*COSP(J2)+SINP(J1)*SINP(J2)
            SPDIFF=COSP(J2)*SINP(J1)-SINP(J2)*COSP(J1)
C           DIST=1.0D0/(SR2*SQRT(1.0D0-CT1*CT2-CPDIFF*ST1*ST2))
            DIST=1.0D0/SQRT(1.0D0-CT1*CT2-CPDIFF*ST1*ST2)
            ETHOMSON=ETHOMSON+DIST
            DIST=DIST**3
            DUMMY=SPDIFF*ST1*ST2*DIST
            V(J3-1)=V(J3-1)+(CPDIFF*CT1*ST2-CT2*ST1)*DIST
            V(J3)=V(J3)    -DUMMY
            V(J4-1)=V(J4-1)+(CPDIFF*CT2*ST1-CT1*ST2)*DIST
            V(J4)=V(J4)    +DUMMY
         ENDDO
      ENDDO
      ETHOMSON=ETHOMSON/SR2
      DO J1=1,2*NATOMS
         V(J1)=V(J1)/SR2
      ENDDO

      RETURN
      END
C
C  ENERGY AND GRADIENT FOR THOMSON PROBLEM IN THETA, PHI COORDINATES.
C  IN THIS CASE THERE IS ONE ODD CHARGE WITH MAGNITUDE DIFFERENT FROM UNITY.
C
      SUBROUTINE ODDTHOMSON(X,V,ETHOMSON,GTEST)
      USE COMMONS
      IMPLICIT NONE
      LOGICAL GTEST
      INTEGER J1, J2, J3, J4
      DOUBLE PRECISION X(*), DIST, V(*), ETHOMSON, DUMMY, CT1, ST1, CT2, ST2, CPDIFF, SPDIFF
      DOUBLE PRECISION COST(NATOMS), SINT(NATOMS), COSP(NATOMS), SINP(NATOMS)
      DOUBLE PRECISION, PARAMETER :: SR2=1.4142135623730950488D0

      DO J1=1,NATOMS
         J3=2*J1
         COST(J1)=COS(X(J3-1))
         SINT(J1)=SIN(X(J3-1))
         COSP(J1)=COS(X(J3))
         SINP(J1)=SIN(X(J3))
      ENDDO

      ETHOMSON=0.0D0
      VT(1:NATOMS)=0.0D0
      V(1:2*NATOMS)=0.0D0
C
C  TERMS INVOLVING THE ODD CHARGE.
C
      CT1=COST(1)
      ST1=SINT(1)
      DO J2=2,NATOMS
         J4=2*J2
         CT2=COST(J2)
         ST2=SINT(J2)
         CPDIFF=COSP(1)*COSP(J2)+SINP(1)*SINP(J2)
         SPDIFF=COSP(J2)*SINP(1)-SINP(J2)*COSP(1)
         DIST=1.0D0/SQRT(1.0D0-CT1*CT2-CPDIFF*ST1*ST2)
         ETHOMSON=ETHOMSON+DIST
         DIST=DIST**3
         DIST=DIST*ODDCHARGE ! PUT THE ODD CHARGE INTO THE GRADIENT; ENERGY CORRECTED BELOW
         DUMMY=SPDIFF*ST1*ST2*DIST
         V(1)=V(1)+(CPDIFF*CT1*ST2-CT2*ST1)*DIST
         V(2)=V(2)    -DUMMY
         V(J4-1)=V(J4-1)+(CPDIFF*CT2*ST1-CT1*ST2)*DIST
         V(J4)=V(J4)    +DUMMY
      ENDDO
      ETHOMSON=ETHOMSON*ODDCHARGE

      DO J1=2,NATOMS
         J3=2*J1
         CT1=COST(J1)
         ST1=SINT(J1)
         DO J2=J1+1,NATOMS
            J4=2*J2
            CT2=COST(J2)
            ST2=SINT(J2)
            CPDIFF=COSP(J1)*COSP(J2)+SINP(J1)*SINP(J2)
            SPDIFF=COSP(J2)*SINP(J1)-SINP(J2)*COSP(J1)
            DIST=1.0D0/SQRT(1.0D0-CT1*CT2-CPDIFF*ST1*ST2)
            ETHOMSON=ETHOMSON+DIST
            DIST=DIST**3
            DUMMY=SPDIFF*ST1*ST2*DIST
            V(J3-1)=V(J3-1)+(CPDIFF*CT1*ST2-CT2*ST1)*DIST
            V(J3)=V(J3)    -DUMMY
            V(J4-1)=V(J4-1)+(CPDIFF*CT2*ST1-CT1*ST2)*DIST
            V(J4)=V(J4)    +DUMMY
         ENDDO
      ENDDO
      ETHOMSON=ETHOMSON/SR2
      DO J1=1,2*NATOMS
         V(J1)=V(J1)/SR2
      ENDDO

      RETURN
      END
!
!  SUBROUTINE TO CONVERT CARTESIANS TO THETA, PHI.
!
      SUBROUTINE THOMSONCTOANG(COORDS,P,NATOMS,MYUNIT)
      IMPLICIT NONE
      INTEGER NATOMS, J1, MYUNIT
      DOUBLE PRECISION COORDS(3*NATOMS), P(3*NATOMS), DIST
      DOUBLE PRECISION, PARAMETER :: HALFPI=1.570796327D0

      DO J1=1,NATOMS
         DIST=SQRT(COORDS(3*(J1-1)+1)**2+COORDS(3*(J1-1)+2)**2+COORDS(3*(J1-1)+3)**2)
         COORDS(3*(J1-1)+1)=COORDS(3*(J1-1)+1)/DIST
         COORDS(3*(J1-1)+2)=COORDS(3*(J1-1)+2)/DIST
         COORDS(3*(J1-1)+3)=COORDS(3*(J1-1)+3)/DIST
         P(2*(J1-1)+1)=ACOS(COORDS(3*(J1-1)+3))
         IF (ABS(COORDS(3*(J1-1)+3)-COS(P(2*(J1-1)+1))).GT.1.0D-10) THEN
             WRITE(MYUNIT, '(A)') 'INCONSISTENT CONVERSION FOR Z'
            STOP
         ENDIF
         IF (COORDS(3*(J1-1)+1).EQ.0.0D0) THEN
            IF (COORDS(3*(J1-1)+2).GT.0.0D0) THEN
               P(2*(J1-1)+2)=HALFPI
            ELSE 
               P(2*(J1-1)+2)=-HALFPI
            ENDIF
         ELSE IF (COORDS(3*(J1-1)+2).EQ.0.0D0) THEN
            IF (COORDS(3*(J1-1)+1).GT.0.0D0) THEN
               P(2*(J1-1)+2)=0.0D0
            ELSE 
               P(2*(J1-1)+2)=2*HALFPI
            ENDIF
         ELSE
            P(2*(J1-1)+2)=ATAN(COORDS(3*(J1-1)+2)/COORDS(3*(J1-1)+1))
         ENDIF
         IF (ABS(COORDS(3*(J1-1)+1)-SIN(P(2*(J1-1)+1))*COS(P(2*(J1-1)+2))).GT.1.0D-5) THEN
            P(2*(J1-1)+2)=P(2*(J1-1)+2)+2*HALFPI
            IF (ABS(COORDS(3*(J1-1)+1)-SIN(P(2*(J1-1)+1))*COS(P(2*(J1-1)+2))).GT.1.0D-5) THEN
                WRITE(MYUNIT, '(A)') 'INCONSISTENT CONVERSION FOR X'
               STOP
            ENDIF
         ENDIF
         IF (ABS(COORDS(3*(J1-1)+2)-SIN(P(2*(J1-1)+1))*SIN(P(2*(J1-1)+2))).GT.1.0D-5) THEN
            P(2*(J1-1)+2)=-P(2*(J1-1)+2)
            IF (ABS(COORDS(3*(J1-1)+2)-SIN(P(2*(J1-1)+1))*SIN(P(2*(J1-1)+2))).GT.1.0D-5) THEN
                WRITE(MYUNIT, '(A)') 'INCONSISTENT CONVERSION FOR Y'
                WRITE(MYUNIT, '(A,3G20.10)') 'X,Y,Z:      ',COORDS(3*(J1-1)+1),COORDS(3*(J1-1)+2),COORDS(3*(J1-1)+3)
                WRITE(MYUNIT, '(A,3G20.10)') 'THETA,PHI: ',P(2*(J1-1)+1),P(2*(J1-1)+2)
                WRITE(MYUNIT, '(A,3G20.10)') 'X,Y,Z CALC: ',SIN(P(2*(J1-1)+1))*COS(P(2*(J1-1)+2)),
     &                                            SIN(P(2*(J1-1)+1))*SIN(P(2*(J1-1)+2)),
     &                                            COS(P(2*(J1-1)+1))
               STOP
            ENDIF
         ENDIF
      ENDDO
      RETURN

      END
!
!  SUBROUTINE TO CONVERT THETA, PHI TO CARTESIANS.
!
      SUBROUTINE THOMSONANGTOC(P,NATOMS)
      IMPLICIT NONE
      INTEGER NATOMS, J1
      DOUBLE PRECISION TMPCOORDS(3*NATOMS), P(3*NATOMS)

      TMPCOORDS(1:2*NATOMS)=P(1:2*NATOMS) 
      DO J1=1,NATOMS
         P(3*(J1-1)+1)=SIN(TMPCOORDS(2*(J1-1)+1))*COS(TMPCOORDS(2*(J1-1)+2))
         P(3*(J1-1)+2)=SIN(TMPCOORDS(2*(J1-1)+1))*SIN(TMPCOORDS(2*(J1-1)+2))
         P(3*(J1-1)+3)=COS(TMPCOORDS(2*(J1-1)+1))
      ENDDO

      RETURN
      END

