!OP226>=================================== 
!OP226> GPL LICENSE INFO {{{ 
C   GMIN: A PROGRAM FOR FINDING GLOBAL MINIMA
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF GMIN.
C
C   GMIN IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   GMIN IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
!OP226>}}} 
!OP226>=================================== 
      SUBROUTINE FINALQ
!OP226>=================================== 
!OP226> DECLARATIONS {{{ 
      USE COMMONS
      USE QMODULE
      USE MODCHARMM, ONLY: ACESOLV,NCHENCALLS,ACEUPSTEP
      IMPLICIT NONE


      INTEGER J1, J2, ITERATIONS, BRUN,QDONE, J3
      DOUBLE PRECISION POTEL, SCREENC(3*NATOMS), X(3*NATOMS), ENERGY, GRAD(3*NATOMS), TIME
      DOUBLE PRECISION SAVECSMNORM, DUMMY2, DIST2, RMAT(3,3), AVVAL, CSMGRAD(3), XTEMP(1:3*NATOMS)
      DOUBLE PRECISION DUMMY(3*NATOMS), AA(3)

      COMMON /MYPOT/ POTEL
!OP226> END DECLARATIONS }}} 
!OP226>=================================== 
 
C
C  MAKE SURE THE LOWEST MINIMA ARE TIGHTLY CONVERGED AND THEN SORT
C  THEM JUST TO BE ON THE SAFE SIDE.
C
      CSMGUIDET=.FALSE.
      SHELLMOVES(1:NPAR)=.FALSE.
      IF (CUTT) CUTOFF=FINALCUTOFF
      SAVEQ=.FALSE.
      NQ(1)=0
      IF (FIELDT) FIELDT=.FALSE.
      IF (SEEDT) THEN
         SEEDT=.FALSE.
         NSEED=0
      ENDIF
      IF (SQUEEZET) SQUEEZET=.FALSE.
      MAXIT=MAXIT2
      DO J1=1,NSAVE
         IF (QMIN(J1).LT.1.0D10) THEN
            DO J2=1,3*NATOMS
               COORDS(J2,1)=QMINP(J1,J2)
            ENDDO
            NQ(1)=NQ(1)+1
            IF(CHRMMT.AND.ACESOLV) NCHENCALLS=ACEUPSTEP-1
            CALL QUENCH(.TRUE.,1,ITERATIONS,TIME,BRUN,QDONE,SCREENC)
            WRITE(MYUNIT,'(A,I6,A,F20.10,A,I5,A,F15.7,A,F12.2)') 'FINAL QUENCH ',NQ(1),' ENERGY=',
     1                POTEL,' STEPS=',ITERATIONS,' RMS FORCE=',RMS,' TIME=',TIME-TSTART

            QMIN(J1)=POTEL
            DO J2=1,3*NATOMS
               QMINP(J1,J2)=COORDS(J2,1)
            ENDDO

!OP226> IF (CSMT) THEN {{{ 
            IF (CSMT) THEN
               CSMAV(1:3*NATOMS)=0.0D0
               DO J2=1,CSMGPINDEX
!
! ROTATE PERMUTED IMAGE TO BEST ORIENTATION WITH CSMPMAT
! APPLY POINT GROUP OPERATION J2
! 
                  DO J3=1,NATOMS
                     XTEMP(3*(J3-1)+1)=CSMPMAT(1,1)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+1)
     &                                +CSMPMAT(1,2)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+2)
     &                                +CSMPMAT(1,3)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+3)
                     XTEMP(3*(J3-1)+2)=CSMPMAT(2,1)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+1)
     &                                +CSMPMAT(2,2)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+2)
     &                                +CSMPMAT(2,3)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+3)
                     XTEMP(3*(J3-1)+3)=CSMPMAT(3,1)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+1)
     &                                +CSMPMAT(3,2)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+2)
     &                                +CSMPMAT(3,3)*CSMIMAGES(3*NATOMS*(J2-1)+3*(J3-1)+3)
                  ENDDO
                  CALL CSMROT(XTEMP,DUMMY,1,J2)
                  CSMAV(1:3*NATOMS)=CSMAV(1:3*NATOMS)+DUMMY(1:3*NATOMS)
               ENDDO
               CSMAV(1:3*NATOMS)=CSMAV(1:3*NATOMS)/CSMGPINDEX
!
!  CHECK THE CSM FOR THE AVERAGED STRUCTURE. IT SHOULD BE ZERO IF THIS STRUCTURE HAS THE
!  RIGHT POINT GROUP. NEED TO RESET CSMIMAGES AND CSMNORM TEMPORARILY. 
!  
               IF (PERMDIST) THEN
                  DO J2=1,CSMGPINDEX
                     XTEMP(1:3*NATOMS)=CSMAV(1:3*NATOMS)
                     CALL CSMROT(XTEMP,DUMMY,1,J2)
                     CALL MINPERMDIST(XTEMP,DUMMY,NATOMS,DEBUG,BOXLX,BOXLY,BOXLZ,PERIODIC,TWOD,DUMMY2,DIST2,RIGID,RMAT)
                     CALL CSMROT(DUMMY,XTEMP,-1,J2) ! NEED TO ROTATE THE PERMUTED ROTATED IMAGES BACK TO THE REFERENCE ORIENTATION
                     CSMIMAGES(1+3*NATOMS*(J2-1):3*NATOMS*J2)=XTEMP(1:3*NATOMS)
                  ENDDO
               ELSE
                  DO J2=1,CSMGPINDEX
                     CSMIMAGES(1+3*NATOMS*(J2-1):3*NATOMS*J2)=CSMAV(1:3*NATOMS)
                  ENDDO
               ENDIF
               AA(1)=0.0D0; AA(2)=0.0D0; AA(3)=6.283185307D0 ! SHOULD GIVE AN IDENTITY MATRIX
               SAVECSMNORM=CSMNORM
               CSMNORM=0.0D0
               DO J2=1,NATOMS
                  CSMNORM=CSMNORM+CSMAV(3*(J2-1)+1)**2+CSMAV(3*(J2-1)+2)**2+CSMAV(3*(J2-1)+3)**2
               ENDDO
               CSMNORM=2*CSMGPINDEX*CSMNORM
               CALL CSMPOTGRAD(CSMAV,AA,AVVAL,.TRUE.,CSMGRAD)
               CSMNORM=SAVECSMNORM
               IF (DEBUG) WRITE(MYUNIT,'(A,G20.10)') 'FINALQ> CSM FOR AVERAGED STRUCTURE=',AVVAL
               QMINAV(J1)=AVVAL
               IF (DEBUG) WRITE(MYUNIT,'(A,I6,2G20.10)') 'FINALQ> J1,QMIN,QMINAV=',J1,QMIN(J1),QMINAV(J1)
               QMINPCSMAV(J1,1:3*NATOMS)=CSMAV(1:3*NATOMS)
            ENDIF
!OP226>}}} 
         ENDIF
      ENDDO
C
C       SF344> SOMETIMES WE CAN HAVE A LOWER NUMBER OF MINIMA FOUND THAN NSAVE. RESETTING
C              NSAVE TO THE NUMBER OF MINIMA FOUND SHOULD GET RID OF ENTRIES WITH NULL 
C              COORDINATES IN THE FILE 'LOWEST' (AND OTHER FINAL OUTPUT FILES)
C
C  DJW - THIS MAY NOT WORK BECAUSE WE MAY NOT HAVE FOUND ENOUGH MINIMA CONSIDERED 
C        DIFFERENT ACCORDING TO THE EDIFF CRITERION.
C
      NSAVE=NQ(1)
      CALL GSORT2(NSAVE,NATOMS)
C
C  OPTIONALLY SORT THE ATOMS FROM MOST BOUND TO LEAST BOUND ACCORDING TO VAT. {{{
C
       
      IF (SORTT) THEN
         DO J1=1,NSAVE
            IF (QMIN(J1).LT.0.0D0) THEN
               DO J2=1,3*NATOMS
                  COORDS(J2,1)=QMINP(J1,J2)
                  X(J2)=QMINP(J1,J2)
               ENDDO
               CALL POTENTIAL(X,GRAD,ENERGY,.FALSE.,.FALSE.)
               DO J2=1,NATOMS
                  VAT(J2,1)=VT(J2)
               ENDDO
               CALL SORT3(NATOMS,NATOMS,VAT(1:NATOMS,1),COORDS(1:3*NATOMS,1))
               DO J2=1,3*NATOMS
                  QMINP(J1,J2)=COORDS(J2,1)
               ENDDO
            ENDIF
         ENDDO
      ENDIF

!OP226>}}} 

C     IF (DEBUG) THEN
         IF (TABOOT) THEN
            IF (NPAR.GT.1) THEN
               WRITE(MYUNIT,'(A)') 'TABOO LISTS:'
               DO J1=1,NPAR
                  WRITE(MYUNIT,'(A,G20.10)') 'PARALLEL RUN ',J1
                  WRITE(MYUNIT,'(6F15.7)') (ESAVE(J2,J1),J2=1,NT(J1))
               ENDDO
            ELSE
               WRITE(MYUNIT,'(A)') 'TABOO LIST:'
               WRITE(MYUNIT,'(6F15.7)') (ESAVE(J2,1),J2=1,NT(1))
            ENDIF
         ENDIF
C     ENDIF
      RETURN
      END
