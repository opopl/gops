      SUBROUTINE ADDITIVE_EV(DISTNE,F_CORD,NMRES,E,
     *                  NUMLNG,ILONG,TEMPAV,CRDIXN,
     *                  XDIFF,YDIFF,ZDIFF,CCEV_DIST,PEXCLD)


C     THIS ROUTINE WORKS OUT THE EXCLUDED VOLUME INTERACTION BETWEEN
C     CARBON ATOMS IN THE CASE WHEN IT IS NOT ALREADY INCLUDED IN THE AMH
C     POTENTIAL, IE WHEN WE HAVE NON-ADDITIVE AMH PART, BUT WANT ADDITIVE
C     EXCLUDED VOLUME CONTRIBUTION

      USE AMHGLOBALS,  ONLY: MAXSIZ,MAXTAB,MAXCNT,MAXCRD,IRES


C     ARGUMENT DECLARATIONS

      IMPLICIT NONE

       DOUBLE PRECISION, INTENT(IN):: DISTNE(MAXCNT,MAXTAB),PEXCLD,
     * XDIFF(MAXCNT,MAXTAB),YDIFF(MAXCNT,MAXTAB),
     * ZDIFF(MAXCNT,MAXTAB),CCEV_DIST(MAXCNT,MAXTAB)

       DOUBLE PRECISION, INTENT(OUT):: F_CORD(MAXSIZ,3,MAXCRD),E(:,:)
      INTEGER, INTENT(IN):: NMRES,NUMLNG(0:MAXSIZ,MAXTAB),
     *        ILONG(MAXCNT,2,MAXTAB),CRDIXN(MAXTAB,2)
      LOGICAL, INTENT(IN):: TEMPAV

C     INTERNAL VARIABLES

      INTEGER I_IXN,I_TAB,ISIT1,ISIT2
      DOUBLE PRECISION R_DEV,EV_FORCE,XI

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

!     ZERO FORCE AND ENERGY

      F_CORD=0.0D0
      E=0.0D0
      XI=0.5D0

      DO I_TAB=1,4
      DO I_IXN=1,NUMLNG(NMRES,I_TAB)
        ISIT1=ILONG(I_IXN,1,I_TAB)
        ISIT2=ILONG(I_IXN,2,I_TAB)
        IF (IRES(ISIT1).EQ.8 .AND. (I_TAB.EQ.3.OR. I_TAB.EQ.4) ) CYCLE
        IF (IRES(ISIT2).EQ.8 .AND. (I_TAB.EQ.2.OR. I_TAB.EQ.4) ) CYCLE
        IF( (ISIT2-ISIT1).EQ.1 ) CYCLE
!NO BETA-BETA TERM ON GLYCINES

        R_DEV=CCEV_DIST(I_IXN,I_TAB)-DISTNE(I_IXN,I_TAB)
        E(1,9)=E(1,9)+0.5D0*PEXCLD*(1.0D0+TANH((R_DEV)/XI))
        EV_FORCE=(PEXCLD/(2.0D0*XI))*(COSH((R_DEV)/XI)**(-2))/DISTNE(I_IXN,I_TAB)

          F_CORD(ISIT1,1,CRDIXN(I_TAB,1))=
     *          F_CORD(ISIT1,1,CRDIXN(I_TAB,1)) + EV_FORCE*XDIFF(I_IXN,I_TAB)
          F_CORD(ISIT1,2,CRDIXN(I_TAB,1))=
     *          F_CORD(ISIT1,2,CRDIXN(I_TAB,1)) + EV_FORCE*YDIFF(I_IXN,I_TAB)
          F_CORD(ISIT1,3,CRDIXN(I_TAB,1))=
     *          F_CORD(ISIT1,3,CRDIXN(I_TAB,1)) + EV_FORCE*ZDIFF(I_IXN,I_TAB)

          F_CORD(ISIT2,1,CRDIXN(I_TAB,2))=
     *          F_CORD(ISIT2,1,CRDIXN(I_TAB,2)) - EV_FORCE*XDIFF(I_IXN,I_TAB)
          F_CORD(ISIT2,2,CRDIXN(I_TAB,2))=
     *          F_CORD(ISIT2,2,CRDIXN(I_TAB,2)) - EV_FORCE*YDIFF(I_IXN,I_TAB)
          F_CORD(ISIT2,3,CRDIXN(I_TAB,2))=
     *          F_CORD(ISIT2,3,CRDIXN(I_TAB,2)) - EV_FORCE*ZDIFF(I_IXN,I_TAB)

       ENDDO
      ENDDO

      END
