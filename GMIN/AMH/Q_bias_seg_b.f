      SUBROUTINE Q_BIAS_SEG_B(DISTNE,F_CORD,NMRES,E,
     *                  XDIFF,YDIFF,ZDIFF)

C     CALCULATES THE CONTRIBUTION TO FORCES (IE ZRCORD) DUE TO
C     A POTENTIAL THAT IS POLYNOMIAL IN Q (Q DEPENDS ON CA POSITIONS
C     ONLY, SO IT ONLY GIVES FORCES ON THESE ATOMS, BUT A DIMENSION
C     FOR TABLE NUMBER HAS BEEN INCLUDED IN MANY ARRAYS TO HOPEFULLY
C     ALLOW GENERALIZATION

C FORMAT 1  -  START WITH Q STRUCTURE AND CONSTAIN TO Q WITH POLY_NOMIAL
C FORMAT 2  -  START WITH Q STRUCTURE AND EXPAND QUARTIC POLYNOMIAL
C FORMAT 3  -  START WITH RANDOM STRUCTURE AND EXPAND QUARTIC POLYNOMIAL
 
      USE AMHGLOBALS,  ONLY: MAXSIZ,MAXTAB,MAXCNT,MAXCRD,I_BIAS_NATIVE_B,
     *   DEL_R_B,Q_IJ_B,DQ_DR_IJ_B,QBIASPOLY_B,TARG_DIST,N_QBIAS_B,
     *   I_Q_FORMAT_B,Q0_B,Q_WEIGHT_B,Q_CLIP_B,I_IXN_QBIAS_B,
     *   NUMCONST_B, SEGLIST_B,FOLDSTRT_MIN_B,SS_B,QVALUE_B,
     *   FOLDSTRT_MAX_B,N_DIVS_MAX,SS_DIST,SS_PATTERN_B
C     ARGUMENT DECLARATIONS

      IMPLICIT NONE

       DOUBLE PRECISION, INTENT(IN)::DISTNE(MAXCNT,MAXTAB),
     * XDIFF(MAXCNT,MAXTAB),YDIFF(MAXCNT,MAXTAB),
     * ZDIFF(MAXCNT,MAXTAB)

       DOUBLE PRECISION, INTENT(OUT)::F_CORD(MAXSIZ,3,MAXCRD),E(:,:)
      INTEGER, INTENT(IN):: NMRES

C     INTERNAL VARIABLES

      INTEGER I_IXN,I_DIFF,I_DIST,I_CORD,I_RES,I_TAB,
     *        ISIT1,ISIT2,K,I,J,F
      DOUBLE PRECISION Q,R_DIST,FACTOR,Q_FORCE(MAXSIZ,3,MAXTAB),
     *     V,DV_DQ  

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        F_CORD=0.0D0
        E=0.0D0

C      INITIALIZE Q_FORCE

       DO I_RES=1,NMRES
         DO I_CORD=1,3
           DO I_TAB=1,4
             Q_FORCE(I_RES,I_CORD,I_TAB)=0.0D0
            ENDDO
         ENDDO
       ENDDO
 
C      CALCULATE Q AND 'UNSCALED' CONTRIBUTION TO ZRCORD

        Q=0.0D0
       
       DO 50 I = 1,  NUMCONST_B 
C   THIS CYCLE COMMAND PREVENT GOING OUTSIDE ARRAY BOUNDRIES
            IF (I > NMRES )CYCLE 

             ISIT1=SEGLIST_B(I)

C IDENTIFY THE SECONDARY STRUCTURE UNIT
   
      IF (SS_B)THEN
       F = 0
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(1) .AND. 
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(1)) F = 1
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(2) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(2)) F = 2
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(3) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(3)) F = 3
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(4) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(4)) F = 4
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(5) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(5)) F = 5
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(6) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(6)) F = 6
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(7) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(7)) F = 7
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(8) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(8)) F = 8
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(9) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(9)) F = 9
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(10) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(10)) F = 10
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(11) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(10)) F = 11
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(12) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(12)) F = 12
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(13) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(13)) F = 13
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(14) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(14)) F = 14
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(15) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(15)) F = 15
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(16) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(16)) F = 16
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(17) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(17)) F = 17
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(18) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(18)) F = 18
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(19) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(19)) F = 19
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(20) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(20)) F = 20
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(21) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(21)) F = 21
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(22) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(22)) F = 22
      IF (SEGLIST_B(I) <= FOLDSTRT_MAX_B(23) .AND.
     *                    SEGLIST_B(I) > FOLDSTRT_MIN_B(23)) F = 23
        ENDIF  ! SS_B

      DO 100 J = I+2, NUMCONST_B

       IF ((SS_B) .AND. (SEGLIST_B(J)  >=  FOLDSTRT_MAX_B(F) .OR. 
     *              SEGLIST_B(J)  < FOLDSTRT_MIN_B(F)) )  CYCLE

            ISIT2 = SEGLIST_B(J)
            I_DIFF = ISIT2-ISIT1
            I_IXN = I_IXN_QBIAS_B(ISIT1,ISIT2)

       IF (SS_B) THEN        
        R_DIST=DISTNE(I_IXN,1)-
     *   SS_DIST(SEGLIST_B(I),SEGLIST_B(J),SS_PATTERN_B(F))
      ENDIF

       IF (.NOT. SS_B .AND.  I_BIAS_NATIVE_B) THEN
        R_DIST=DISTNE(I_IXN,1)-TARG_DIST(I_IXN,1)
C         WRITE(6,*)'RDIST DISTNE TARG', 
C     *          R_DIST, DISTNE(I_IXN,1),TARG_DIST(I_IXN,1)
       ENDIF 

       IF (.NOT. SS_B  .AND. .NOT. I_BIAS_NATIVE_B ) THEN
        R_DIST=DISTNE(I_IXN,1)-
     *   SS_DIST(SEGLIST_B(I),SEGLIST_B(J),3)
       ENDIF

        I_DIST=INT(ABS(R_DIST)/DEL_R_B(I_DIFF))+1
        IF (I_DIST.GE.N_DIVS_MAX) GOTO 100

        Q=Q+Q_IJ_B(I_DIST-1,I_DIFF)
     *       +DQ_DR_IJ_B(I_DIST,I_DIFF)*(ABS(R_DIST)!LINEARLY INTERP TO GET Q
     *       -DEL_R_B(I_DIFF)*FLOAT(I_DIST-1) )         

       FACTOR=DQ_DR_IJ_B(I_DIST,I_DIFF)/SIGN(DISTNE(I_IXN,1),R_DIST)

        Q_FORCE(ISIT1,1,1)=Q_FORCE(ISIT1,1,1)
     *                           +FACTOR*XDIFF(I_IXN,1)
        Q_FORCE(ISIT2,1,1)=Q_FORCE(ISIT2,1,1)
     *                           -FACTOR*XDIFF(I_IXN,1)
        Q_FORCE(ISIT1,2,1)=Q_FORCE(ISIT1,2,1)
     *                           +FACTOR*YDIFF(I_IXN,1)
        Q_FORCE(ISIT2,2,1)=Q_FORCE(ISIT2,2,1)
     *                           -FACTOR*YDIFF(I_IXN,1)
        Q_FORCE(ISIT1,3,1)=Q_FORCE(ISIT1,3,1)
     *                           +FACTOR*ZDIFF(I_IXN,1)
        Q_FORCE(ISIT2,3,1)=Q_FORCE(ISIT2,3,1)
     *                           -FACTOR*ZDIFF(I_IXN,1)

100     ENDDO    ! J
50    ENDDO    ! I

C     CALC Q, AND HENCE V(Q) AND DV(Q)/DQ
C        WRITE(6,*)'Q_WEIGHT_B ',Q_WEIGHT_B
C        WRITE(6,*)'N_QBIAS_B ',N_QBIAS_B
C        WRITE(6,*)'I_Q_FORMAT_B ',I_Q_FORMAT_B
C        WRITE(6,*)'Q_CLIP_B ',Q_CLIP_B
C        WRITE(6,*)'Q0_B ',Q0_B
C        WRITE(6,*)'Q ',Q

      QVALUE_B=Q

      V=0.0D0
      DV_DQ=0.0D0
      IF (I_Q_FORMAT_B.EQ.1) THEN
        DO I=1,N_QBIAS_B
          V=V+QBIASPOLY_B(I)*Q**I
          DV_DQ=DV_DQ+FLOAT(I)*QBIASPOLY_B(I)*Q**(I-1)
        ENDDO
      ELSEIF (I_Q_FORMAT_B.EQ.2 .OR.
     *     (I_Q_FORMAT_B.EQ.3.AND.ABS(Q-Q0_B).LE.Q_CLIP_B) ) THEN

        V= Q_WEIGHT_B*(Q)**4  + (-4)*Q_WEIGHT_B*Q0_B*(Q)**3
     * + 6*Q_WEIGHT_B*(Q0_B)**2*(Q)**2 + (-4)*Q_WEIGHT_B*Q0_B**3*(Q)**1

        DV_DQ=DBLE(N_QBIAS_B)*Q_WEIGHT_B*(Q-Q0_B)**(N_QBIAS_B-1)
      ELSEIF (I_Q_FORMAT_B.EQ.3.AND.(Q-Q0_B.GT.Q_CLIP_B)) THEN
        DV_DQ=DBLE(N_QBIAS_B)*Q_WEIGHT_B*(Q_CLIP_B)**(N_QBIAS_B-1)
        V=Q_WEIGHT_B*(Q_CLIP_B)**N_QBIAS_B + DV_DQ*(Q-Q0_B-Q_CLIP_B)
      ELSEIF (I_Q_FORMAT_B.EQ.3.AND.(Q-Q0_B.LT.-Q_CLIP_B)) THEN
        DV_DQ=DBLE(N_QBIAS_B)*Q_WEIGHT_B*(-Q_CLIP_B)**(N_QBIAS_B-1)
        V=Q_WEIGHT_B*(-Q_CLIP_B)**N_QBIAS_B - DV_DQ*(Q0_B-Q-Q_CLIP_B)
      ELSE
       WRITE(6,*) 'I_Q_FORMAT_B WRONG Q_BIAS',I_Q_FORMAT_B
       STOP
      ENDIF

      E(1,18)=E(1,18)+V

C     CALC 'PROPERLY SCALED' CONTRIBUTION TO ZRCORD

       DO K =1, NUMCONST_B
          I_RES  = SEGLIST_B(K)
        DO I_CORD=1,3
          F_CORD(I_RES,I_CORD,1)=F_CORD(I_RES,I_CORD,1)-
     +                               DV_DQ*Q_FORCE(I_RES,I_CORD,1)
        ENDDO
      ENDDO

      RETURN
      END
