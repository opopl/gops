#vim:set ft=make
# Introductory remarks {{{
# 
# Default target gives GMIN
# binaries are now produced in the bin directory!
# 'make chgmin' produces CGMIN
# 'make AMBGMIN' produces AMBGMIN
# 'make clean' removed all object and library files, and any binaries in the bin directory
#
#  DONT FORGET - mpirun
#              - add MPI keyword to data to run with mpirun
#              - change CHARMM library to the appropriate version
#
#  64 bit CGMIN openmpi executable works with BSPT LJ31. 
#  
#  Tried linking to CHARMM compiled with 64 bit openmpi. Reduced optimisation options.
#  BSPT metenk run works fine on one node and more than one node when linked to openmpi charmm build.
#  Also works when linked to 64 bit charmm library compiled with pgf90.
#
#  pgf90 7.1.6 works for 64 bit lam and openmpi
#  pgf90 7.1.6 works for 64 bit openmpi with CHARMM library /home/wales/c31a2-sat39.openmpi.64
#  pgf90 7.1.6 64 bit lam cannot be tested due to a dependency
#
#  openmpi works with ifort on mek-quake:
#  ifort_em64t/10.0.025 mpi/openmpi/64/intel10/1.2.6 icc_em64t/10.0.023
#
#  openmpi fails on clust with module:
#
# ifort/64/10.1/015 icc/64/10.1/015 mpi/openmpi/64/intel10/1.2.6
#
# }}}

# Definitions {{{
ROOT_PATH=$(PWD)/../../
LAPACK_PATH=$(ROOT_PATH)/LAPACK
BLAS_PATH=$(ROOT_PATH)/BLAS
INC_PATH=$(ROOT_PATH)/INCLUDE/
SCRIPTS_PATH=$(ROOT_PATH)/SCRIPTS/
GENFFILES = porfuncs.f90 display_version.f90 mc.f ptmc.f bspt.f main.f 
AMB9SRC = ../../AMBER
SANDERSRC = ../../AMBER/src/sander


GPROG =	../bin/GMIN
CPROG = ../bin/CGMIN
AMHPROG = ../bin/AMHGMIN
AMBPROG = ../bin/AMBGMIN

LDFLAGS = -L.
DEFS =
# CPP = /usr/bin/cpp
CPP = /lib/cpp
CPFLAGS = -traditional -P
L=

# }}}
# Object files {{{

ALLSOURCE := $(wildcard *.f) $(wildcard *.f90) $(wildcard *.F)

## NOTUSEDSOURCE: source files not used in present GMIN build {{{
#NOTUSEDSOURCE=\
#blas.f\
#bmin.f\
#bsptsave.F\
#charmmBildc.f\
#compress2.f\
#dblpy.f90\
#dfuncs.f90\
#dgetf2.f\
#diffract.f90\
#dlaswp.f\
#dtrti2.f\
#dtrtri.f\
#evstep.f \
#fsc1TH.f90\
#funcs.f90\
#io.f90\
#lapack.f\
#lbfgs.f\
#mek-quake.f90\
#mf.f\
#mind.f\
#nonATLASblas.f\
#olami.f \
#otp.f\
#ptbs.f\
#rdpot.f \
#rk45ad.f\
#symmetry3.f90\
#takestep2.f\
#tetherfuncall.f90 \
#wenzel.1D.f\
#wenzel.2D.f\
#wham_djw.f90\
## }}}

# NOTUSEDSOURCE: source files not used in present GMIN build {{{
NOTUSEDSOURCE= io_sanity.f90 molinfo.f90
## }}} 

SOURCE=$(filter-out $(NOTUSEDSOURCE),$(ALLSOURCE))
OBJS := $(patsubst %.F,%.o,$(patsubst %.f,%.o,$(patsubst %.f90,%.o,$(SOURCE))))

# object files from source files generated during compilation
OBJSrt := porfuncs.o display_version.o
OBJS+= $(OBJSrt)

CHDUM = chdummy.o
AMHDUM = amhdummy.o
AMB9DUM = amber9dummy.o
VPATH = .:CHARMM:AMH:.

# }}}

## CHARMM {{{

ifeq ($(L),CHARMM) 

CHDIR = ${ROOT_PATH}/CHARMM31

ifdef MPI 
CHDIR = ${ROOT_PATH}/charmm31.mpi
endif

FCMDIR = ${CHDIR}/source/fcm

CTYPE=C31

CHMAINSRC = charmm_main.src # energy.src

EXTRAS = myblas.o mylapack.o
BLAS_EXCLUDE_LIST = dnrm2.o daxpy.o dcopy.o ddot.o

PREFLX = ${CHDIR}/tool/prefx_gnu
PREFDIR = ${CHDIR}/build/gnu

CHLIBDIR=${CHDIR}/lib/gnu
# Object files in CHARMM directory
CHOBJS = $(wildcard $(CHLIBDIR)/*.o ) 
# Libraries in CHARMM directory
CHLIBS = $(wildcard $(CHLIBDIR)/*.a ) 

endif

### end CHARMM }}}

# COMPILERS AND COMPILER FLAGS  {{{

FC = pgf90
DL=debug 
LIBS = libmyblas.a libmylapack.a libmyblas.a 
SEARCH_PATH =  -I..
#DEFS+=MPI

# pgi {{{
ifeq ($(FC),pgf90)

#FFLAGS= -Mextend -O0 -Munroll -Mnoframe 
FFLAGS= -Mextend -O0 -Mnoframe 
NOOPT = -O0 -Mextend
LDFLAGS= -L.
FREEFORMAT_FLAG= -Mfree
EXTRA_FLAGS=-module
SWITCH=pgi

endif
# }}}
# nagfor {{{

ifeq ($(FC),nagfor)

FFLAGS = -132 -maxcontin=3000 -C -g -kind=byte -mismatch_all

ifeq ($(DL),noopt)
FFLAGS = -132 -maxcontin=3000 -kind=byte -mismatch_all -O0
endif

ifeq ($(DL),opt)
FFLAGS = -132 -maxcontin=3000 -kind=byte -mismatch_all -O3 
endif

ifeq ($(DL),debug)
 FFLAGS = -132 -maxcontin=3000 -C=all -mtrace=all -gline -kind=byte
endif

NOOPT= -O0 -132  -kind=byte
LDFLAGS= -L.
SWITCH=nag

endif
# }}}
#ifort {{{

ifeq ($(FC),ifort) 

# FC = mpif77 
# FC = mpif90  
# DEFS+= -DMPI 
#
#FFLAGS= -132 -C -g -traceback -debug full
 #FFLAGS= -132 -O0 -g -traceback -fpe:0 -check all
 FFLAGS= -132 -g -debug all -check all -implicitnone -warn unused -fp-stack-check -heap-arrays -ftrapuv -check pointers -check bounds
#
#
ifeq ($(DL),debug) 
FFLAGS= -132 -C -g -traceback -debug full
endif

ifeq ($(DL),opt) 
FFLAGS= -132 -O4
endif

NOOPT= -132 -O0
SWITCH=ifort
LDFLAGS= -L.
FREEFORMAT_FLAG= -free
EXTRA_FLAGS=-I

endif

# }}}
# gfortran {{{

ifeq ($(FC),gfortran)

FFLAGS= -ffixed-line-length-132 -g -fbounds-check -Wuninitialized -O -ftrapv -fimplicit-none -fno-automatic

ifeq ($(DL),noopt)
FFLAGS= -ffixed-line-length-265 -O0 
endif

ifeq ($(DL),opt)
FFLAGS= -ffixed-line-length-132 -O3 -ftree-vectorize
endif

ifeq ($(DL),debug)
FFLAGS= -ffixed-line-length-132 -g -fbounds-check -Wuninitialized -O -ftrapv -fimplicit-none -fno-automatic
endif

NOOPT= -O0 -ffixed-line-length-132
SWITCH=gfortran
LDFLAGS = -LBLAS -LLAPACK
FREEFORMAT_FLAG= -ffree-form
EXTRA_FLAGS=-I

endif
# }}}
# }}}
## RULES AND TARGETS {{{

.SUFFIXES:
.SUFFIXES: .o .f .F .f90

.f90.o:
	$(FC) $(FFLAGS) ${SEARCH_PATH} -c $<
.f.o:
	$(FC) $(FFLAGS) ${SEARCH_PATH} -c $<
.F.f:
	$(CPP) $(CPFLAGS) $(DEFS) $< > $@
.F90.f90:
	$(CPP) $(CPFLAGS) $(DEFS) $< > $@


default: $(GPROG)

GMIN: $(GPROG)
gmin: $(GPROG)

CHGMIN: $(CPROG)
chgmin: $(CPROG)

cup:
	rm -rf $(NOTUSEDSOURCE)

#$(GPROG): $(CHDUM) $(AMHDUM) $(AMB9DUM) $(OBJS) $(EXTRAS) 
	#$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ $(EXTRAS) $(OBJS) $(CHDUM) $(AMHDUM) $(AMB9DUM) $(LDFLAGS) $(LIBS)
$(GPROG): $(OBJS) $(EXTRAS) 
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ $(EXTRAS) $(OBJS) $(LDFLAGS) $(LIBS)

$(CPROG): $(OBJS) $(EXTRAS) libcharmm.a 
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ ${CHOBJS} $(EXTRAS) \
	$(OBJS) $(LDFLAGS) $(LIBS) ${CHLIBS}

AMBGMIN: $(AMBPROG) 
ambgmin: $(AMBPROG) 

$(AMBPROG): $(OBJS) $(EXTRAS) $(CHDUM) $(AMHDUM) libamber.a
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ $(OBJS) $(EXTRAS) $(CHDUM) $(AMHDUM) $(LDFLAGS) libamber.a $(LIBS) 

AMHGMIN: $(AMHPROG)
amhgmin: $(AMHPROG)

$(AMHPROG): $(OBJS) $(EXTRAS) $(CHDUM) $(AMB9DUM) libamh.a
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ $(OBJS) $(EXTRAS) $(CHDUM) $(AMB9DUM) $(LDFLAGS) libamh.a $(LIBS) 

#  no agressive optimizations for selected files to cut down on compile time
keyword.o: keyword.f
	${FC} ${NOOPT} ${SEARCH_PATH} -c keyword.f

clean:
	rm -f ${GPROG} ${CPROG} $(AMHPROG) $(AMBPROG) $(OBJS) *.mod $(EXTRAS) *.lst *.o pref.dat prefx.msg nag.f90 FOR021.DAT ${GENFFILES} *.a
	if test -d ../../BLAS ;  then cd ../../BLAS ; make clean ; fi
	if test -d ../../LAPACK ;  then cd ../../LAPACK ; make clean ; fi
	if test -d CHARMMinterface ;  then cd CHARMMinterface ; make -f mchi clean ; fi
	if test -d AMH ;  then cd AMH ; make clean ; fi
	if test -d $(SANDERSRC) ; then cd $(SANDERSRC) ; make clean ; fi

cleanexe:
	rm -f $(CPROG) $(GPROG) $(AMHPROG) $(AMBPROG)

timing:
	rm -f GMIN.2.0
	$(FC) $(FFLAGS) -p $(OBJS) $(EXTRAS) -o $(GPROG) $(LIBS)

feedback:
	$(FC) $(FFLAGS) -xprofile=use:gmin.profile *.f -o $(GPROG)

rebuild:
	make clean
	make

rebuildamh:
	make clean
	make AMHGMIN

libamber.a:
	export SRCDIR=$(CURDIR);cd ${SANDERSRC}; make lib1 FC="${FC}" FFLAGS="${FFLAGS}" \
	FREEFORMAT_FLAG="${FREEFORMAT_FLAG}" EXTRA_FLAGS="${EXTRA_FLAGS}"
libamh.a: SAT-Ghost
	cd AMH; make FC="${FC}" FFLAGS="${FFLAGS} ${SEARCH_PATH}" 
libmyblas.a: SAT-Ghost
	cd ../../BLAS; make double FC="${FC}" FFLAGS="${FFLAGS}" BLAS_EXCLUDE_LIST="${BLAS_EXCLUDE_LIST}";\
	cp libmyblas.a ../GMIN/source/
libmylapack.a: SAT-Ghost
	cd ../../LAPACK; make selection FC="${FC}" FFLAGS="${FFLAGS}" NOOPT="${NOOPT}";\
	cp libmylapack.a ../GMIN/source/
libcharmm.a: SAT-Ghost
	cd CHARMMinterface; make -f mchi FC="${FC}" FFLAGS="${FFLAGS} ${SEARCH_PATH}" PREFLX="${PREFLX}" \
	PREFDIR="${PREFDIR}" \
	CTYPE="${CTYPE}" FCMDIR="${FCMDIR}" C31SRC="${CHDIR}" SRC31="${CHMAINSRC}"
SAT-Ghost:

include $(INC_PATH)/mkf

# }}}
## DEPENDENCIES  {{{
${GPROG}: libmyblas.a libmylapack.a
${CPROG}: libmyblas.a libmylapack.a libcharmm.a
${AMHPROG}: commons.o libmyblas.a libmylapack.a libamh.a
${AMBPROG}: libmyblas.a libmylapack.a libamber.a porfuncs.o
libcharmm.a: commons.o modcharmm.o modmxatms.o
libamber.a: commons.o modamber9.o porfuncs.o grouprotation.o

Alglue.o:      commons.o
BLJcluster.o:  commons.o
EAMLJ_sub.o:   commons.o
EAMal.o:       commons.o
Gupta.o:       commons.o
MSorig.o:      commons.o modconsts.o dist.o
MSorigc.o:     commons.o modconsts.o dist.o
MStrans.97.o:  commons.o modconsts_trans_97.o dist.o
Mgglue.o:      commons.o
PachecoC60.o:  commons.o
ptbs.o: commons.o tetherfunc.o 
Pbglue.o:      commons.o
SW.o:          commons.o
SiSW.o:        commons.o
Zetterling.o:  commons.o
amber.o:       commons.o modamb.o
capsid.o:      commons.o
centre.o:      commons.o
centrecom.o:      commons.o
cgmin.o:       commons.o
checkd.o:      commons.o
compress.o:    commons.o
countatoms.o:  modamber9.o
display_version.o: ../../SCRIPTS/all/display_version.sh
dbpg.o:        commons.o
dbptd.o:       commons.o
dmblmorse.o:   commons.o
ddfpmin.o:     commons.o
dftb.o:        commons.o
dzugutov.o:    commons.o
evstep.o:      commons.o
f1dim.o:       commons.o modf1com.o
fd.o:          commons.o
fdm.o:         commons.o
finalio.o:     commons.o modamb.o qmod.o modcharmm.o AMH/amhglobals.o pymodule.o
finalq.o:      commons.o qmod.o
frausi.o:      dist.o
gbcalamitic.o: commons.o
gbdiscotic.o:  commons.o
gbddp.o:       commons.o
gem.o:         commons.o
grnd.o:        commons.o
hmat1n.o:      commons.o
hmatd_.o:      commons.o
hsmove.o:      commons.o
io1.o:         commons.o modamb.o modperm.o qmod.o modcharmm.o porfuncs.o
keyword.o:     commons.o modamb.o modcharmm.o porfuncs.o
linmin.o:      commons.o modf1com.o
linrod.o:      commons.o
ljcoulomb.o:   commons.o
lj.o:          commons.o
ljpbin.o:      commons.o
ljpshift.o:    commons.o
lwotp.o:       commons.o
newpah.o:      commons.o
main.o:        commons.o modf1com.o countatoms.o modperm.o qmod.o modamb.o modmxatms.o porfuncs.o 
mcruns.o:      commons.o
mf.o:          commons.o
mnbrak.o:      commons.o
commons.o:     countatoms.o modmxatms.o
dummyoptim.o:  commons.o
morse.o:       commons.o
mylbfgs.o:     commons.o modamb.o porfuncs.o
mstbin.o:      commons.o
multstock.o:   commons.o
newtip.o:      commons.o
odesd.o:       commons.o mododesd.o
olami.o:       commons.o
otp.o:         commons.o
BLN.o:         commons.o
pah.o:         commons.o
multpaha.o:    commons.o qmod.o
pahw99.o:      commons.o
paha.o:        commons.o
potential.o:   commons.o modperm.o qmod.o modcharmm.o porfuncs.o
ptgrp.o:       commons.o
pyg.o:         commons.o
pygdp.o:       commons.o
quench.o:      commons.o qmod.o porfuncs.o
rad.o:         commons.o
rdpot.o:       commons.o
saveit.o:      commons.o qmod.o
sc.o:          commons.o
seed.o:        commons.o
stockaa.o:     commons.o
strand.o:      commons.o
supermc.o:     commons.o
symmetry.o:    commons.o porfuncs.o
symmetrycsm.o:    commons.o porfuncs.o
taboo.o:       commons.o
takestep.o:    commons.o
takestep2.o:   commons.o
tetrahedra.o:  commons.o
g46merdiff.o: modhess.o
tip.o:         commons.o
tosifumi.o:    commons.o
welch.o:       commons.o
waterpdc.o:    commons.o
waterpkz.o:    commons.o
zwischen.o:    commons.o modf1com.o 
stock.o:       commons.o
sticky.o:      commons.o
tether.o:      tetherfunc.o
mycpu_time.o:  commons.o
gauss.o:       commons.o
mc.o:          qmod.o modcharmm.o porfuncs.o mc.f mc.F AMH/amhglobals.o AMH/amh_interfaces.o AMH/E_write.o commons.o operations.o
bspt.f: bspt.F
main.f: main.F
mc.f: mc.F
ptmc.f: ptmc.F
ptmc.o:          qmod.o modcharmm.o porfuncs.o
bspt.o:          tetherfunc.o commons.o modcharmm.o
GMINdump.o: commons.o qmod.o porfuncs.o
quad.o:        commons.o
enumerate.o:  commons.o
convert.o:  porfuncs.o
getorbits.o: commons.o
mysd.o: commons.o
qdtest.o: commons.o
MB.o: commons.o 
sort2.o: qmod.o commons.o
model1.o: commons.o
FS.o: commons.o
Ackland_wrapper.o: commons.o
DF1.o: commons.o
CSMinit.o: commons.o
minpermdist.o: commons.o porfuncs.o
grouprotation.o: commons.o

# op226 
read_cmd_args.o: porfuncs.o display_version.o commons.o

# }}}
