C   GMIN: A PROGRAM FOR FINDING GLOBAL MINIMA
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF GMIN.
C
C   GMIN IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   GMIN IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
      SUBROUTINE EAMAL(X, V, EEAM, GTEST)
      USE COMMONS
      IMPLICIT NONE
      DOUBLE PRECISION RCUT
      LOGICAL GTEST
      INTEGER J1, J2, J3, J4, I, K,  NRNEW
C     PARAMETER (RCUT=6.0)
      PARAMETER (RCUT=12.0)
      DOUBLE PRECISION X(3*NATOMS), DIST(NATOMS, NATOMS), DF(NATOMS),
     *RNEW(NATOMS-1), V(3*NATOMS), G(NATOMS,NATOMS)
      DOUBLE PRECISION DISTI, EEAM, U, DU,D2U, PHI,DPHI,D2PHI,D2F 
      DOUBLE PRECISION DUMMYX, DUMMYY, DUMMYZ, XMUL2, DUMMY
      DOUBLE PRECISION PHINEW(NATOMS),RHOI(NATOMS),UNEW(NATOMS),FI(NATOMS),
     *UI(NATOMS)
      LOGICAL EVAP, EVAPREJECT
      COMMON /EV/ EVAP, EVAPREJECT
      EVAP=.FALSE.
      EEAM=0.0D0
      DO 11 J1=1,NATOMS 
        VT(J1)=0.0D0
        RHOI(J1)=0.0
        UI(J1)=0.0
11    CONTINUE

      IF (GTEST) THEN
       DO 1 J1=1,NATOMS
         J3=3*J1
         DISTI=X(J3-2)**2+X(J3-1)**2+X(J3)**2
C        IF (DISTI.GT.RADIUS) THEN
C            EVAP=.TRUE.
C            EEAM=EEAM+(DISTI-RADIUS)**2
C        ENDIF
         G(J1,J1)=0.0D0
         DO 2 J2=J1+1,NATOMS
              J4=3*J2
              DIST(J1, J2)=DSQRT((X(J3-2)-X(J4-2))**2+(X(J3-1)-X(J4-1))**2+(X(J3)-X(J4))**2)
              DIST(J2, J1)=DIST(J1, J2)
2        CONTINUE
1       CONTINUE

      DO 10 J1=1, NATOMS
           I=1
         DO 14 J2=1, NATOMS
            IF((J2.NE.J1).AND.(DIST(J1,J2).LE.RCUT)) THEN
                   RNEW(I)=DIST(J1, J2)
                   CALL V21(RNEW(I),UNEW(I),DU,D2U)
                   CALL RH1(RNEW(I), PHINEW(I),DPHI,D2PHI)
                  I=I+1
              ENDIF
             NRNEW=I-1
14        CONTINUE

       DO 6 K=1, NRNEW
          RHOI(J1)=RHOI(J1)+PHINEW(K)
          UI(J1)=UI(J1)+UNEW(K)

6       CONTINUE
10     CONTINUE

       DO 40 I=1, NATOMS
           CALL UU1(RHOI(I),FI(I),DF(I),D2F)
40      CONTINUE

        DO 12 J1=1, NATOMS 
              VT(J1)=UI(J1)+FI(J1)
              DUMMY=0.5*UI(J1)+FI(J1)
              EEAM=EEAM+DUMMY              
         DO 13 J2=J1+1, NATOMS
             IF (DIST(J1, J2).LE. RCUT) THEN
              CALL V21(DIST(J1, J2),U,DU,D2U)
              CALL RH1(DIST(J1, J2), PHI,DPHI,D2PHI)
              G(J2,J1)=(DF(J1)*DPHI+DF(J2)*DPHI+DU)/DIST(J1, J2)
              ENDIF
            G(J1,J2)=G(J2,J1)
13        CONTINUE
12       CONTINUE   

      ELSE
       DO 50 J1=1,NATOMS
            J3=3*J1
            DISTI=X(J3-2)**2+X(J3-1)**2+X(J3)**2
C           IF (DISTI.GT.RADIUS) THEN
C               EVAP=.TRUE.
C               EEAM=EEAM+(DISTI-RADIUS)**2 
C           ENDIF
            G(J1,J1)=0.0D0
            DO 52 J2=J1+1,NATOMS
               J4=3*J2
               DIST(J1, J2)=DSQRT((X(J3-2)-X(J4-2))**2+(X(J3-1)-X(J4-1))**2+(X(J3)-X(J4))**2)
               DIST(J2, J1)=DIST(J1, J2)
52       CONTINUE
50      CONTINUE

      DO 60 J1=1, NATOMS
              I=1
       DO 54 J2=1, NATOMS
             IF ((J2.NE.J1).AND.(DIST(J1,J2).LE.RCUT)) THEN
                   RNEW(I)=DIST(J1, J2)
                   CALL V21(RNEW(I),UNEW(I),DU,D2U)
                   CALL RH1(RNEW(I), PHINEW(I),DPHI,D2PHI)
                   I=I+1
               ENDIF
             NRNEW=I-1 
54     CONTINUE

       DO 56 K=1, NRNEW
             RHOI(J1)=RHOI(J1)+PHINEW(K)
             UI(J1)=UI(J1)+UNEW(K)
56     CONTINUE
60    CONTINUE

      DO 64 I=1, NATOMS
        CALL UU1(RHOI(I),FI(I),DF(I),D2F)
64    CONTINUE

       DO 53 J1=1, NATOMS 
        VT(J1)=UI(J1)+FI(J1)
        DUMMY=0.5*UI(J1)+FI(J1)
        EEAM=EEAM+DUMMY 
53     CONTINUE
      ENDIF

      IF (.NOT.GTEST) RETURN
         DO 21 J1=1,NATOMS
           J3=3*J1
          IF (SEEDT.AND.(J1.GT.NATOMS-NSEED)) THEN
          V(J3-2)=0.0D0
          V(J3-1)=0.0D0
          V(J3)=0.0D0
          ELSE
          DUMMYX=0.0D0
          DUMMYY=0.0D0
          DUMMYZ=0.0D0
          DO 22 J4=1,NATOMS
              J2=3*J4
              XMUL2=G(J4,J1)
              DUMMYX=DUMMYX+XMUL2*(X(J3-2)-X(J2-2))
              DUMMYY=DUMMYY+XMUL2*(X(J3-1)-X(J2-1))
              DUMMYZ=DUMMYZ+XMUL2*(X(J3)  -X(J2))
22         CONTINUE
          DISTI=X(J3-2)**2+X(J3-1)**2+X(J3)**2
C         IF (DISTI.GT.RADIUS) THEN
C           DUMMYX=DUMMYX+4.0D0*(DISTI-RADIUS)*X(J3-2)
C           DUMMYY=DUMMYY+4.0D0*(DISTI-RADIUS)*X(J3-1)
C           DUMMYZ=DUMMYZ+4.0D0*(DISTI-RADIUS)*X(J3)
C         ENDIF
           V(J3-2)=DUMMYX
           V(J3-1)=DUMMYY
           V(J3)=DUMMYZ
        ENDIF
21      CONTINUE
       RETURN
       END


*     ERCOLESSI-ADAMS GLUE POTENTIAL FOR AL.
*     REF.: F. ERCOLESSI AND J. B. ADAMS, EUROPHYS. LETT. 26, 583 (1994).
*     POTENTIAL HOME PAGE: HTTP://WWW.SISSA.IT/FURIO/POTENTIALS/AL/

      SUBROUTINE V21(ARG,FUNC,DFUNC,D2FUNC)
*        ALUMINUM  : PAIR POTENTIAL   AND ITS FIRST TWO DERIVATIVES.
*        GENERATED AUTOMATICALLY BY POCO, VERSION 04-MAY-93           
*        HAMILTONIAN TYPE #  2, RUN ON 93/06/09 AT 15.04.43
*        USES SUBROUTINE SEVAL FROM NETLIB@ORNL.GOV [TO GET IT,
*        USE 'SEND SEVAL FROM SFMM'], TRIVIALLY MODIFIED TO
*        COMPUTE ALSO DFUNC AND D2FUNC AND USE DOUBLE PRECISION.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (NV2= 17)
      PARAMETER (ARGMAX=   .555805441821810D+01)
      DOUBLE PRECISION XV2(NV2),YV2(NV2),BV2(NV2),CV2(NV2),DV2(NV2)
      SAVE XV2,YV2,BV2,CV2,DV2
      DATA XV2(  1) /   .202111069753385D+01 /
      DATA XV2(  2) /   .227374953472558D+01 /
      DATA XV2(  3) /   .252638837191732D+01 /
      DATA XV2(  4) /   .277902720910905D+01 /
      DATA XV2(  5) /   .303166604630078D+01 /
      DATA XV2(  6) /   .328430488349251D+01 /
      DATA XV2(  7) /   .353694372068424D+01 /
      DATA XV2(  8) /   .378958255787597D+01 /
      DATA XV2(  9) /   .404222139506771D+01 /
      DATA XV2( 10) /   .429486023225944D+01 /
      DATA XV2( 11) /   .454749906945117D+01 /
      DATA XV2( 12) /   .480013790664290D+01 /
      DATA XV2( 13) /   .505277674383463D+01 /
      DATA XV2( 14) /   .530541558102636D+01 /
      DATA XV2( 15) /   .555805441821810D+01 /
      DATA XV2( 16) /   .555807968210182D+01 /
      DATA XV2( 17) /   .555810494598553D+01 /
      DATA YV2(  1) /   .196016472197158D+01 /
      DATA YV2(  2) /   .682724240745344D+00 /
      DATA YV2(  3) /   .147370824539188D+00 /
      DATA YV2(  4) /  -.188188235860390D-01 /
      DATA YV2(  5) /  -.576011902692490D-01 /
      DATA YV2(  6) /  -.519846499644276D-01 /
      DATA YV2(  7) /  -.376352484845919D-01 /
      DATA YV2(  8) /  -.373737879689433D-01 /
      DATA YV2(  9) /  -.531351030124350D-01 /
      DATA YV2( 10) /  -.632864983555742D-01 /
      DATA YV2( 11) /  -.548103623840369D-01 /
      DATA YV2( 12) /  -.372889232343935D-01 /
      DATA YV2( 13) /  -.188876517630154D-01 /
      DATA YV2( 14) /  -.585239362533525D-02 /
      DATA YV2( 15) /   .000000000000000D+00 /
      DATA YV2( 16) /   .000000000000000D+00 /
      DATA YV2( 17) /   .000000000000000D+00 /
      DATA BV2(  1) /  -.702739315585347D+01 /
      DATA BV2(  2) /  -.333140549270729D+01 /
      DATA BV2(  3) /  -.117329394261502D+01 /
      DATA BV2(  4) /  -.306003283486901D+00 /
      DATA BV2(  5) /  -.366656699104026D-01 /
      DATA BV2(  6) /   .588330899204400D-01 /
      DATA BV2(  7) /   .384220572312032D-01 /
      DATA BV2(  8) /  -.390223173707191D-01 /
      DATA BV2(  9) /  -.663882722510521D-01 /
      DATA BV2( 10) /  -.312918894386669D-02 /
      DATA BV2( 11) /   .590118945294245D-01 /
      DATA BV2( 12) /   .757939459148246D-01 /
      DATA BV2( 13) /   .643822548468606D-01 /
      DATA BV2( 14) /   .399750987463792D-01 /
      DATA BV2( 15) /   .177103852679117D-05 /
      DATA BV2( 16) /  -.590423369301474D-06 /
      DATA BV2( 17) /   .590654950414731D-06 /
      DATA CV2(  1) /   .877545959718548D+01 /
      DATA CV2(  2) /   .585407125495837D+01 /
      DATA CV2(  3) /   .268820820643116D+01 /
      DATA CV2(  4) /   .744718689404422D+00 /
      DATA CV2(  5) /   .321378734769888D+00 /
      DATA CV2(  6) /   .566263292669091D-01 /
      DATA CV2(  7) /  -.137417679148505D+00 /
      DATA CV2(  8) /  -.169124163201523D+00 /
      DATA CV2(  9) /   .608037039066423D-01 /
      DATA CV2( 10) /   .189589640245655D+00 /
      DATA CV2( 11) /   .563784150384640D-01 /
      DATA CV2( 12) /   .100486298765028D-01 /
      DATA CV2( 13) /  -.552186092621482D-01 /
      DATA CV2( 14) /  -.413902746758285D-01 /
      DATA CV2( 15) /  -.116832934994489D+00 /
      DATA CV2( 16) /   .233610871054729D-01 /
      DATA CV2( 17) /   .233885865725971D-01 /
      DATA DV2(  1) /  -.385449887634130D+01 /
      DATA DV2(  2) /  -.417706040200591D+01 /
      DATA DV2(  3) /  -.256425277368288D+01 /
      DATA DV2(  4) /  -.558557503589276D+00 /
      DATA DV2(  5) /  -.349316054551627D+00 /
      DATA DV2(  6) /  -.256022933201611D+00 /
      DATA DV2(  7) /  -.418337423301704D-01 /
      DATA DV2(  8) /   .303368330939646D+00 /
      DATA DV2(  9) /   .169921006301015D+00 /
      DATA DV2( 10) /  -.175759761362548D+00 /
      DATA DV2( 11) /  -.611278214082881D-01 /
      DATA DV2( 12) /  -.861140219824535D-01 /
      DATA DV2( 13) /   .182451950513387D-01 /
      DATA DV2( 14) /  -.995395392057973D-01 /
      DATA DV2( 15) /   .184972909229936D+04 /
      DATA DV2( 16) /   .362829766922787D+00 /
      DATA DV2( 17) /   .362829766922787D+00 /
      IF (ARG.GE.ARGMAX) THEN
         FUNC =   .000000000000000D+00
         DFUNC  = 0.D0
         D2FUNC = 0.D0
      ELSE
         CALL SEVAL1(NV2,ARG,XV2,YV2,BV2,CV2,DV2,FUNC,DFUNC,D2FUNC)
      ENDIF
      END

      SUBROUTINE RH1(ARG,FUNC,DFUNC,D2FUNC)
*        ALUMINUM  : ATOMIC DENSITY   AND ITS FIRST TWO DERIVATIVES.
*        GENERATED AUTOMATICALLY BY POCO, VERSION 04-MAY-93           
*        HAMILTONIAN TYPE #  2, RUN ON 93/06/09 AT 15.04.43
*        USES SUBROUTINE SEVAL FROM NETLIB@ORNL.GOV [TO GET IT,
*        USE 'SEND SEVAL FROM SFMM'], TRIVIALLY MODIFIED TO
*        COMPUTE ALSO DFUNC AND D2FUNC AND USE DOUBLE PRECISION.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (NRH= 17)
      PARAMETER (ARGMAX=   .555805441821810D+01)
      DOUBLE PRECISION XRH(NRH),YRH(NRH),BRH(NRH),CRH(NRH),DRH(NRH)
      SAVE XRH,YRH,BRH,CRH,DRH
      DATA XRH(  1) /   .202111069753385D+01 /
      DATA XRH(  2) /   .227374953472558D+01 /
      DATA XRH(  3) /   .252638837191732D+01 /
      DATA XRH(  4) /   .277902720910905D+01 /
      DATA XRH(  5) /   .303166604630078D+01 /
      DATA XRH(  6) /   .328430488349251D+01 /
      DATA XRH(  7) /   .353694372068424D+01 /
      DATA XRH(  8) /   .378958255787597D+01 /
      DATA XRH(  9) /   .404222139506771D+01 /
      DATA XRH( 10) /   .429486023225944D+01 /
      DATA XRH( 11) /   .454749906945117D+01 /
      DATA XRH( 12) /   .480013790664290D+01 /
      DATA XRH( 13) /   .505277674383463D+01 /
      DATA XRH( 14) /   .530541558102636D+01 /
      DATA XRH( 15) /   .555805441821810D+01 /
      DATA XRH( 16) /   .555807968210182D+01 /
      DATA XRH( 17) /   .555810494598553D+01 /
      DATA YRH(  1) /   .865674623712589D-01 /
      DATA YRH(  2) /   .925214702944478D-01 /
      DATA YRH(  3) /   .862003123832002D-01 /
      DATA YRH(  4) /   .762736292751052D-01 /
      DATA YRH(  5) /   .606481841271735D-01 /
      DATA YRH(  6) /   .466030959588197D-01 /
      DATA YRH(  7) /   .338740138848363D-01 /
      DATA YRH(  8) /   .232572661705343D-01 /
      DATA YRH(  9) /   .109046405489829D-01 /
      DATA YRH( 10) /   .524910605677597D-02 /
      DATA YRH( 11) /   .391702419142291D-02 /
      DATA YRH( 12) /   .308277776293383D-02 /
      DATA YRH( 13) /   .250214745349505D-02 /
      DATA YRH( 14) /   .147220513798186D-02 /
      DATA YRH( 15) /   .000000000000000D+00 /
      DATA YRH( 16) /   .000000000000000D+00 /
      DATA YRH( 17) /   .000000000000000D+00 /
      DATA BRH(  1) /   .608555214104682D-01 /
      DATA BRH(  2) /  -.800158928716306D-02 /
      DATA BRH(  3) /  -.332089451111092D-01 /
      DATA BRH(  4) /  -.521001991705069D-01 /
      DATA BRH(  5) /  -.618130637429111D-01 /
      DATA BRH(  6) /  -.529750064268036D-01 /
      DATA BRH(  7) /  -.442210477548108D-01 /
      DATA BRH(  8) /  -.473645664984640D-01 /
      DATA BRH(  9) /  -.390741582571631D-01 /
      DATA BRH( 10) /  -.101795580610560D-01 /
      DATA BRH( 11) /  -.318316981110289D-02 /
      DATA BRH( 12) /  -.281217210746153D-02 /
      DATA BRH( 13) /  -.236932031483360D-02 /
      DATA BRH( 14) /  -.683554708271547D-02 /
      DATA BRH( 15) /  -.638718204858808D-06 /
      DATA BRH( 16) /   .212925486831149D-06 /
      DATA BRH( 17) /  -.212983742465787D-06 /
      DATA CRH(  1) /  -.170233687052940D+00 /
      DATA CRH(  2) /  -.102317878901959D+00 /
      DATA CRH(  3) /   .254162872544396D-02 /
      DATA CRH(  4) /  -.773173610292656D-01 /
      DATA CRH(  5) /   .388717099948882D-01 /
      DATA CRH(  6) /  -.388873819867093D-02 /
      DATA CRH(  7) /   .385388290924526D-01 /
      DATA CRH(  8) /  -.509815666327127D-01 /
      DATA CRH(  9) /   .837968231208082D-01 /
      DATA CRH( 10) /   .305743500420042D-01 /
      DATA CRH( 11) /  -.288110886134041D-02 /
      DATA CRH( 12) /   .434959924771674D-02 /
      DATA CRH( 13) /  -.259669459714693D-02 /
      DATA CRH( 14) /  -.150816117849093D-01 /
      DATA CRH( 15) /   .421356801161513D-01 /
      DATA CRH( 16) /  -.842575249165724D-02 /
      DATA CRH( 17) /  -.843267014952237D-02 /
      DATA DRH(  1) /   .896085612514625D-01 /
      DATA DRH(  2) /   .138352319847830D+00 /
      DATA DRH(  3) /  -.105366473134009D+00 /
      DATA DRH(  4) /   .153300619856764D+00 /
      DATA DRH(  5) /  -.564184148788224D-01 /
      DATA DRH(  6) /   .559792096400504D-01 /
      DATA DRH(  7) /  -.118113795329664D+00 /
      DATA DRH(  8) /   .177827488509794D+00 /
      DATA DRH(  9) /  -.702220789044304D-01 /
      DATA DRH( 10) /  -.441413511810337D-01 /
      DATA DRH( 11) /   .954024354744484D-02 /
      DATA DRH( 12) /  -.916498550800407D-02 /
      DATA DRH( 13) /  -.164726813535368D-01 /
      DATA DRH( 14) /   .754928689733184D-01 /
      DATA DRH( 15) /  -.667110847110954D+03 /
      DATA DRH( 16) /  -.912720300911022D-01 /
      DATA DRH( 17) /  -.912720300911022D-01 /
      IF (ARG.GE.ARGMAX) THEN
         FUNC =   .000000000000000D+00
         DFUNC  = 0.D0
         D2FUNC = 0.D0
      ELSE
         CALL SEVAL1(NRH,ARG,XRH,YRH,BRH,CRH,DRH,FUNC,DFUNC,D2FUNC)
      ENDIF
      END

      SUBROUTINE UU1(ARG,FUNC,DFUNC,D2FUNC)
*        ALUMINUM  : GLUE FUNCTION    AND ITS FIRST TWO DERIVATIVES.
*        GENERATED AUTOMATICALLY BY POCO, VERSION 04-MAY-93           
*        HAMILTONIAN TYPE #  2, RUN ON 93/06/09 AT 15.04.43
*        USES SUBROUTINE SEVAL FROM NETLIB@ORNL.GOV [TO GET IT,
*        USE 'SEND SEVAL FROM SFMM'], TRIVIALLY MODIFIED TO
*        COMPUTE ALSO DFUNC AND D2FUNC AND USE DOUBLE PRECISION.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (NUU= 13)
      PARAMETER (ARGMIN=   .000000000000000D+00)
      DOUBLE PRECISION XUU(NUU),YUU(NUU),BUU(NUU),CUU(NUU),DUU(NUU)
      SAVE XUU,YUU,BUU,CUU,DUU
      DATA XUU(  1) /   .000000000000000D+00 /
      DATA XUU(  2) /   .100000000000000D+00 /
      DATA XUU(  3) /   .200000000000000D+00 /
      DATA XUU(  4) /   .300000000000000D+00 /
      DATA XUU(  5) /   .400000000000000D+00 /
      DATA XUU(  6) /   .500000000000000D+00 /
      DATA XUU(  7) /   .600000000000000D+00 /
      DATA XUU(  8) /   .700000000000000D+00 /
      DATA XUU(  9) /   .800000000000000D+00 /
      DATA XUU( 10) /   .900000000000000D+00 /
      DATA XUU( 11) /   .100000000000000D+01 /
      DATA XUU( 12) /   .110000000000000D+01 /
      DATA XUU( 13) /   .120000000000000D+01 /
      DATA YUU(  1) /   .000000000000000D+00 /
      DATA YUU(  2) /  -.113953324143752D+01 /
      DATA YUU(  3) /  -.145709859805864D+01 /
      DATA YUU(  4) /  -.174913308002738D+01 /
      DATA YUU(  5) /  -.202960322136630D+01 /
      DATA YUU(  6) /  -.225202324967546D+01 /
      DATA YUU(  7) /  -.242723053979436D+01 /
      DATA YUU(  8) /  -.255171976467357D+01 /
      DATA YUU(  9) /  -.260521638832322D+01 /
      DATA YUU( 10) /  -.264397894381693D+01 /
      DATA YUU( 11) /  -.265707884842034D+01 /
      DATA YUU( 12) /  -.264564149400021D+01 /
      DATA YUU( 13) /  -.260870604452106D+01 /
      DATA BUU(  1) /  -.183757286015853D+02 /
      DATA BUU(  2) /  -.574233124410516D+01 /
      DATA BUU(  3) /  -.236790436375322D+01 /
      DATA BUU(  4) /  -.307404645857774D+01 /
      DATA BUU(  5) /  -.251104850116555D+01 /
      DATA BUU(  6) /  -.196846462620234D+01 /
      DATA BUU(  7) /  -.154391254686695D+01 /
      DATA BUU(  8) /  -.846780636273251D+00 /
      DATA BUU(  9) /  -.408540363905760D+00 /
      DATA BUU( 10) /  -.286833282404628D+00 /
      DATA BUU( 11) /  -.309389414590161D-06 /
      DATA BUU( 12) /   .236958014464143D+00 /
      DATA BUU( 13) /   .503352368511243D+00 /
      DATA CUU(  1) /   .830779120415016D+02 /
      DATA CUU(  2) /   .432560615333001D+02 /
      DATA CUU(  3) /  -.951179272978074D+01 /
      DATA CUU(  4) /   .245037178153561D+01 /
      DATA CUU(  5) /   .317960779258630D+01 /
      DATA CUU(  6) /   .224623095704576D+01 /
      DATA CUU(  7) /   .199928983630817D+01 /
      DATA CUU(  8) /   .497202926962879D+01 /
      DATA CUU(  9) /  -.589626545953876D+00 /
      DATA CUU( 10) /   .180669736096520D+01 /
      DATA CUU( 11) /   .106163236918694D+01 /
      DATA CUU( 12) /   .130795086934864D+01 /
      DATA CUU( 13) /   .135599267112235D+01 /
      DATA DUU(  1) /  -.132739501694005D+03 /
      DATA DUU(  2) /  -.175892847543603D+03 /
      DATA DUU(  3) /   .398738817043878D+02 /
      DATA DUU(  4) /   .243078670350231D+01 /
      DATA DUU(  5) /  -.311125611846847D+01 /
      DATA DUU(  6) /  -.823137069125319D+00 /
      DATA DUU(  7) /   .990913144440207D+01 /
      DATA DUU(  8) /  -.185388527186089D+02 /
      DATA DUU(  9) /   .798774635639692D+01 /
      DATA DUU( 10) /  -.248354997259420D+01 /
      DATA DUU( 11) /   .821061667205675D+00 /
      DATA DUU( 12) /   .160139339245701D+00 /
      DATA DUU( 13) /   .160139339245701D+00 /
      IF (ARG.LE.ARGMIN) THEN
         FUNC =   .000000000000000D+00
         DFUNC  = 0.D0
         D2FUNC = 0.D0
      ELSE
         CALL SEVAL1(NUU,ARG,XUU,YUU,BUU,CUU,DUU,FUNC,DFUNC,D2FUNC)
      ENDIF
      END

      SUBROUTINE SEVAL1(N, U, X, Y, B, C, D, F, DF, D2F)
      IMPLICIT NONE
      INTEGER N
      DOUBLE PRECISION  U, X(N), Y(N), B(N), C(N), D(N)
      DOUBLE PRECISION F, DF, D2F
C
C  THIS SUBROUTINE EVALUATES THE CUBIC SPLINE FUNCTION
C
C    SEVAL = Y(I) + B(I)*(U-X(I)) + C(I)*(U-X(I))**2 + D(I)*(U-X(I))**3
C
C    WHERE  X(I) .LT. U .LT. X(I+1), USING HORNER'S RULE
C
C  IF  U .LT. X(1) THEN  I = 1  IS USED.
C  IF  U .GE. X(N) THEN  I = N  IS USED.
C
C  INPUT..
C
C    N = THE NUMBER OF DATA POINTS
C    U = THE ABSCISSA AT WHICH THE SPLINE IS TO BE EVALUATED
C    X,Y = THE ARRAYS OF DATA ABSCISSAS AND ORDINATES
C    B,C,D = ARRAYS OF SPLINE COEFFICIENTS COMPUTED BY SPLINE
C
C  IF  U  IS NOT IN THE SAME INTERVAL AS THE PREVIOUS CALL, THEN A
C  BINARY SEARCH IS PERFORMED TO DETERMINE THE PROPER INTERVAL.
C
      INTEGER I, J, K
      DOUBLE PRECISION DX
      DATA I/1/
      IF ( I .GE. N ) I = 1
      IF ( U .LT. X(I) ) GO TO 10
      IF ( U .LE. X(I+1) ) GO TO 30
C
C  BINARY SEARCH
C
   10 I = 1
      J = N+1
   20 K = (I+J)/2
      IF ( U .LT. X(K) ) J = K
      IF ( U .GE. X(K) ) I = K
      IF ( J .GT. I+1 ) GO TO 20
C
C  EVALUATE SPLINE
C
   30 DX = U - X(I)
      F = Y(I) + DX*(B(I) + DX*(C(I) + DX*D(I)))
      DF = B(I) + DX*(2.D0*C(I) + 3.D0*DX*D(I))
      D2F = 2.D0*C(I) + 6.D0*DX*D(I)
      RETURN
      END
