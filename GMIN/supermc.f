C   GMIN: A PROGRAM FOR FINDING GLOBAL MINIMA
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF GMIN.
C
C   GMIN IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   GMIN IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
      SUBROUTINE SUPERMC(SPOTEL,SCOORDS,NSUPERCOUNT,POTEL)
      USE COMMONS
      IMPLICIT NONE
      

      INTEGER J1, NSSUCCESS, NSFAIL, NSFAILT, NSSUCCESST, J2, INDEX(NSUPER), NSUPERCOUNT
      DOUBLE PRECISION RANDOM, SPOTEL(NSUPER), SCOORDS(3*NATOMS,NSUPER), SEPREV,
     1                 SCOORDSO(3*NATOMS), POTEL
      LOGICAL ASTEST
      SAVE
C
C  SAVE THE NSUPER PREVIOUS ENERGIES AND COORDINATES.
C
      SPOTEL(NSUPERCOUNT)=POTEL
      DO J2=1,3*NATOMS
         SCOORDS(J2,NSUPERCOUNT)=COORDS(J2,1)
      ENDDO
      NSUPERCOUNT=NSUPERCOUNT-1
      IF (NSUPERCOUNT.NE.0) RETURN

      CALL SORT5(NSUPER,NSUPER,SPOTEL,INDEX)
      IF (NSUPERSTEP.EQ.0) THEN
         NSSUCCESS=0
         NSFAIL=0
         NSSUCCESST=0
         NSFAILT=0
C
C  CALCULATE THE INITIAL ENERGY AND SAVE IN SEPREV.
C
         SEPREV=SPOTEL(1)
         DO J1=1,3*NATOMS
            SCOORDSO(J1)=SCOORDS(J1,INDEX(1))
         ENDDO
      ELSE
         CALL STRANSITION(SPOTEL(1),SEPREV,ASTEST,RANDOM)
         IF (ASTEST) THEN
C           IF (DEBUG) THEN
               WRITE(*,34) RANDOM,SPOTEL(1),SEPREV,NSSUCCESS,NSFAIL
34             FORMAT('SUPER RAN,SPOTEL,SEPREV,NSSUC,NSFAIL=',3F15.7,2I6,' ACC')
C           ENDIF
            NSSUCCESS=NSSUCCESS+1
            SEPREV=SPOTEL(1)
            DO J2=1,3*(NATOMS-NSEED)
               SCOORDSO(J2)=SCOORDS(J2,INDEX(1))
            ENDDO
C           EPREV(1)=1.0D100
            EPREV(1)=SPOTEL(NSUPER)
C           CALL STAKESTEP(SCOORDS,INDEX)
            DO J2=1,3*(NATOMS-NSEED)
C              COORDS(J2,1)=SCOORDS(J2,INDEX(1))
C              COORDSO(J2,1)=SCOORDS(J2,INDEX(1))
               COORDS(J2,1)=SCOORDS(J2,INDEX(NSUPER))
               COORDSO(J2,1)=SCOORDS(J2,INDEX(NSUPER))
            ENDDO
            PRINT*,'RESETTING COORDINATES TO ',EPREV(1)
         ELSE
            NSFAIL=NSFAIL+1
            EPREV(1)=SEPREV
            DO J2=1,3*(NATOMS-NSEED)
               COORDS(J2,1)=SCOORDSO(J2)
               COORDSO(J2,1)=SCOORDS(J2,INDEX(1))
            ENDDO
C           DO J2=1,NATOMS    
C              VAT(J2,INDEX(1)?)=VATO(J2,INDEX(1)?)   ?????
C           ENDDO
C           IF (DEBUG) THEN
               WRITE(*,36) RANDOM,SPOTEL(1),SEPREV,NSSUCCESS,NSFAIL
36             FORMAT('SUPER RAN,SPOTEL,SEPREV,NSSUC,NSFAIL=',3F15.7,2I6,' REJ')
C           ENDIF
         ENDIF
C
C  CHECK THE ACCEPTANCE RATIO.
C
         IF ((MOD(NSUPERSTEP,NSACCEPT).EQ.0).AND.(NSEED.EQ.0)) THEN
            IF (1.0D0*(NSSUCCESS)/(1.0D0*(NSSUCCESS+NSFAIL)).GT.SACCRAT) THEN
C              SUPSTEP=SUPSTEP*1.1D0
               TEMPS=TEMPS/1.1D0
            ELSE
C              SUPSTEP=SUPSTEP/1.1D0
               TEMPS=TEMPS*1.1D0
            ENDIF
C           WRITE(*,'(A,F15.7)') 'SUPERSTEP SCALING FACTOR IS NOW ',SUPSTEP
            WRITE(*,'(A,F15.7)') 'SUPERSTEP TEMPERATURE IS NOW ',TEMPS
            WRITE(*,'(A,I4,A,F15.7)') 
     1        'ACCEPTANCE RATIO FOR PREVIOUS ',NSACCEPT,' SUPERSTEPS=',1.0D0*(NSSUCCESS)/(1.0D0*(NSSUCCESS+NSFAIL))
            NSSUCCESST=NSSUCCESST+NSSUCCESS
            NSFAILT=NSFAILT+NSFAIL
            NSSUCCESS=0
            NSFAIL=0 
         ENDIF
      ENDIF
      WRITE(*,'(A,I6,A,F20.10)') 'ENERGY IN SUPERSTEP CHAIN AT STEP ',NSUPERSTEP,' IS ',SPOTEL(1)

      NSUPERSTEP=NSUPERSTEP+1
      NSUPERCOUNT=NSUPER
     
      RETURN
      END
C
C     THIS SUBPROGRAM PERFORMS A SORT ON THE INPUT DATA AND
C     ARRANGES IT FROM SMALLEST TO BIGGEST. THE EXCHANGE-SORT
C     ALGORITHM IS USED.
C
      SUBROUTINE SORT5(N,J3,A,NA)
      IMPLICIT NONE
      INTEGER J1, L, N, J3, J2, NA(J3), NTEMP
      DOUBLE PRECISION TEMP, A(J3)
 
      DO J1=1,N
         NA(J1)=J1
      ENDDO
      DO J1=1,N-1
         L=J1
         DO J2=J1+1,N
            IF (A(L).GT.A(J2)) L=J2
         ENDDO
         TEMP=A(L)
         A(L)=A(J1)
         A(J1)=TEMP
         NTEMP=NA(L)
         NA(L)=NA(J1)
         NA(J1)=NTEMP
      ENDDO

      RETURN
      END
C
C************************************************************************************************
C
      SUBROUTINE STRANSITION(ENEW,EOLD,ASTEST,RANDOM)
      USE COMMONS
      IMPLICIT NONE
      DOUBLE PRECISION ENEW, EOLD, DPRAND, RANDOM
      LOGICAL ASTEST

      IF (ENEW.LT.EOLD) THEN
         RANDOM=0.0D0
         ASTEST=.TRUE.
      ELSE
         RANDOM=DPRAND()
         IF (DEXP(-(ENEW-EOLD)/TEMPS).GT.RANDOM) THEN
            ASTEST=.TRUE.
         ELSE
            ASTEST=.FALSE.
         ENDIF
      ENDIF

      RETURN
      END
C
C************************************************************************************************
C
      SUBROUTINE STAKESTEP(SCOORDS,INDEX)
      USE COMMONS
      IMPLICIT NONE
      

      DOUBLE PRECISION DPRAND, RANDOM, XMASS, YMASS, ZMASS, 
     1                 DIST(3*NATOMS), DMAX, VMAX, VMIN,
     2                 THETA, PHI, PI, DUMMY, SCOORDS(3*NATOMS,NSUPER)
      PARAMETER (PI=3.141592654D0)
      INTEGER J1, J2, JMAX, INDEX(NSUPER)

      DMAX=-1.0D0
      VMAX=-1.0D6
      VMIN=1.0D6
      DO J1=1,NATOMS
         J2=3*J1
         DIST(J1)=DSQRT(SCOORDS(J2-2,INDEX(1))**2+SCOORDS(J2-1,INDEX(1))**2+SCOORDS(J2,INDEX(1))**2)
         IF (DIST(J1).GT.DMAX) DMAX=DIST(J1)
         IF (VAT(J1,INDEX(1)).GT.VMAX) THEN
            VMAX=VAT(J1,INDEX(1))
            JMAX=J1
         ENDIF
         IF (VAT(J1,INDEX(1)).LT.VMIN) VMIN=VAT(J1,INDEX(1))
      ENDDO

      DO J1=1,NATOMS-NSEED
         J2=3*J1
         IF ((((VAT(J1,INDEX(1)).GT.SUPSTEP*ASTEP(1)*VMIN).AND.
     1       (J1.EQ.JMAX)).OR.(NATOMS-NSEED.EQ.1))) THEN
           IF (DEBUG) PRINT*,'ANGULAR MOVE FOR POINT ',J1
           THETA=DPRAND()*PI
           PHI=DPRAND()*PI*2.0D0
           SCOORDS(J2-2,INDEX(1))=DMAX*DSIN(THETA)*DCOS(PHI)
           SCOORDS(J2-1,INDEX(1))=DMAX*DSIN(THETA)*DSIN(PHI)
           SCOORDS(J2,INDEX(1))=  DMAX*DCOS(THETA)
         ELSE
           RANDOM=(DPRAND()-0.5D0)*2.0D0
           SCOORDS(J2-2,INDEX(1))=SCOORDS(J2-2,INDEX(1))+SUPSTEP*STEP(1)*RANDOM
           RANDOM=(DPRAND()-0.5D0)*2.0D0
           SCOORDS(J2-1,INDEX(1))=SCOORDS(J2-1,INDEX(1))+SUPSTEP*STEP(1)*RANDOM
           RANDOM=(DPRAND()-0.5D0)*2.0D0
           SCOORDS(J2,INDEX(1))=SCOORDS(J2,INDEX(1))+SUPSTEP*STEP(1)*RANDOM
C
C STOP ATOMS LEAVING THE CONTAINER IN THIS STEP
C
           IF (.NOT.PERIODIC) THEN
              DUMMY=SCOORDS(J2-2,INDEX(1))**2+SCOORDS(J2-1,INDEX(1))**2+SCOORDS(J2,INDEX(1))**2
              IF (DUMMY.GT.RADIUS) THEN
                 SCOORDS(J2-2,INDEX(1))=SCOORDS(J2-2,INDEX(1))*DSQRT(RADIUS/DUMMY)
                 SCOORDS(J2-1,INDEX(1))=SCOORDS(J2-1,INDEX(1))*DSQRT(RADIUS/DUMMY)
                 SCOORDS(J2,INDEX(1))=SCOORDS(J2,INDEX(1))*DSQRT(RADIUS/DUMMY)
              ENDIF
           ENDIF
         ENDIF
      ENDDO
C
C  PRESERVE CENTRE OF MASS IF REQUIRED.
C
      IF (CENT.AND.(.NOT.SEEDT)) THEN
         XMASS=0.0D0
         YMASS=0.0D0
         ZMASS=0.0D0
         DO J1=1,NATOMS
            J2=3*J1
            XMASS=XMASS+SCOORDS(J2-2,INDEX(1))
            YMASS=YMASS+SCOORDS(J2-1,INDEX(1))
            ZMASS=ZMASS+SCOORDS(J2,INDEX(1))
         ENDDO
         XMASS=XMASS/(NATOMS)
         YMASS=YMASS/(NATOMS)
         ZMASS=ZMASS/(NATOMS)
         DO J1=1,NATOMS
            J2=3*J1
            SCOORDS(J2-2,INDEX(1))=SCOORDS(J2-2,INDEX(1))-XMASS
            SCOORDS(J2-1,INDEX(1))=SCOORDS(J2-1,INDEX(1))-YMASS
            SCOORDS(J2,INDEX(1))=  SCOORDS(J2,INDEX(1))-ZMASS
         ENDDO
      ENDIF

      RETURN
      END
