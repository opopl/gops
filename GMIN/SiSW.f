C   GMIN: A PROGRAM FOR FINDING GLOBAL MINIMA
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF GMIN.
C
C   GMIN IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   GMIN IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C**********************************************************************
C
C   SUBROUTINES FOR CALCULATING THE FORCE (MINUS THE GRADIENT) AND THE
C   ENERGY OF A STILLINGER-WEBER SYSTEM.
C
C   AS MENTIONED IN BARKEMA+MOUSSEAU (PRL 77, 4358 (1996)) THE 3-BODY
C   STRENGTH OF THE SW POTENTIAL IS TOO WEAK TO LEAD TO GOOD AMORPHOUS
C   STRUCTURES. IT IS STRENGTHED HERE BY A FACTOR 1.5 (SEE LAMBDA).
C
C   THE SUBROUTINE PRESUPPOSES PERIODIC BOUNDARY COUNDITION IN A BOX
C   CENTERED AROUND -0.5*BOX AND +0.5*BOX (THE SAME FOR THE Y AND Z
C   DIRECTION)
C
C   IN INPUT:  POS: POSITIONS IN ANGSTROEMS (AS A 3*NATOMS VECTOR)
C              NEI: LIST OF NEIGHBOURS 
C              NUMNEI: NUMBER OF NEIGHBOURS FOR ATOM I
C              BOX,BOY,BOZ: SIZE OF THE BOX ALONG X,Y AND Z
C                           DIRECTIONS. 
C
C  AS OUTPUT:  THE TOTAL ENERGY (IN BOTH CALCFORCE AND CALCENERGY
C              FORCE:  A 3*NATOMS VECTOR OF THE FORCE ON THE ATOMS.
C
C   WRITTEN BY NORMAND MOUSSEAU 
C              13 OCT. 1997
C
C********************************************************************

      SUBROUTINE SISW(POS,GRAD,TOTENERGY,GTEST)
      USE COMMONS
      IMPLICIT NONE
      LOGICAL GTEST
      INTEGER MAXNEI,N
      DOUBLE PRECISION SIGMA,A,ALPHA,BETA,EPSILON,SWGAMMA,LAMBDA,ONE_THIRD,A_EPS,P,RCUT,
     1                 BOX, BOY, BOZ
      PARAMETER (MAXNEI=36)
      PARAMETER (SIGMA=2.0951,A=7.049556277,ALPHA=1.8)
      PARAMETER (BETA=0.6022245584,EPSILON=2.16823,P=4)
      PARAMETER (SWGAMMA=1.2,LAMBDA=(21.0*1.5),RCUT= (ALPHA*SIGMA))
      PARAMETER (ONE_THIRD=(1.0/3.0),A_EPS=(A*EPSILON))
      INTEGER NUMNEI(NATOMS),NEI(NATOMS,MAXNEI)
      DOUBLE PRECISION POS(3*NATOMS),GRAD(3*NATOMS),TOTENERGY
 
      INTEGER  I,J,K,INDJ,INDK
      DOUBLE PRECISION  XI,YI,ZI,XIJ,YIJ,ZIJ,RIJ,RIJ2
      DOUBLE PRECISION  RHOIJ,COS_X_IJ,COS_Y_IJ,COS_Z_IJ,
     +     ONE_O_A_IJ,EXPO,GAM_O_A_IJ,EXP_GAM_IJ,GAM_O_A_IK,
     +     COS_JIK,COS_X_IK,COS_Y_IK,COS_Z_IK,COS_P_1O3,
     +     XIK,YIK,ZIK,RIK,RIK2,RHOIK,FFX,FFY,FFZ,
     +     R_TO_MINUSP,ONE_O_A_IK,TERM_IK,FACT,
     +     TERM1,TERM2,FACT3_IJ,TERM_IJ,DHDCOS_IK,
     +     DHDCOS_IJ, ONE_O_A2,TWOBODY,THREEBODY
 
      DOUBLE PRECISION DCOSDXJ,DCOSDYJ,DCOSDZJ,DCOSDXK,DCOSDYK,DCOSDZK
      DOUBLE PRECISION INVSIG,INVRIJ,INVRIK
      DOUBLE PRECISION RCUT2
      DOUBLE PRECISION X(NATOMS),Y(NATOMS),Z(NATOMS),
     +                 FX(NATOMS),FY(NATOMS),FZ(NATOMS)

      N=3*NATOMS
      RCUT2=RCUT*RCUT

      BOX=2.0D0*BOXLX
      BOZ=2.0D0*BOXLX
      BOY=2.0D0*BOXLX
      DO I=1,NATOMS
        X(I)= POS(3*(I-1)+1)
        Y(I)= POS(3*(I-1)+2)
        Z(I)= POS(3*(I-1)+3)
      END DO

      CALL NEIGHBOUR(NATOMS,N,POS,NUMNEI,NEI,BOX,BOY,BOZ,X,Y,Z)

      IF (GTEST) THEN
         DO I=1,NATOMS
           FX(I)= 0.0D0
           FY(I)= 0.0D0
           FZ(I)= 0.0D0
         END DO
      ENDIF

      TWOBODY=0.0D0
      THREEBODY=0.0D0
      TOTENERGY=0.0D0
      INVSIG=1.0/SIGMA

      DO I=1,NATOMS
        XI=X(I)
        YI=Y(I)
        ZI=Z(I)
        DO INDJ=1,NUMNEI(I)
          J=NEI(I,INDJ)

C  PAIR INTERACTIONS OF I AND J  WITH PERIODIC BOUNDARY COUNDITIONS
C  DISTANCE 
          XIJ=X(J)-XI
          YIJ=Y(J)-YI
          ZIJ=Z(J)-ZI
          XIJ=XIJ-BOXLX*ANINT(XIJ/BOXLX)
          YIJ=YIJ-BOXLY*ANINT(YIJ/BOXLY)
          ZIJ=ZIJ-BOXLZ*ANINT(ZIJ/BOXLZ)
          RIJ2=XIJ*XIJ+YIJ*YIJ+ZIJ*ZIJ

C   CHECK WHETHER THE DISTANCE IS TOO LARGE 
          IF (RIJ2.LT.RCUT2) THEN
            RIJ=DSQRT(RIJ2)
            INVRIJ = 1.0/RIJ
            RHOIJ=RIJ*INVSIG
            COS_X_IJ=XIJ*INVRIJ
            COS_Y_IJ=YIJ*INVRIJ
            COS_Z_IJ=ZIJ*INVRIJ
    
C  SOME USEFUL QUANTITIES 
            ONE_O_A_IJ =1.0D0/(RHOIJ-ALPHA)
            EXPO=DEXP(ONE_O_A_IJ)
            GAM_O_A_IJ=SWGAMMA*ONE_O_A_IJ
            EXP_GAM_IJ=DEXP(GAM_O_A_IJ)
            R_TO_MINUSP=RHOIJ**(-1.0*P)
    
C  TWO BODY ENERGY AND FORCE 
            TERM1=A_EPS*(BETA*R_TO_MINUSP-1.0)*EXPO
            ONE_O_A2 = ONE_O_A_IJ*ONE_O_A_IJ
            TERM2=(ONE_O_A2*TERM1
     +            +A_EPS*P*BETA*R_TO_MINUSP*EXPO/RHOIJ)*INVSIG
    
            TWOBODY=TWOBODY+0.5*TERM1
            TOTENERGY=TOTENERGY+0.5*TERM1
    
            IF (GTEST) THEN
               FX(I)=FX(I)-TERM2*COS_X_IJ
               FY(I)=FY(I)-TERM2*COS_Y_IJ
               FZ(I)=FZ(I)-TERM2*COS_Z_IJ
            ENDIF

C  PREPARE FOR THE THREE BODY TERM  
            FACT3_IJ=GAM_O_A_IJ*ONE_O_A_IJ*INVSIG
    
            DO INDK=INDJ+1,NUMNEI(I)
              K=NEI(I,INDK)
C  DISTANCE  AND PRB
              XIK=X(K)-XI
              YIK=Y(K)-YI
              ZIK=Z(K)-ZI
              XIK=XIK-BOXLX*ANINT(XIK/BOXLX)
              YIK=YIK-BOXLY*ANINT(YIK/BOXLY)
              ZIK=ZIK-BOXLZ*ANINT(ZIK/BOXLZ)
              RIK2=XIK*XIK+YIK*YIK+ZIK*ZIK
    
              IF (RIK2.LE.RCUT2) THEN
                RIK=DSQRT(RIK2)
                INVRIK=1.0/RIK
                RHOIK=RIK*INVSIG
                COS_X_IK=XIK*INVRIK
                COS_Y_IK=YIK*INVRIK
                COS_Z_IK=ZIK*INVRIK
    
C          SOME USEFUL QUANTITIES 
                ONE_O_A_IK=1.0/(RHOIK-ALPHA)
                GAM_O_A_IK=SWGAMMA*ONE_O_A_IK
                FACT     =EPSILON*LAMBDA*EXP(GAM_O_A_IK)*EXP_GAM_IJ
                COS_JIK=COS_X_IJ*COS_X_IK+COS_Y_IJ*COS_Y_IK+ 
     +                  COS_Z_IJ*COS_Z_IK
                COS_P_1O3=COS_JIK+ONE_THIRD
    
C          ENERGY (ADDED ONLY TO CENTRAL ATOM)  
                TOTENERGY=TOTENERGY+FACT*COS_P_1O3*COS_P_1O3
                THREEBODY=THREEBODY+FACT*COS_P_1O3*COS_P_1O3
    
    
C          FORCE 
                IF (GTEST) THEN
                   TERM_IJ=FACT*FACT3_IJ*COS_P_1O3*COS_P_1O3
                   DHDCOS_IJ=2*FACT*COS_P_1O3
                   TERM_IK=FACT*GAM_O_A_IK*ONE_O_A_IK*COS_P_1O3*COS_P_1O3/SIGMA
                   DHDCOS_IK=2*FACT*COS_P_1O3
    
                   DCOSDXJ=(COS_X_IK-COS_JIK*COS_X_IJ)*INVRIJ
                   DCOSDYJ=(COS_Y_IK-COS_JIK*COS_Y_IJ)*INVRIJ
                   DCOSDZJ=(COS_Z_IK-COS_JIK*COS_Z_IJ)*INVRIJ
    
                   DCOSDXK=(COS_X_IJ-COS_JIK*COS_X_IK)*INVRIK
                   DCOSDYK=(COS_Y_IJ-COS_JIK*COS_Y_IK)*INVRIK
                   DCOSDZK=(COS_Z_IJ-COS_JIK*COS_Z_IK)*INVRIK
    
                   FFX=TERM_IJ*COS_X_IJ-DHDCOS_IJ*DCOSDXJ
                   FFY=TERM_IJ*COS_Y_IJ-DHDCOS_IJ*DCOSDYJ
                   FFZ=TERM_IJ*COS_Z_IJ-DHDCOS_IJ*DCOSDZJ
                   FX(J)=FX(J)+FFX
                   FY(J)=FY(J)+FFY
                   FZ(J)=FZ(J)+FFZ
                   FX(I)=FX(I)-FFX
                   FY(I)=FY(I)-FFY
                   FZ(I)=FZ(I)-FFZ
                   FFX=TERM_IK*COS_X_IK-DHDCOS_IK*DCOSDXK
                   FFY=TERM_IK*COS_Y_IK-DHDCOS_IK*DCOSDYK
                   FFZ=TERM_IK*COS_Z_IK-DHDCOS_IK*DCOSDZK
                   FX(K)=FX(K)+FFX
                   FY(K)=FY(K)+FFY
                   FZ(K)=FZ(K)+FFZ
                   FX(I)=FX(I)-FFX
                   FY(I)=FY(I)-FFY
                   FZ(I)=FZ(I)-FFZ
                 ENDIF
              ENDIF
            ENDDO
          ENDIF
        ENDDO
      ENDDO

      IF (GTEST) THEN
         DO I=1,NATOMS
C          FORCE(I)=FX(I)
C          FORCE(I+NATOMS)=FY(I)
C          FORCE(I+2*NATOMS)=FZ(I)

           GRAD(3*(I-1)+1)=-FX(I)
           GRAD(3*(I-1)+2)=-FY(I)
           GRAD(3*(I-1)+3)=-FZ(I)

         END DO
      ENDIF

C     PRINT *,'TWOBODY: ',TWOBODY,'  THREEBODY',THREEBODY
      RETURN
      END
    
      SUBROUTINE NEIGHBOUR(NATOMS,N,POS,NUMNEI,NEI,BOX,BOY,BOZ,X,Y,Z)
      IMPLICIT NONE
      INTEGER NATOMS,MAXNEI,N
      DOUBLE PRECISION SIGMA,ALPHA,RCUT
      PARAMETER (MAXNEI=36)
      PARAMETER (SIGMA=2.0951,ALPHA=1.8,RCUT= (ALPHA*SIGMA))
      INTEGER NUMNEI(NATOMS),NEI(NATOMS,MAXNEI)
      DOUBLE PRECISION POS(N),BOX,BOY,BOZ
      INTEGER I,J
      DOUBLE PRECISION XI,YI,ZI,XIJ,YIJ,ZIJ,RCUT2,RIJ2
      DOUBLE PRECISION X(NATOMS),Y(NATOMS),Z(NATOMS)

C  NOTE THAT THE NEIGHBOUR LIST USES A SLIGHTLY ENLARGED CUT-OFF
C  SO THAT ONE DOES NOT NEED TO RECOMPUTE THE NEIGHBOUR LIST AT
C  EACH ITERATION

      RCUT2=1.4*RCUT*RCUT

      DO I=1,NATOMS
        NUMNEI(I)=0
        DO J=1,MAXNEI
          NEI(I,J)=0
        END DO
      END DO 

      DO I=1,NATOMS
        XI=X(I)
        YI=Y(I)
        ZI=Z(I)
        DO J=I+1,NATOMS

C  PAIR INTERACTIONS OF I AND J  WITH PERIODIC BOUNDARY COUNDITIONS
C  DISTANCE
          XIJ=X(J)-XI
          YIJ=Y(J)-YI
          ZIJ=Z(J)-ZI
          XIJ=XIJ-BOX*ANINT(XIJ/BOX)
          YIJ=YIJ-BOY*ANINT(YIJ/BOY)
          ZIJ=ZIJ-BOZ*ANINT(ZIJ/BOZ)
          RIJ2=XIJ*XIJ+YIJ*YIJ+ZIJ*ZIJ

C   CHECK WHETHER THE DISTANCE IS TOO LARGE
          IF (RIJ2.LT.RCUT2) THEN
            NUMNEI(I)=NUMNEI(I)+1
            NUMNEI(J)=NUMNEI(J)+1
            IF ((NUMNEI(I).GT.MAXNEI).OR.(NUMNEI(J).GT.MAXNEI))  THEN
               PRINT *, 'WARNING - TOO MANY NEIGHBOURS'
            ELSE
               NEI(I,NUMNEI(I))=J
               NEI(J,NUMNEI(J))=I
            ENDIF
          ENDIF
        END DO
      END DO

      RETURN
      END
