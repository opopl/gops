C   GMIN: A PROGRAM FOR FINDING GLOBAL MINIMA
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF GMIN.
C
C   GMIN IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   GMIN IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
      SUBROUTINE DFPMIN(ITMAX,P,N,GTOL,ITER,FRET,BFSUCCESS)
      USE COMMONS
C      USE MODAMBER
      IMPLICIT NONE
      INTEGER ITER,N,ITMAX,ICRAP
      DOUBLE PRECISION FRET,GTOL,P(N),EPS,STPMX,TOLX,PRMS
      PARAMETER (STPMX=1.D1,EPS=3.0D-8,TOLX=4.0D0*EPS)
      LOGICAL BFSUCCESS,BSTUCK,CRAP,CTEST,NOTCALLED,DFLAG
      INTEGER I,ITS,J
      LOGICAL CHECK
      DOUBLE PRECISION FAC,FAD,FAE,FP,STPMAX,SUM,SUMDG,SUMXI,DG(3*NATOMS),
     1                 G(3*NATOMS),HDG(3*NATOMS),HESSIN(3*NATOMS,3*NATOMS),PNEW(3*NATOMS),XI(3*NATOMS)

C     FP=F1DIM(P)

      ICRAP=1
      CRAP=.FALSE.
      NOTCALLED=.TRUE.
      CTEST=.FALSE.
      DFLAG=DEBUG
C
C  GET INITIAL GRADIENT AND ENERGY.
C
      CALL POTENTIAL(P,G,FP,.TRUE.,.FALSE.)
      SUM=0.0D0
C
C  INITIALIZE HESSIAN TO UNIT MATRIX. INITIAL SEARCH DIRECTION, XI,
C  IS ANTIPARALLEL TO THE GRADIENT.
C
      DO I=1,N
         DO J=1,N
            HESSIN(J,I)=0.0D0
         ENDDO
         HESSIN(I,I)=1.D0
         XI(I)=-G(I)
         SUM=SUM+P(I)**2
      ENDDO
C     STPMAX=STPMX*MAX(SQRT(SUM), DBLE(N))
      STPMAX=MAXBFGS

      DO ITS=1,ITMAX
!        IF (MOD(ITS,20).EQ.0) CALL MAKELIST ! PAUL MORTENSON'S AMBER SPECIFIC!
         ITER=ITS
         CALL LNSRCH(N,P,FP,G,XI,PNEW,FRET,STPMAX,CHECK,BSTUCK)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C        DO I=1,N
C           PNEW(I)=P(I)
C        ENDDO
C        CALL LINMIN(ITS,PNEW,G,NATOMS,FRET)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
         IF (BSTUCK) THEN
            WRITE (*,*) ' *** STUCK IN LNSRCH - TAKING 5 CG STEPS'
            DEBUG=.TRUE.
            CALL CGMIN(5,P,CRAP,ICRAP,FRET,1)
            IF (.NOT.(DFLAG)) DEBUG=.FALSE.
         ENDIF
         FP=FRET
         DO I=1,N
           XI(I)=PNEW(I)-P(I)
           P(I)=PNEW(I)
           DG(I)=G(I)
         ENDDO
C
C  GET NEW GRADIENT AND HESSIAN.
C
         CALL POTENTIAL(P,G,FP,.TRUE.,.FALSE.)
         PRMS=0.0D0
         DO I=1,N
            PRMS=PRMS+G(I)**2
         ENDDO
         PRMS=SQRT(PRMS/N)
         IF (DEBUG) WRITE (*,*) ' ITERATION ',ITS,' ENERGY= ',FP,' RMS FORCE= ',PRMS
C        IF (DEBUG) CALL FLUSH(6)
         IF (PRMS.LT.GTOL) THEN
            BFSUCCESS=.TRUE.
            RETURN
         ENDIF
C
C  CATCH COLD FUSION FOR IONIC POTENTIALS AND DISCARD.
C
C  CHANGED EREAL FOR COLD FUSION TO 1.0D6 RATHER THAN 0.0D0, WHICH COULD RESULT IN STEPS BEING ACCEPTED
C  FOR SYSTEMS WITH POSITIVE ENERGIES. - KHS26 26/11/09
C
         IF ((TOSI.OR.WELCH.OR.RGCL2.OR.AMBER.OR.PACHECO).AND.(FRET.LT.-1.0D4)) THEN
            FRET=1.0D4
            RMS=1.0D0
            WRITE(*,'(A)') ' COLD FUSION DIAGNOSED - STEP DISCARDED'
!     CSW34> SET COLDFUSION=.TRUE. SO THAT ATEST=.FALSE. IN MC
            COLDFUSION=.TRUE.
            RETURN
         ENDIF
!        IF ((AMBER.AND.NOTCALLED).AND.(PRMS.LT.1.0D0).AND.(.NOT.(FIX))) THEN
!           CALL CHIRALTEST(CTEST,P)
!           IF (CTEST) THEN
!              WRITE(*,'(A)') ' CHANGE IN CHIRALITY DETECTED - STEP REJECTED'
!              FRET=1.0D6
!              RMS=1.0D0
!              RETURN
!           ENDIF
!           NOTCALLED=.FALSE.
!        ENDIF

         DO I=1,N
            DG(I)=G(I)-DG(I)
         ENDDO
         DO I=1,N
            HDG(I)=0.0D0
            DO J=1,N
               HDG(I)=HDG(I)+HESSIN(J,I)*DG(J)
            ENDDO
         ENDDO
C
C  HESSIAN UPDATE.
C
         FAC=0.0D0
         FAE=0.0D0
         SUMDG=0.0D0
         SUMXI=0.0D0
         DO I=1,N
            FAC=FAC+DG(I)*XI(I)
            FAE=FAE+DG(I)*HDG(I)
            SUMDG=SUMDG+DG(I)**2
            SUMXI=SUMXI+XI(I)**2
         ENDDO
         IF (FAC**2.GT.EPS*SUMDG*SUMXI) THEN
            FAC=1.0D0/FAC
            FAD=1.0D0/FAE
            DO I=1,N
               DG(I)=FAC*XI(I)-FAD*HDG(I)
            ENDDO
            DO I=1,N
               DO J=I,N
                  HESSIN(J,I)=HESSIN(J,I)+FAC*XI(I)*XI(J)-FAD*HDG(I)*HDG(J)+FAE*DG(I)*DG(J)
                  HESSIN(I,J)=HESSIN(J,I)
               ENDDO
            ENDDO
         ENDIF
C
C  SEARCH DIRECTION UPDATE.
C
         DO I=1,N
            XI(I)=0.0D0
            DO J=1,N
              XI(I)=XI(I)-HESSIN(J,I)*G(J)
            ENDDO
         ENDDO
      ENDDO

      BFSUCCESS=.FALSE.
      RETURN
      END
