!OP226>=================================== 
!OP226> GPL LICENSE INFO {{{ 
C   GMIN: A PROGRAM FOR FINDING GLOBAL MINIMA
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF GMIN.
C
C   GMIN IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   GMIN IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C
!OP226>}}} 
!OP226>=================================== 
C  CONJUGATE GRADIENT DRIVER. 
C  CFLAG CONVERGENCE TEST
C  CTEST CHECKS FOR CHANGES IN CHIRALITY FOR AMBER RUNS
C
!> \PARAM QTEST LOGICAL 
!> \PARAM NP INTEGER
!> \PARAM ITER INTEGER
!> \PARAM TIME DOUBLE PRECISION
!> \PARAM BRUN INTEGER
!> \PARAM QDONE INTEGER
!> \PARAM P DOUBLE PRECISION(3*NATOMS)
      SUBROUTINE QUENCH(QTEST,NP,ITER,TIME,BRUN,QDONE,P)
!OP226> DECLARATIONS {{{ 
      USE COMMONS
      USE QMODULE
      USE PORFUNCS
      IMPLICIT NONE

      INTEGER I, J1, NSQSTEPS, NP, IFLAG, ITER, NOPT, J2, NDUMMY, J3, CSMIT
      DOUBLE PRECISION P(3*NATOMS),POTEL,TIME,EREAL,RBCOORDS(18),TMPCOORDS(3*NATOMS), DIST, QE, QX, AVVAL, CSMRMS
      LOGICAL QTEST, CFLAG, RES, COMPON, EVAPREJECT
      DOUBLE PRECISION  GRAD(3*NATOMS), DUMMY, DUM(3*NATOMS), DISTMIN, SSAVE, DIST2, RMAT(3,3)
C     DOUBLE PRECISION  WORK(60*NATOMS)
      DOUBLE PRECISION, PARAMETER :: HALFPI=1.570796327D0

      CHARACTER(LEN=80) DSTRING
      COMMON /MYPOT/ POTEL
      COMMON /CO/ COMPON
      COMMON /DMIN/ DISTMIN
      LOGICAL GUIDECHANGET, GUIDET, CSMDOGUIDET
      COMMON /GD/ GUIDECHANGET, GUIDET, CSMDOGUIDET
      COMMON /EV/ EVAPREJECT
      DOUBLE PRECISION QSTART, QFINISH
      COMMON /Q4C/ QSTART, QFINISH
      COMMON /CSMAVVAL/ AVVAL, CSMRMS, CSMIT

C
C   SF344> GRADUALLY CHANGING PARAMETERS TO PREVENT DISSOCIATION OF PY ELLIPSOIDS WITH REPULSIVE SITES 
C
      DOUBLE PRECISION EPSSAVE(3)

C
C  DATA FOR THE SCREEN SAVER.
C
      INTEGER BRUN, QDONE,II
!OP226>}}} 
C
C  TURN ON GUIDING POTENTIALS. THESE GET TURNED OFF IN POTENTIAL.F WHEN
C  THE RMS FORCE IS SMALL ENOUGH.
C
      SSAVE=STEP(NP)
C
C CSW34 RESET THE NFIX COUNTER
C
      NFIX=0

11    IF (WELCH) TOSI=.TRUE.
      IF (PACHECO) AXTELL=.FALSE.
      IF (CPMD) SCT=.TRUE.
      IF (ZETT1.OR.ZETT2) THEN
         MORSET=.TRUE.
         RHO=6.0D0
      ENDIF
      IF (NATBT.AND.GUPTAT) GUIDET=.TRUE.
      IF (NATBT.AND.GUIDET) GUPTAT=.TRUE.
      IF (CSMGUIDET) CSMDOGUIDET=.TRUE.
      NOPT=3*NATOMS
      IF (WENZEL) NOPT=2
      IF (MULLERBROWNT) NOPT=2
C
C  QTEST IS SET FOR THE FINAL QUENCHES WITH TIGHTER CONVERGENCE CRITERIA.
C
      IF (QTEST) THEN
         GMAX=CQMAX
      ELSE
         GMAX=BQMAX
      ENDIF

      QDONE=0
      DO I=1,3*NATOMS
         P(I)=COORDS(I,NP)
      ENDDO
C
C     IF (TIP) THEN
C        WRITE(DUMPXYZUNIT+NP,'(I6)') (NATOMS/2)*3
C        WRITE(DUMPXYZUNIT+NP,70) NP,NQ(NP), EREAL, RMS
C        DO J2=1,NATOMS/2
C           CALL TIPIO(P(3*(J2-1)+1),P(3*(J2-1)+2),P(3*(J2-1)+3),
C    1           P(3*(NATOMS/2+J2-1)+1),P(3*(NATOMS/2+J2-1)+2),P(3*(NATOMS/2+J2-1)+3),RBCOORDS)
C           WRITE(DUMPXYZUNIT+NP,'(A4,3F20.10)') 'O ',RBCOORDS(1),RBCOORDS(2),RBCOORDS(3)
C           WRITE(DUMPXYZUNIT+NP,'(A4,3F20.10)') 'H ',RBCOORDS(4),RBCOORDS(5),RBCOORDS(6)
C           WRITE(DUMPXYZUNIT+NP,'(A4,3F20.10)') 'H ',RBCOORDS(7),RBCOORDS(8),RBCOORDS(9)
C        ENDDO
C     ENDIF


      IF (COMPRESST.AND.(.NOT.QTEST)) THEN
         COMPON=.TRUE.
         IF (PATCHY) THEN
           CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,1.D1*GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP)
         ELSE
           CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP)
         END IF
         POTEL=EREAL
         IF (.NOT.CFLAG) WRITE(MYUNIT,'(A,I7,A)') ' WARNING - COMPRESSED QUENCH ',NQ(NP),'  DID NOT CONVERGE'
         WRITE(MYUNIT,'(A,I7,A,F20.10,A,I5,A,F15.7,A,I4,A,F12.2)') 'COMP Q ',NQ(NP),' ENERGY=',
     1              POTEL,' STEPS=',ITER,' RMS FORCE=',RMS
      ENDIF
      COMPON=.FALSE.


10    IF (PERMOPT) THEN ! LB415
         !IF ( NQ(NP) .EQ. 1) THEN
         IF (DUMPT) THEN
            WRITE(DUMPXYZUNIT+NP,'(I6)') NDUMMY
            WRITE(DUMPXYZUNIT+NP,'(A,I6)') 'QUENCH> INITIAL POINTS BEFORE QUENCH ',NQ(NP)
            WRITE(DUMPXYZUNIT+NP,'(A,3G20.10)') ('LA ',P(3*(J2-1)+1),P(3*(J2-1)+2),P(3*(J2-1)+3),J2=1,NATOMS)
         ENDIF
         CALL POTENTIAL(P,GRAD,EREAL,.FALSE.,.FALSE.)
         CFLAG=.TRUE.
!        ITER=1
!        RMS=0.0D0
         RMS=CSMRMS
         ITER=CSMIT
         !ELSE
         !   CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP) ! MINIMIZE STRUCTURE
         !   WRITE(*,*) 'PERMDIST MYLBFGS', EREAL, ITER, RMS
         !   POTEL=EREAL
         !   IF (.NOT.CFLAG) WRITE(MYUNIT,'(A,I7,A)') 'WARNING - QUENCH ',NQ(NP),'  DID NOT CONVERGE'
         !   DO II=1,NSAVE
         !      IF ( II .GE. NQ(NP) ) EXIT ! THERE'S NO NEED TO CHECK FURTHER, THERE'S NOTHING
         !      CALL MINPERMDIST(P,QMINP(II,:),NATOMS,DEBUG,BOXLX,BOXLY,BOXLZ,PERIODIC,TWOD,DUMMY,DIST2,RIGID,RMAT)
         !      WRITE(*,*) DUMMY, 'DUMMY',II
         !      IF (DUMMY .LT. 0.5D0) THEN
         !         !DO NOT ACCEPT THIS QUENCH
         !         WRITE(MYUNIT,*) 'THIS QUENCH ENDED IN A KNOWN MINIMUM. IT WON`T BE COUNTED.'
         !         RETURN
         !      ENDIF
         !   ENDDO
         !ENDIF 
      ELSEIF (MODEL1T) THEN
         CALL MODEL1(P,GRAD,EREAL,QE,QX)
         EREAL=QE
         CFLAG=.TRUE.
         ITER=1
         RMS=0.0D0
         P(1)=QX
      ELSE IF (DL_POLY) THEN
C
C  NEED TO MAKE DL_POLY INPUT FILE FOR CURRENT COORDINATES.
C
         OPEN (UNIT=91,FILE='CONFIG',STATUS='OLD')
         OPEN (UNIT=92,FILE='CONFIG',STATUS='UNKNOWN')
         READ(91,'(A80)') DSTRING
         WRITE(92,'(A80)') DSTRING
         READ(91,'(A80)') DSTRING
         WRITE(92,'(A80)') DSTRING
         DO J1=1,NATOMS
            READ(91,'(A80)') DSTRING
            WRITE(92,'(A80)') DSTRING
            READ(91,'(A80)') DSTRING
            WRITE(92,'(3G20.10)') P(3*(J1-1)+1),P(3*(J1-1)+2),P(3*(J1-1)+3)
            READ(91,'(A80)') DSTRING
            WRITE(92,'(A80)') DSTRING
            READ(91,'(A80)') DSTRING
            WRITE(92,'(A80)') DSTRING
         ENDDO
         CLOSE(91)
         CLOSE(92)
         CALL SYSTEM('CP CONFIG CONFIG.OLD; CP CONFIG CONFIG')
         CALL SYSTEM('DLPOLY.X > OUTPUT.DL_POLY ; TAIL -9 STATIS > ENERGY')
         OPEN (UNIT=91,FILE='ENERGY',STATUS='OLD')
         READ(91,*) EREAL
         WRITE(MYUNIT,'(A,G20.10)') 'ENERGY=',EREAL
         CLOSE(91)
         OPEN(UNIT=91,FILE='REVCON',STATUS='OLD')
         READ(91,'(A1)') DUMMY
         READ(91,'(A1)') DUMMY
         NATOMS=0
13       READ(91,'(A1)',END=14) DUMMY
         NATOMS=NATOMS+1
         READ(91,*) P(3*(NATOMS-1)+1),P(3*(NATOMS-1)+2),P(3*(NATOMS-1)+3)
         READ(91,'(A1)') DUMMY
         READ(91,'(A1)') DUMMY
C        WRITE(MYUNIT,'(3G20.10)') P(3*(NATOMS-1)+1),P(3*(NATOMS-1)+2),P(3*(NATOMS-1)+3)
         GOTO 13
14       CONTINUE
         CLOSE(91)
         CFLAG=.TRUE.
C
C  READ THE COORDINATES OF THE MINIMISED GEOMETRY INTO VECTOR P.
C
C     ELSE IF (BFGS .AND.(.NOT.QTEST)) THEN
      ELSE IF (BFGS) THEN
C        CALL CGMIN(100,P,CFLAG,ITER,EREAL,NP)
         CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,100,ITER,.TRUE.,NP)
         CALL DFPMIN(MAXIT,P,3*NATOMS,GMAX,ITER,EREAL,CFLAG)
      ELSEIF (TNT) THEN
C        CALL CGMIN(100,P,CFLAG,ITER,EREAL,NP)
         CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,100,ITER,.TRUE.,NP)
          WRITE(MYUNIT, '(A)') 'SUBROUTINE TN DOES NOT COMPILE WITH NAG/PG'
         STOP
C        CALL TN(IFLAG,3*NATOMS,P,EREAL,GRAD,WORK,60*NATOMS,GMAX,ITER,MAXIT,CFLAG,DEBUG)
      ELSEIF (CONJG) THEN
         CALL CGMIN(MAXIT,P,CFLAG,ITER,EREAL,NP)
    ! 
! COMPUTE QUANTUM ENERGY WITH VARIATION GAUSSIAN WAVEPACKET.
! COORDS ARE SCALED BY VGW LJ SIGMA (LJSIGMA) INPUTED WITH VGW PARAMS.
! COORDS ARE THEN SCALED BACK TO UNIT SIGMA.
! 
      ELSEIF (VGW) THEN    
        IF(QTEST) THEN              
          CALL VGWQUENCH(P,EREAL,CFLAG)
          ELSE
            CALL VGWQUENCHSP(P,EREAL,CFLAG)
        ENDIF 

      ELSEIF (MYSDT) THEN
         CALL MYSD(MAXIT,P,CFLAG,ITER,EREAL)
      ELSEIF (RKMIN) THEN
         CALL ODESD(MAXIT,P,CFLAG,ITER,EREAL,NP)
      ELSEIF (BSMIN) THEN
         CALL ODESD(MAXIT,P,CFLAG,ITER,EREAL,NP)
      ELSE
C        CALL CGMIN(5,P,CFLAG,ITER,EREAL,NP)
         IF (CHRMMT.AND.INTMINT) THEN
            CALL MYLBFGS(NINTS,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP)
         ELSE IF (THOMSONT) THEN
            TMPCOORDS(1:3*NATOMS)=COORDS(1:3*NATOMS,NP)
            CALL THOMSONCTOANG(TMPCOORDS,P,NATOMS)
            CALL MYLBFGS(2*NATOMS,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP)
            CALL THOMSONANGTOC(P,NATOMS)

!         ELSE IF(PYBINARYT) THEN
!! SF344> TRYING OUT SOME SORT OF SYSTEMATIC PARAMETER CHANGE TO PREVENT PARTICLES FROM DISSOCIATING:
!! FIRST DECREASE REPULSIVE EPSILON VALUES, CONVERGE, THEN GRADUALLY INCREASE THEM
!           EPSSAVE(:)=PEPSILON1(:)
!          IF(.NOT.QTEST) THEN
!           WRITE(MYUNIT,*) 'FIRST ITERATION: DECREASING EPSILON_REP VALUES BY A FACTOR OF 10000' 
!           PEPSILON1(:)=PEPSILON1(:)/10000.0D0
!            CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP)
!           WRITE(MYUNIT,*) 'SECOND ITERATION: INCREASING EPSILON_REP VALUES BY A FACTOR OF 100' 
!           PEPSILON1(:)=PEPSILON1(:)*100.0D0
!            CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP)
!            WRITE(MYUNIT,*) 'THIRD ITERATION: INCREASING EPSILON_REP VALUES BY A FACTOR OF 100' 
!           PEPSILON1(:)=PEPSILON1(:)*100.0D0
!            CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP)
!          END IF
         ELSE
            CALL MYLBFGS(NOPT,MUPDATE,P,.FALSE.,GMAX,CFLAG,EREAL,MAXIT,ITER,.TRUE.,NP)
         ENDIF
         IF (EVAPREJECT) RETURN
      ENDIF
      POTEL=EREAL

      IF (CFLAG) QDONE=1
      IF (.NOT.CFLAG) THEN
         IF (QTEST) THEN
            WRITE(MYUNIT,'(A,I6,A)') 'WARNING - FINAL QUENCH ',NQ(NP),'  DID NOT CONVERGE'
         ELSE
            IF (NPAR.GT.1) THEN
               WRITE(MYUNIT,'(A,I7,A)') 'WARNING - QUENCH ',NQ(NP),'  DID NOT CONVERGE'
            ELSE
               WRITE(MYUNIT,'(A,I7,A)') 'WARNING - QUENCH ',NQ(NP),'  DID NOT CONVERGE'
            ENDIF
         ENDIF
      ENDIF

      CALL MYCPU_TIME(TIME)

      RES=.FALSE.
      IF (TABOOT.AND.(.NOT.QTEST).AND.(.NOT.RENORM)) THEN
         CALL TABOO(EREAL,POTEL,P,NP,RES)
         IF (RES) GOTO 10
      ENDIF

C     PRINT*,'TABOO LISTS:'
C     DO J1=1,NPAR
C        PRINT*,'PARALLEL RUN ',J1
C        WRITE(*,'(6F15.7)') (ESAVE(J2,J1),J2=1,NT(J1))
C     ENDDO
C     PRINT*,'INERTIA LISTS:'
C     DO J1=1,NPAR
C        PRINT*,'PARALLEL RUN ',J1
C        WRITE(MYUNIT,'(6F15.7)') (XINSAVE(J2,J1),J2=1,NT(J1))
C     ENDDO

      IF (SAVEQ) CALL GSAVEIT(EREAL,P,NP)
!     IF (QDONE.EQ.0) THEN
!        PRINT '(A)','WARNING QUENCH DID NOT CONVERGE FROM STARTING COODINATES:'
!        WRITE(MYUNIT,'(3G20.10)') (COORDS(J1,NP),J1=1,3*NATOMS)
!     ENDIF
C
C  IF EPSSPHERE IS NON-ZERO WE ARE PRESUMABLY DOING A CALCULATION OF THE 
C  ENERGY DENSITY OF LOCAL MINIMA. WE NEED TO KNOW THE MINIMUM DISTANCE
C  BETWEEN THE STARTING POINT AND THE QUENCHED MINIMA.
C
      IF ((EPSSPHERE.NE.0.0D0).OR.BSWL) THEN
         DO J1=1,3*NATOMS
            DUM(J1)=COORDS(J1,NP)
         ENDDO
C
C  DUM IS RETURNED IN THE CLOSEST ORIENTATION TO P; P SHOULD NOT CHANGE.
C  THIS IS NEARLY THE SAME MIND AS OPTIM! TO EXECUTE A RANDOM WALK WE MUST TAKE 
C  ANOTHER STEP AND MINIMISE UNTIL THE DISTANCE BETWEEN THE STARTING POINT
C  AND THE QUENCH MINIMUM IS LESS THAN EPSSPHERE.
C
!        CALL MINDGMIN(P,DUM,NATOMS,DISTMIN,PERIODIC,TWOD)
         CALL NEWMINDIST(P,DUM,NATOMS,DISTMIN,PERIODIC,TWOD,'AX    ',.FALSE.,RIGID,DEBUG,RMAT)
      ENDIF
C
C  DEAL WITH EPSSPHERE SAMPLING.
C
      IF (EPSSPHERE.NE.0.0D0) THEN
         IF ((DISTMIN.GT.EPSSPHERE).OR.(ABS(EREAL-EPREV(NP)).LE.ECONV)) THEN
            WRITE(MYUNIT,'(A,F12.5,A,4F14.5)') 'STEP ',STEP(NP),' EREAL, EPREV, DISTMIN, EPSSPHERE=',
     1                                     EREAL, EPREV(NP), DISTMIN, EPSSPHERE
            DO J1=1,3*NATOMS
               COORDS(J1,NP)=COORDSO(J1,NP)
            ENDDO
            CALL TAKESTEP(NP)
             WRITE(MYUNIT,'(A,G20.10)' ) 'RESEEDING STEP, MAXIMUM DISPLACEMENT RESET TO ',STEP(NP)
            GOTO 11
         ELSE
            WRITE(MYUNIT,'(A,2F20.10)') 'VALID STEP, DISTMIN, EPSSPHERE=',DISTMIN, EPSSPHERE
         ENDIF
      ENDIF
C
C  IF WE ARE PROVIDED WITH TARGET MINIMUM COORDINATES IN FILE COORDS.TARGET THEN
C  CALCULATE THE MINIMUM DISTANCES. MAY BE USEFUL FOR ALGORITHM DEVELOPMENT.
C  IF WE GET CLOSE, WE DON;T WANT TO ESCAPE WITHOUT A HIT!
C
!     IF (ALLOCATED(TCOORDS)) THEN
!        DO J1=1,NTARGETS
!           TMPCOORDS(1:3*NATOMS)=TCOORDS(J1,1:3*NATOMS)
!           CALL MINPERMDIST(P,TMPCOORDS,NATOMS,DEBUG,BOXLX,BOXLY,BOXLZ,PERIODIC,TWOD,DUMMY,DIST2,RIGID)
!           WRITE(MYUNIT, '(A,I5,A,F15.3,A,F15.3,A,F20.10)') 'FOR TARGET STRUCTURE ',J1,' DIST=',DUMMY,' DIST2=',DIST2,' V=',POTEL
!        ENDDO
!        DO J1=1,MIN(NMSBSAVE,MAXSAVE)
!           TMPCOORDS(1:3*NATOMS)=MSBCOORDS(1:3*NATOMS,J1)
!           CALL MINPERMDIST(P,TMPCOORDS,NATOMS,DEBUG,BOXLX,BOXLY,BOXLZ,PERIODIC,TWOD,DUMMY,DIST2,RIGID)
!           PRINT '(A,I5,A,F15.3,A,F15.3,A,F20.10)','FOR TABOO  STRUCTURE ',J1,' DIST=',DUMMY,' DIST2=',DIST2,' V=',POTEL
!        ENDDO
!     ENDIF
C
C  NORESET TRUE DOES NOT SET THE CONFIGURATION POINT TO THE QUENCH GEOMETRY
C  A RELAXED FROZEN CORE DOES NOT GET SAVED, BUT THE LOWEST MINIMA ARE SAVED
C  BY GSAVEIT.
C
      IF (.NOT.NORESET) THEN
         DO J1=1,3*(NATOMS-NSEED)
            COORDS(J1,NP)=P(J1)
         ENDDO
         DO J1=1,NATOMS
            VAT(J1,NP)=VT(J1)
         ENDDO
      ENDIF

      IF (Q4T) CALL ORDERQ4(NATOMS,P,QFINISH)
C
C  CALLING CENTRE HERE WITHOUT AN EVAPORATION CHECK CAN PUT PARTICLES
C  OUTSIDE THE CONTAINER, AND MAKE A VALID STEP IN TAKESTEP IMPOSSIBLE.
C
C     PRINT*,'CALLING CENTRE FROM QUENCH'
C     IF ((.NOT.FIELDT).AND.(.NOT.SEEDT).AND.CENT) CALL CENTRE2(COORDS(1:3*NATOMS,NP))

      IF (DUMPT) THEN
         IF (ARNO) THEN
            WRITE(DUMPXYZUNIT+NP,'(I4)') NATOMS+2
            WRITE(DUMPXYZUNIT+NP,70) NP,NQ(NP),EREAL,RMS
            WRITE(DUMPXYZUNIT+NP,'(A,F20.10)') 'N 0.0 0.0 ', 0.577D0
            WRITE(DUMPXYZUNIT+NP,'(A,F20.10)') 'O 0.0 0.0 ',-0.577D0
            IF (NS.NE.0) WRITE(DUMPXYZUNIT+NP,65) (P(I),I=1,3*(NATOMS-NS))
65          FORMAT('AR ',3F20.10)
         ELSE IF (TIP) THEN
            WRITE(DUMPVUNIT-NP,'(1X,F20.10,E20.10)') EREAL, POTEL
            WRITE(DUMPXYZUNIT+NP,'(I6)') (NATOMS/2)*3
            WRITE(DUMPXYZUNIT+NP,70) NP,NQ(NP), EREAL, RMS
            DO J2=1,NATOMS/2
               CALL TIPIO(P(3*(J2-1)+1),P(3*(J2-1)+2),P(3*(J2-1)+3),
     1              P(3*(NATOMS/2+J2-1)+1),P(3*(NATOMS/2+J2-1)+2),P(3*(NATOMS/2+J2-1)+3),RBCOORDS)
               WRITE(DUMPXYZUNIT+NP,'(A4,3F20.10)') 'O ',RBCOORDS(1),RBCOORDS(2),RBCOORDS(3)
               WRITE(DUMPXYZUNIT+NP,'(A4,3F20.10)') 'H ',RBCOORDS(4),RBCOORDS(5),RBCOORDS(6)
               WRITE(DUMPXYZUNIT+NP,'(A4,3F20.10)') 'H ',RBCOORDS(7),RBCOORDS(8),RBCOORDS(9)
            ENDDO
         ELSE IF (CHRMMT) THEN
            CALL CHARMMDUMP3(P)
            CALL CHARMMDUMP2(P,DUMPXYZUNIT+NP) ! XYZ
         ELSEIF (NCORE(NP).GT.0) THEN
            WRITE(DUMPVUNIT-NP,'(1X,F20.10,E20.10)') EREAL, POTEL
            WRITE(DUMPXYZUNIT+NP,'(I4)') NATOMS
            WRITE(DUMPXYZUNIT+NP,70) NQ(NP), EREAL, RMS
C           WRITE(DUMPXYZUNIT+NP,80) ('LA ',P(3*(I-1)+1),P(3*(I-1)+2),P(3*(I-1)+3),I=1,NCORE(NP))
C           WRITE(DUMPXYZUNIT+NP,80) ('LB',P(3*(I-1)+1),P(3*(I-1)+2),P(3*(I-1)+3),I=NCORE(NP)+1,NATOMS)
            WRITE(DUMPXYZUNIT+NP,80) ('LB',P(3*(I-1)+1),P(3*(I-1)+2),P(3*(I-1)+3),I=1,NATOMS-NCORE(NP))
            IF (NCORE(NP).GT.0) WRITE(DUMPXYZUNIT+NP,80) 
     &                     ('LA ',P(3*(I-1)+1),P(3*(I-1)+2),P(3*(I-1)+3),I=NATOMS-NCORE(NP)+1,NATOMS)
         ELSE
            WRITE(DUMPVUNIT-NP,'(1X,F20.10,E20.10)') EREAL, POTEL
            WRITE(DUMPXYZUNIT+NP,'(I4)') NATOMS
            WRITE(DUMPXYZUNIT+NP,70) NQ(NP), EREAL, RMS
70          FORMAT(1X,'QUENCH NUMBER ',I6,' FINAL ENERGY=',F20.10,' RMS FORCE=',E20.10)
            WRITE(DUMPXYZUNIT+NP,80) ('LA ',P(3*(I-1)+1),P(3*(I-1)+2),P(3*(I-1)+3),I=1,NATOMS-NS)
            IF (NS.NE.0) WRITE(DUMPXYZUNIT+NP,80) ('LB',P(3*(I-1)+1),P(3*(I-1)+2),P(3*(I-1)+3),I=NATOMS-NS+1,NATOMS)
80          FORMAT(A2,3F20.10)
         ENDIF
      ENDIF

      IF (SQUEEZET) THEN
         IF ((EREAL.GT.0.0D0).AND.(SQUEEZED.LT.1.0D0)) THEN
            SQUEEZED=2.0D0-SQUEEZED
            NSQSTEPS=NQ(NP)
         ELSE
            NSQSTEPS=100000
         ENDIF
         DO J1=1,3*NVEC
            VEC(J1)=VEC(J1)*SQUEEZED
         ENDDO
         IF (NQ(NP).GT.2*NSQSTEPS) SQUEEZET=.FALSE.
      ENDIF
    
      IF ((NQ(NP).GE.NSSTOP).AND.SEEDT) THEN
         SEEDT=.FALSE.
         NSEED=0
         WRITE(MYUNIT,'(I6,A,G20.10)') NSSTOP,' QUENCHES COMPLETED, SETTING COORDINATES TO THE LOWEST MINIMUM, E=',QMIN(1)
         DO J1=1,3*NATOMS
            COORDS(J1,NP)=QMINP(1,J1)
         ENDDO
         POTEL=QMIN(1)
         EREAL=POTEL
      ENDIF

      RETURN
      END
