C   GMIN: A PROGRAM FOR FINDING GLOBAL MINIMA
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF GMIN.
C
C   GMIN IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   GMIN IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C
C THE SUBROUTINE LINMIN TAKES THE 3*N DIMENSIONAL POINT P AND THE 3*N DIMENSIO-
C NAL DIRECTION GRAD, MOVES AND RESETS P TO WHERE THE FUNCTION FUNC(P) TAKES ON
C A MINIMUM IN THE DIRECTION GRAD FROM P, AND REPLACES GRAD BY THE ACTUAL VECTOR
C DISPLACEMENT THAT P WAS MOVED.
C THE VALUE OF FUNC AT THE RETURNED LOCATION P IS RETURNED AS FRET.
C
C
      SUBROUTINE LINMIN(ITER,P,GRAD,N,FRET)
      USE COMMONS
      USE F1COM
      IMPLICIT DOUBLE PRECISION (A-H,P-Z)
      INTEGER ITER
      DOUBLE PRECISION F1DIM
      LOGICAL STUCK, FTEST
      COMMON /ST/ STUCK
      COMMON /FAIL/ FTEST
      EXTERNAL F1DIM
      DIMENSION GRAD(3*NATOMS),P(3*NATOMS)
      SAVE BX

      NCOM=3*N
      DO J=1,3*N
        PCOM(J)=P(J)
        XICOM(J)=GRAD(J)
        DUMMY=DUMMY+GRAD(J)**2
      ENDDO

      IF (STUCK) BX=1.0D0

      NCOUNT=0
      AX=0.0D0
C
C  WE ALREADY KNOW FA!
C
C     FA=F1DIM(AX)
C
      FA=FRET

      IF (FTEST) RETURN

      IF (BX.EQ.0.0D0) BX=1.0D0
C     BX=MIN(DABS(BX),STEP(1)/(DSQRT(3.0D0*NATOMS)*RMS))
      BX=MIN(DABS(BX),0.1D0/(DSQRT(3.0D0*NATOMS)*RMS))

C     IF ((BX.EQ.0.0D0).OR.(ITER.EQ.1)) BX=1.0D0/(SQRT(3.0D0*NATOMS)*RMS)

15    FB=F1DIM(BX)
C     PRINT*,'AX,BX,FA,FB=',AX,BX,FA,FB
      IF (FTEST) RETURN
      IF ((FB.GT.FA+ECONV).AND.(NCOUNT.LT.10)) THEN
         CX=BX
         FC=FB
         BX=BX/10.0D0
         NCOUNT=NCOUNT+1
         GOTO 15
      ENDIF

      EMIN1=FB-FA
C     WRITE(*,'(A,E20.10)') 'INITIAL ENERGY LOWERING IN LINMIN=',EMIN1
      DUMMY=FB

C
C  IF NCOUNT > 0 WE HAVE ALREADY BRACKETED THE MINIMUM!
C
      IF ((NCOUNT.EQ.0).OR.(EMIN1.GE.0.0D0)) THEN
         CALL MNBRAK(AX,BX,CX,FA,FB,FC,F1DIM)
C        WRITE(*,'(A,6F15.7)') 'AFTER MNBRACK AX,BX,CX,FA,FB,FC=',AX,BX,CX,FA,FB,FC
         EMIN2=FB-DUMMY
C        WRITE(*,'(A,E20.10)')    'ENERGY LOWERING BY MNBRAK=        ',EMIN2
      ENDIF
      DUMMY=FB

      IF (DBRENTT) THEN
         FRET=DBRENT(AX,BX,CX,TOLB,XMIN)
         EMIN3=FRET-DUMMY
C        WRITE(*,'(A,E20.10)') 'ENERGY LOWERING BY DBRENT=        ',EMIN3
      ELSE
         FRET=BRENT(AX,BX,CX,TOLB,XMIN)
         EMIN3=FRET-DUMMY
C        WRITE(*,'(A,E20.10)') 'ENERGY LOWERING BY BRENT=         ',EMIN3
      ENDIF

      DO 20 J=1,3*N
        GRAD(J)=XMIN*GRAD(J)
        P(J)=P(J)+GRAD(J)
20    CONTINUE

      BX=BX*10.0D0

      RETURN
      END
