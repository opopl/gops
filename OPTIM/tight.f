C   OPTIM: A PROGRAM FOR OPTIMIZING GEOMETRIES AND CALCULATING REACTION PATHWAYS
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C   THIS PROGRAM IS SUPPOSED TO CALCULATE THE ENERGY, 
C   FIRST DERIVATIVES AND SECOND DERIVATIVES FOR SILICON 
C   CLUSTERS USING A TIGHT BINDING (TB) APPROXIMATION.  
C   THIS WILL THEN BE USED IN CONJUNCTION WITH OPTIM,
C   AS IT IS NOW KNOWN, TO SOLVE THE PROBLEMS OF THE UNIVERSE
C   AND IN PARTICULAR THOSE OF THE SILICON CLUSTER WORLD.
C   THE PARAMETERS ETC..ARE TAKEN FROM PRB 47 12754 1993
C   AND PRB 50 5645 1994 IN CASE YOU WERE WONDERING.

C   A SUBSEQUENT ADAPTATION IS TO USE MENON AND SUBBASWAMY S
C   TRANSFERABLE POTENTIAL (PRB 50 11577 1994) EITHER INCLUDING
C   OR NOT INCLUDING THE COORDINATION ENERGY DEPENDENT TERM.

C   THINGS TO NOTE ABOUT THIS VERSION OF THE TRANSFERABLE POTENTIAL:
C   GETS THE SAME ENERGY AS M+S, COMPATIBLE WITH AB INITIO
C   TO INCLUDE UBOND AND BOND1ST WILL NEED TO REACTIVATE THOSE LINES PLUS
C   NB VARIABLE IN SILICONT.F,
C   BONDAGE IN DIST.H AND IN COMMON BLOCK
C   B1ST AND BOND1ST IN DERIVS1T.F

C   THIS IS THE UPDATED TRANSFERABLE VERSION FROM M+S S APRIL 1997 PRB PAPER
C   IT MAKES S2 AS IN THE ORIGINAL POTENTIAL AND K(R) AN EXPONENTIAL
C   DEPENDENCE.
C   STILL NO BOND COUNTING TERM.

      SUBROUTINE TIGHTE(N,XS,DERIV1ST,ENERGY,GTEST,BOXLX,BOXLY,BOXLZ)
      USE KEY
      IMPLICIT NONE

C   SOME OF THE DISTANCES ETC...THAT I WILL NEED IN COMMON BLOCKS FOR
C   DEIVATIVES PROGRAM (DERIVS.1 ETC...)

      INTEGER N
C      INTEGER COUNTER
      DOUBLE PRECISION R(N,N),BOXLX,BOXLY,BOXLZ,
     1                 DIRCOS(N,N,3),DIAG(4*N),
     2                 HORIG(4*N,4*N),
     3                 DERIV1ST(3*N),SVTYPE(8*N,N),
     4                 S2(N,N),LAMBDA(N,N),
     5                 REPULSE(N,N), BONDAGE(N,N),
     6                 KAPPANEW(N,N)
C      DOUBLE PRECISION SORIG(4*N,4*N),UBOND,UREP
C     COMMON /STANDARD/ N,COUNTER
C     COMMON /MISC/ R,DIRCOS,S2,LAMBDA,SVTYPE,HORIG,DIAG,REPULSE,BONDAGE,KAPPANEW
C     COMMON /MISC/ R,DIRCOS,LAMBDA,HORIG,DIAG,REPULSE,BONDAGE,KAPPANEW
C     COMMON /WORK/ SVTYPE, S2
C      COMMON /TEST/ HORIG,SORIG,DIAG,UBOND,UREP
C   SHOULD HAVE SEPARATE COMMON BLOCKS FOR INTEGERS AND DOUBLE
C   PRECISION THINGAMIES.

      LOGICAL GTEST
      INTEGER I, J, K, AI, AJ, NDIM, NMAX, I2, J2, K2, AI2, INFO, LWORK,
     1        MX(N,N), MY(N,N), MZ(N,N), J1
      DOUBLE PRECISION DIST(N,N),ZETA,WORK(24*N),
     1                 S(4*N,4*N),ENERGY,XS(3*N),COHESIVE,
     2                 H(4*N,4*N),D1,D2,D3,VECTOR(3)
C    5                 VECT(4),EPS(4),NB
      DOUBLE PRECISION UREP
      DOUBLE PRECISION CHI,BETA,D,A,B,RC,DELTA,KAPPA,SIGMA,
     2                 ALPHA,VECT(4),EPS(4),EPSS,EPSP,FUDGE
C     1                 VSSSIG,VSPSIG,VPPSIG,VPPPI

      PARAMETER (CHI=0.41D0, D=2.36D0, A=0.08D0,
     1    B=-1.4D0, RC=3.5D0, DELTA=0.1D0, SIGMA=2.5D0,
     3    ALPHA = 1.62D0, KAPPA=1.7D0, BETA=4.0D0*ALPHA,
     4    EPSS=-13.55D0, EPSP=-6.52D0, FUDGE=1.1D0)
      DATA VECT(1), VECT(2), VECT(3), VECT(4)/ -2.37D0,2.52D0,3.32D0,-1.07D0 /
      DATA EPS(1), EPS(2), EPS(3), EPS(4)/ -27.1D0,-20.07D0,-13.04D0,-13.04D0 /

      LWORK=24*N


C
C************ START PERIODIC BOUNDARY CONDITIONS **************************
C  DEAL WITH ATOMS LEAVING THE BOX:
C
      IF (BULKT) THEN
         IF ((.NOT.FIXIMAGE).AND.(.NOT.NORESET)) THEN
C           PRINT*,'POINTS BEFORE:'
C           WRITE(*,'(3F15.7)') (XS(J1),J1=1,3*N)
            DO J1=1,N
               J2=3*(J1-1)
               XS(J2+1)=XS(J2+1) - BOXLX*DNINT(XS(J2+1)/BOXLX)
               XS(J2+2)=XS(J2+2) - BOXLY*DNINT(XS(J2+2)/BOXLY)
               XS(J2+3)=XS(J2+3) - BOXLZ*DNINT(XS(J2+3)/BOXLZ)
            ENDDO
C           PRINT*,'POINTS AFTER:'
C           WRITE(*,'(3F15.7)') (XS(J1),J1=1,3*N)
         ENDIF
C
C  CALCULATION OF CONNECTING VECTORS; TO IMPLEMENT THE PERIODIC
C  BOUNDARY CONDITIONS, THE SHORTEST VECTOR BETWEEN TWO ATOMS IS USED:
C
         DO I=1,N
            I2=3*(I-1)
            R(I,I)=0.0D0
            DO J=I+1,N
               J2=3*(J-1)
               VECTOR(1)=XS(J2+1)-XS(I2+1)
               VECTOR(2)=XS(J2+2)-XS(I2+2)
               VECTOR(3)=XS(J2+3)-XS(I2+3)
               IF (.NOT.FIXIMAGE) THEN
                  MX(J,I)=NINT(VECTOR(1)/BOXLX)
                  MY(J,I)=NINT(VECTOR(2)/BOXLY)
                  MZ(J,I)=NINT(VECTOR(3)/BOXLZ)
               ENDIF 
               VECTOR(1)= VECTOR(1) - BOXLX * MX(J,I)
               VECTOR(2)= VECTOR(2) - BOXLY * MY(J,I)
               VECTOR(3)= VECTOR(3) - BOXLZ * MZ(J,I)
               DIST(I,J)=VECTOR(1)**2+VECTOR(2)**2+VECTOR(3)**2
               R(I,J)=SQRT(DIST(I,J))
               R(J,I)=R(I,J)
               DO K=1,3
                  DIRCOS(I,J,K)=VECTOR(K)/R(I,J)
                  DIRCOS(J,I,K)=-DIRCOS(I,J,K)
               ENDDO
C              WRITE(*,'(2I4,3F15.7)') (I,J,(DIRCOS(I,J,K),K=1,3))
            ENDDO
            DO K=1,3
               DIRCOS(I,I,K)=0.0D0
            ENDDO
         ENDDO
C************ END PERIODIC BOUNDARY CONDITIONS ****************************
      ELSE

C   CALCULATE DISTANCE MATRIX

      DO I=1,N
       I2=3*(I-1)
       R(I,I)=0.0D0
          DO J=I+1,N
            J2=3*(J-1)
            DIST(I,J)=(XS(I2+1)-XS(J2+1))**2+(XS(I2+2)-XS(J2+2))**2
     1                +(XS(I2+3)-XS(J2+3))**2
             R(I,J)=SQRT(DIST(I,J))
             R(J,I)=R(I,J)

C   NOW THE DIRECTION COSINES
C   WHICH INCIDENTALLY ARE THE PROJECTIONS OF A UNIT VECTOR ONTO 
C   THE AXES AND NOT THE COSINES.
C   NOTE WE HAVE NOT CALCULATED DIRCOS(I,I)

            DO K=1,3
               DIRCOS(I,J,K)=(XS(J2+K)-XS(I2+K))/R(I,J)
               DIRCOS(J,I,K)=-DIRCOS(I,J,K)
            END DO

         END DO
      END DO 
      ENDIF

C   CALCULATE REPULSIVE FREE ENERGY
C   CHI(R) IS THE REPULSIVE PAIR POTENTIAL, THE SUM OF WHICH IS 
C   EQUAL TO THE REPULSIVE ENERGY (UREP) IN EV.
C   BETA IS 4/R_0, WHERE R_0 IS ONE HALF THE DIMER BOND LENGTH.
C   D IS THE BOND LENGTH FOR THE CRYSTAL IN ANGSTROMS.

      UREP=0.0D0
      DO I=1,N
         DO J=I+1,N
             REPULSE(J,I)=CHI*DEXP(-BETA*(R(J,I)-D))
             UREP=UREP+REPULSE(J,I)
         END DO
      END DO 
C      WRITE(6,10) 'UREP=',UREP
C10    FORMAT(A8, F20.17)

C   CALCULATE AD HOC BOND COUNTING TERM UBOND IN EV.
C   THIS IS USING THE A AND B PARAMETERS DETERMINED USING THE PRB
C   50 5645 1994. IT IS JUST A CORRECTION TO THE COHESIVE ENERGY
C   FOR CLUSTERS OF DIFFERENT SIZES IN ORDER TO OBTAIN A GOOD AGREEMENT
C   WITH AB INITIO VALUES.
C   SUM IS OVER ALL BONDS.

C   TO ATTAIN SOMETHING LIKE THE VALUES IN PRB 50 11577 1994 THEN ENERGY
C   IS JUST MADE UP OF UREP AND ELECTRONIC ENERGY. IE. DOES NOT CONTAIN
C   UBOND.
C   RAMAKRISHNA AND BAHEL, JCP 104 9833 1996 USE M+S S TRANSFERABLE POTENTIAL
C   BUT ALSO INCLUDE BOND COUNTING TERM IN THEIR INVESTIGATION OF SI_12. NOT SURE 
C   HOW THIS AFFECTS THINGS...MAY TRY BOTH WAYS. 

C   NO BOND COUNTING TERM IN THIS VERSION

C      NB=0.0D0
C
C      DO I=1,N
C         DO J=I+1,N
C             BONDAGE(J,I)=DEXP((R(J,I)-RC)/DELTA)
C             NB=NB+1.0D0/(BONDAGE(J,I)+1.0D0)
C         END DO
C      END DO
C      UBOND=-DBLE(N)*(A*(NB/DBLE(N))+B)
C      WRITE(6,10) 'UBOND=',UBOND

C   CALCULATE ELECTRONIC ENERGY (ENERGY)
C   NOT SURE HOW THE HELL TO DO THIS BUT I LL SEE WHAT I COME UP WITH.
C   FIRST FIND THE H(I,J) MATRIX.
C   THE INTERACTION OF THE 3S AND 3P ATOMIC ORBITALS ON ONE ATOM
C   WITH THOSE ON ANOTHER ATOM LEADS TO 8 DIFFERENT INTERACTIONS
C   OBVIOUS RIGHT?  COS THERE ARE 8AOS INVOLVED.

C   UNRESOLVED FACT
C   STILL GOT TO INCLUDE THE FACT THAT ONLY THE NEAREST NEIGHBOUR
C   INTERACTIONS SHOULD BE INCLUDED...BUT I AM WORKING ON IT.
C   COULD BE THE REASON WHY M+S POTENTIAL IS NOT SO GOOD.
C   SOME POTENTIALS USE A DECAY FACTOR (KHAN AND BROUGHTON,
C   PRB 43 11754 1991)

C   UNRESOLVED FACT
C   SUPPOSE IT WOULD HELP IF I FOUND THE UNIVERSAL PARAMETERS 
C   I AM ASSUMING THAT THE ONES QUOTED IN PRB 50 12754 1993
C   ARE AT THE CRYSTAL BOND LENGTH (D0=2.35)
C   VECT(1) IS VSSSIG, 2 VSPSIG, 3 VPPSIG AND 4 VPPPI EVALUATED AT D0.
C   STILL DO NOT KNOW HOW M+S FOUND THESE VALUES
C   THUS, FOR EVERY ATOM THERE ARE 4 ATOMIC ORBITALS AND THE MATRICES
C   WILL BE (4N, 4N) IN SIZE.
C   THESE ARE NOW DEFINED BY A DATA LINE IN CONSTS.H
    
      ZETA=2.0D0*SQRT(3.0D0)
  
C   ONLY INCLUDE OVERLAP OR INTERACTION WITH DIFFERENT ATOMS HERE.
               
      DO I=1,N
         AI=4*(I-1)
         AI2=2*AI
         DO J=I+1,N
            AJ=4*(J-1)

C   TRANSFERABLE TB POTENTIAL INTRODUCES A DISTANCE POTENTIAL TO THE
C   NON-ORTHOGONALITY COEFFICIENT K (KAPPANEW)
            KAPPANEW(J,I)=KAPPA*DEXP(SIGMA*(R(I,J)-D)**2)

C   DEPENDENCE OF V ON DISTANCE BETWEEN ATOMS R(I,J)
C   SIMILARLY, S MUST SCALE WITH R(I,J)

            DO K=1,4
               SVTYPE(AI2+4+K,J)=VECT(K)*DEXP(-ALPHA*(R(I,J)-D))
               SVTYPE(AI2+K,J)=2.0D0*SVTYPE(AI2+4+K,J)/(KAPPANEW(J,I)*EPS(K))
            END DO

C   SET VARIABLE WITH NO ARGUMENTS EQUAL TO DIRCOS(I,J,K) 

            D1=DIRCOS(I,J,1)
            D2=DIRCOS(I,J,2)
            D3=DIRCOS(I,J,3)

C   CALCULATE THE OVERLAP MATRIX S(I,J), RELATED TO THESE PARAMETERS
C   BY THE SLATER-KOSTER SCHEME

            S((AI+1),(AJ+1))=SVTYPE(AI2+1,J)
            S((AI+1),(AJ+2))=D1*SVTYPE(AI2+2,J)
            S((AI+1),(AJ+3))=D2*SVTYPE(AI2+2,J)
            S((AI+1),(AJ+4))=D3*SVTYPE(AI2+2,J)

            S((AI+2),(AJ+1))=-S((AI+1),(AJ+2))
            S((AI+2),(AJ+2))=D1**2*SVTYPE(AI2+3,J)+(1.0D0-
     1                       D1**2)*SVTYPE(AI2+4,J)
            S((AI+2),(AJ+3))=D1*D2*(SVTYPE(AI2+3,J)
     1                       -SVTYPE(AI2+4,J))
            S((AI+2),(AJ+4))=D1*D3*(SVTYPE(AI2+3,J)
     1                       -SVTYPE(AI2+4,J))

            S((AI+3),(AJ+1))=-S((AI+1),(AJ+3))
            S((AI+3),(AJ+2))=S((AI+2),(AJ+3))
            S((AI+3),(AJ+3))=D2**2*SVTYPE(AI2+3,J)+(1.0D0-
     1                       D2**2)*SVTYPE(AI2+4,J)
            S((AI+3),(AJ+4))=D2*D3*(SVTYPE(AI2+3,J)
     1                       -SVTYPE(AI2+4,J))
            
            S((AI+4),(AJ+1))=-S((AI+1),(AJ+4))
            S((AI+4),(AJ+2))=S((AI+2),(AJ+4))
            S((AI+4),(AJ+3))=S((AI+3),(AJ+4))
            S((AI+4),(AJ+4))=D3**2*SVTYPE(AI2+3,J)+(1.0D0-
     1                       D3**2)*SVTYPE(AI2+4,J)
           
C   TRANSFERABLE POTENTIAL INTRODUCES THE DEPENDENCE OF S2 ON SVTYPE(4) REDUCING THE
C   VALUE OF CHI.
 
            S2(I,J)=(SVTYPE(AI2+1,J)-ZETA*SVTYPE(AI2+2,J)-3.0D0*
     1                        SVTYPE(AI2+3,J))/4.0D0

C   HAMILTONIAN IS FOUND USING THE SLATER-KOSTER SCHEME
C   AS SHOWN IN THEIR PAPER AND HARRISON S BOOK P.481
C   WHICH RELATES H TO THE PARAMETER V USING DIRECTION COSINES.
C   LAMBDA CHANGES FOR EACH I AND J. NOTICE ADDITIONAL
C   DEPENDENCE ON POSITION OF ATOMS THROUGH KAPPANEW
      
      LAMBDA(I,J)=1.0D0+1.0D0/KAPPANEW(J,I)-S2(I,J)**2

            H((AI+1),(AJ+1))=SVTYPE(AI2+5,J)*LAMBDA(I,J)
            H((AI+1),(AJ+2))=D1*SVTYPE(AI2+6,J)*LAMBDA(I,J)
            H((AI+1),(AJ+3))=D2*SVTYPE(AI2+6,J)*LAMBDA(I,J)
            H((AI+1),(AJ+4))=D3*SVTYPE(AI2+6,J)*LAMBDA(I,J)

            H((AI+2),(AJ+1))=-H((AI+1),(AJ+2))
            H((AI+2),(AJ+2))=(D1**2*SVTYPE(AI2+7,J)+(1.0D0-
     1           D1**2)*SVTYPE(AI2+8,J))*LAMBDA(I,J)
            H((AI+2),(AJ+3))=D1*D2*(SVTYPE(AI2+7,J)
     1           -SVTYPE(AI2+8,J))*LAMBDA(I,J)
            H((AI+2),(AJ+4))=D1*D3*(SVTYPE(AI2+7,J)
     1           -SVTYPE(AI2+8,J))*LAMBDA(I,J)
            
            H((AI+3),(AJ+1))=-H((AI+1),(AJ+3))
            H((AI+3),(AJ+2))=H((AI+2),(AJ+3))
            H((AI+3),(AJ+3))=(D2**2*SVTYPE(AI2+7,J)+(1.0D0-
     1           D2**2)*SVTYPE(AI2+8,J))*LAMBDA(I,J)
            H((AI+3),(AJ+4))=D2*D3*(SVTYPE(AI2+7,J)
     1           -SVTYPE(AI2+8,J))*LAMBDA(I,J)
            
            H((AI+4),(AJ+1))=-H((AI+1),(AJ+4))
            H((AI+4),(AJ+2))=H((AI+2),(AJ+4))
            H((AI+4),(AJ+3))=H((AI+3),(AJ+4))
            H((AI+4),(AJ+4))=(D3**2*SVTYPE(AI2+7,J)+(1.0D0-
     1           D3**2)*SVTYPE(AI2+8,J))*LAMBDA(I,J)


          END DO !OF J LOOP

C   INTERACTION/OVERLAP OF DIFFERENT AOS ON THE SAME ATOM
C   SINCE REQUIRE WHOLE OF S AND H MATRICES FOR DIAGONALISATION OF MATRIX ROUTINES
         
          DO K=1,4
           DO K2=K+1,4
             S((AI+K),(AI+K2))=0.0D0
             H((AI+K),(AI+K2))=0.0D0
           END DO
          END DO

C   INTERACTION OF SAME AO ON THE SAME ATOM

          H((AI+1),(AI+1))=EPSS
          H((AI+2),(AI+2))=EPSP
          H((AI+3),(AI+3))=EPSP
          H((AI+4),(AI+4))=EPSP

      END DO !END OF I

C   NOW WE HAVE TO MAKE SURE THE MATRIX S AND H ARE SYMMETRIC.
C   PERHAPS NOT: THE LAPACK ROUTINE TAKES 'U' IE. THE UPPER MATRIX
C   SIMILARLY HORIG IS ONLY USED IN J>I ROUTINES.      
C      WRITE(6,*) 'I,J,S(I,J)'
      DO I=1,4*N
          DO J=I+1,4*N
            HORIG(J,I)=H(I,J)
C            HORIG(I,J)=H(I,J)
          END DO

C   INTERACTION/OVERLAP OF THE SAME AO ON THE SAME ATOM
         S(I,I)=1.0D0

      END DO
      
      NDIM=4*N
      NMAX=4*N

      FTEST=.FALSE.

C   THIS CALLS THE LAPACK ROUTINE TO DIAGONALIZE THE MATRIX:
C   1 - SPECIFIES TYPE OF PROBLEM TO BE SOLVED
C   V - CALCULATE EIGENVALUES AND EIGENVECTORS
C   U - UPPER TRIANGLES OF NEXT TWO MATRICES ARE STORED
C   NDIM - ORDER OF NEXT TWO MATRICES
C   H - MATRIX OF EIGENVECTORS. LEADING NXN UPPER TRIANGLE PART OF H CONTAINS 
C       UPPER TRIANGLE PART OF H
C   NMAX - LEADING DIMENSION OF ARRAY H/S
C   S - CHOLESKY DECOMPOSTION
C   DIAG - EIGENVALUES IN ASCENDING ORDER
C   WORK - RETURNS OPTIMAL LWORK
C   LWORK - LENGTH OF ARRAY WORK
C   INFO - =0 SUCCESSFUL EXIT, OTHERWISE ERROR OF SOME KIND.

      CALL DSYGV( 1, 'V', 'U', NDIM, H, NMAX, S, NMAX, DIAG, WORK, LWORK, INFO )
C
      IF (DIAG(1).LT.DIAG(NDIM)) CALL EIGENSORT_VAL_ASC(DIAG,H,NDIM,NMAX)

      IF (INFO.NE.0) THEN
         FTEST=.TRUE.
         ENERGY=1.0D6
         PRINT*,'DSYGV FAILED - INFO=',INFO
         RETURN
      ENDIF

      ENERGY=0.0D0
      DO J=4*N,(2*N+1),-1
         ENERGY=ENERGY+DIAG(J)
      END DO

C   FOR SINGLE ATOM THERE SHOULD BE NO CONTRIBUTION FROM THE 
C   BOND COUNTING TERM      

      IF (N .EQ. 1) THEN
         ENERGY=2.0D0*ENERGY
      ELSE IF(BULKT) THEN
         ENERGY=UREP+2.0D0*ENERGY
      ELSE
C         ENERGY=UREP+UBOND+2.0D0*ENERGY
C   TO GET THE SAME RESULTS AS IN PRB 50 11577 1994 THEN DO NOT INCLUDE BOND COUNTING
C   TERM BUT DO INCLUDE N*1.
         ENERGY=UREP+2.0D0*ENERGY+FUDGE*DBLE(N)
         COHESIVE=(ENERGY-N*2.0D0*(EPSS+EPSP))/N
      END IF
C      WRITE(6,*) 'ENERGY=',ENERGY
C      WRITE(6,*) 'COHESIVE ENERGY=',COHESIVE

C   NOW CALL THE ALL NEW ORIGINALLY CRAFTED SUBROUTINE TO CALCULATE
C   THE FIRST DERIVATIVES.

      IF (GTEST) THEN
         CALL TIGHTG(N,DERIV1ST,H,R,DIRCOS,LAMBDA,HORIG,DIAG,REPULSE,BONDAGE,KAPPANEW,SVTYPE,S2)
      ELSE
         RETURN
      ENDIF

      RETURN
      END

C   THIS IS PHASE TWO WHERE WE CALCULATE THE FIRST DERIVATIVES
C   OF THE SILICON POTENTIAL CODED IN TB.SI.F. IT IS IN TIGHT
C   BINDING PARAMETERISED FORM.
C   OFF I GO...
C   THIS IS DERIVS1.F.JLOOP.BETTERISH IN THE RESRVES DIRECTORY
C   FOR THE RECORD

C   THIS IS THE IMPROVED TRANSFERABLE POTENTIAL APRIL 1997 PRB.
C   CHANGES TO S2 AND K(R) AND THE APPROPRIATE DERIVATIVES.

      SUBROUTINE TIGHTG(N,DERIV1ST,EIGVEC,R,DIRCOS,LAMBDA,HORIG,DIAG,REPULSE,BONDAGE,KAPPANEW,SVTYPE,S2)
      IMPLICIT NONE

      DOUBLE PRECISION CHI,BETA,D,A,B,RC,DELTA,KAPPA,SIGMA,
     2                 ALPHA,EPSS,EPSP,FUDGE
C    1                 VSSSIG,VSPSIG,VPPSIG,VPPPI

      PARAMETER (CHI=0.41D0, D=2.36D0, A=0.08D0,
     1    B=-1.4D0, RC=3.5D0, DELTA=0.1D0, SIGMA=2.5D0,
     3    ALPHA = 1.62D0, KAPPA=1.7D0, BETA=4.0D0*ALPHA,
     4    EPSS=-13.55D0, EPSP=-6.52D0, FUDGE=1.1D0)

      INTEGER N
C      INTEGER COUNTER
      DOUBLE PRECISION R(N,N),
     1                 DIRCOS(N,N,3),DIAG(4*N),
     2                 HORIG(4*N,4*N),
     3                 DERIV1ST(3*N),SVTYPE(8*N,N),
     4                 S2(N,N),LAMBDA(N,N),
     5                 REPULSE(N,N), BONDAGE(N,N),
     6                 KAPPANEW(N,N)
C      DOUBLE PRECISION SORIG(4*N,4*N),UBOND,UREP
C     COMMON /STANDARD/ N,COUNTER
C     COMMON /MISC/ R,DIRCOS,S2,LAMBDA,SVTYPE,HORIG,DIAG,REPULSE,BONDAGE,KAPPANEW
C     COMMON /MISC/ R,DIRCOS,LAMBDA,HORIG,DIAG,REPULSE,BONDAGE,KAPPANEW
C     COMMON /WORK/ SVTYPE, S2
C      COMMON /TEST/ HORIG,SORIG,DIAG,UBOND,UREP

      INTEGER I, J, K , AI, AJ, LEV, SV, ASV, NUM1, NUM2, 
     1        I2,J2
      DOUBLE PRECISION REP1ST(N,3), RR, D1, D2, D3,
     1                 ELEC1ST(N,3), DIFFH, E1, E2, AS1(2), DUMMY,
     2                 DIFFSV(2,4,4), SDC1, SDC2, SDC3, SQC1, SQC2, SQC3,
     3                 DIFFS2,R1ST(N,N),EIGVEC(4*N,4*N),
     4                 ALPHAADD(N,N),KAPSQ,DIFFK,AADD(2)
C    5                 B1ST(N,N),BOND1ST(N,3)
      DOUBLE PRECISION LMC(N,N),ALPHASUM1S(N,N),ALPHASUM2,SVSUB,
     1                 ALPHASUM1V(N,N),
     2                 SQDIRCOS(3*N,N),SUBDIRCOS(3*N,N),LONG(2)

C
C  TAKE THE TRANSPOSE OF EIGVEC - MAKES LOOPS MORE EFFICIENT
C
      DO J=1,4*N
         DO I=J+1,4*N
            DUMMY=EIGVEC(J,I)
            EIGVEC(J,I)=EIGVEC(I,J)
            EIGVEC(I,J)=DUMMY
         ENDDO
      ENDDO
C
C   CAN PUT ARRAYS INTO A BLOCK DATA FORMAT INSTEAD OF PARAMETER
C   SO CAN JUST PUT IN ONCE IN A FILE TO BE INCLUDED

C   CAN T START AN ARRAY WITH A NO. IE. 1STDERIV...SYNTAX ERROR

C   FIRST OF ALL CALCULATE DERIVATIVES OF REPULSIVE ENERGY TERM
C   THIS IS CALLED REP1ST.

      DO K=1,3
         DO I=1,N
                   DO J=I+1,N
               R1ST(J,I)=DIRCOS(I,J,K)*REPULSE(J,I)
               R1ST(I,J)=-R1ST(J,I)
            END DO
            R1ST(I,I)=0.0D0
            D1=0.0D0
            DO J=1,N
               D1=D1+BETA*R1ST(J,I)
            END DO
            REP1ST(I,K)=D1
         END DO
      END DO

C      WRITE(6,*)'FIRST GOING TO DO DERIVATIVE OF REPULSIVE ENERGY:'
C      DO K=1,3
C         DO I=1,N
C            WRITE(6,*) (REP1ST(I,K))
C         END DO
C         WRITE(6,*)
C      END DO


C   EASY ISN T IT.
C   NOW DO THE BOND COUNTING TERM DERIVATIVE.

C NO BOND COUNTING TERM IN THIS VERSION

C      DO K=1,3
C         DO I=1,N
C            DO J=I+1,N
C               B1ST(J,I)=DIRCOS(I,J,K)*BONDAGE(J,I)/(BONDAGE(J,I)+1.0D0)**2
C               B1ST(I,J)=-B1ST(J,I)
C            END DO
C            B1ST(I,I)=0.0D0
C            D1=0.0D0
C            DO J=1,N
C               D1=D1-A*B1ST(J,I)/DELTA
C            END DO
C            BOND1ST(I,K)=D1
C         END DO
C      END DO
C      WRITE(6,*)'THEN GOING TO DO DERIVATIVE OF BOND ENERGY:'
C      DO K=1,3
C         DO I=1,N
C            WRITE(6,*) BOND1ST(I,K)
C         END DO
C         WRITE(6,*)
C      END DO

C   CO=1,2 OR 3 REPRESENTS THE X,Y OR Z COORDINATE AND THUS DIFFERENTIATION
C   THAT COORDINATE. CRIPES, I HOPE MY WORK IS MORE COMPACT THAN MY COMMENT
C   STATEMENTS.
      DO I=1,N
        DO J=I+1,N
           J2=3*(J-1)
                 DO NUM1=1,3
                    SQDIRCOS(J2+NUM1,I)=DIRCOS(J,I,NUM1)**2
                    SUBDIRCOS(J2+NUM1,I)=SQDIRCOS(J2+NUM1,I)-1.0D0
                 END DO

                 LMC(J,I)=DIRCOS(J,I,1)*DIRCOS(J,I,2)*DIRCOS(J,I,3)

C   TRANSFERABLE POTENTIAL CHANGES VALUE OF S2 AND KAPPA...THEREFORE CHANGES
C   DERIVATIVES BY A FACTOR WHICH IS ALWAYS MULTIPLIED BY ALPHA.
C   IMPROVED VERSION HAS NEW ALPHAADD AND DIFFK, THE LATTER OF WHICH HAS TO BE CHANGED
C   IN X, Y AND Z.

           ALPHAADD(J,I)=ALPHA+2.0D0*SIGMA*(R(J,I)-D)

                 ALPHASUM1S(J,I)=(ALPHAADD(J,I)+2.0D0/R(J,I))
                 ALPHASUM1V(J,I)=(ALPHA+2.0D0/R(J,I))
        END DO
      END DO

C     WRITE(6,*)'ENTERING THE DIFFERENTIATION OF ELECTRONIC ENERGY ZONE'
        DO K=1,N
          ELEC1ST(K,1)=0.0D0
          ELEC1ST(K,2)=0.0D0
          ELEC1ST(K,3)=0.0D0
        ENDDO

        DO I=1,N
         AI=4*(I-1)

C   DIFF OF INTERACTIONS OF AOS ON SAME ATOM
C   DON T NEED TO INCLUDE FOR DIFFSV SINCE NOT USED - LOOP
C   IS ONLY FOR J=I+1,N

         DO J=I+1,N
           RR=1.0D0/R(J,I)
           AJ=4*(J-1)
           J2=3*(J-1)

C   A GOOD IDEA APPEARS TO BE SIMPLIFY THE EXPRESSIONS IN THE
C   DIFFERENTIATING SECTION AND REDUCE THE NUMBER OF INDICES


C   EXT IS FOR WHEN CO+X IS GREATER THAN 3 FOR CO=3 AND 2 IE. Z AND Y
C   EXT2 IS FOR WHEN THIS ONLY THE CASE FOR CO=3
C   IT IS JUST A METHOD TO PERMUTE THE X, Y AND Z VALUES ETC.

           D1=DIRCOS(J,I,1)
           D2=DIRCOS(J,I,2)
           D3=DIRCOS(J,I,3)

           AADD(1)=ALPHAADD(J,I)
           AADD(2)=ALPHA

           AS1(1)=ALPHASUM1S(J,I)
           AS1(2)=ALPHASUM1V(J,I)
           SDC1=SUBDIRCOS(J2+1,I)
           SDC2=SUBDIRCOS(J2+2,I)
           SDC3=SUBDIRCOS(J2+3,I)
           SQC1=SQDIRCOS(J2+1,I)
           SQC2=SQDIRCOS(J2+2,I)
           SQC3=SQDIRCOS(J2+3,I)

                 LONG(1)=RR*(2.0D0*SQC1-1.0D0)+SQC1*AADD(1)
                 LONG(2)=RR*(2.0D0*SQC1-1.0D0)+SQC1*ALPHA

C                 OPTION(1)=-D2*LONG
C                 OPTION(2)=-D3*LONG
C                 OPTION(3)=-LMC(J,I)*AS1

C   DIFFSV(DIFF. OF S OR V,AO NO.,AO NO.)

C   DIFFERENTIATION OF OVERLAP OR INTERACTION BETWEEN ORBITALS
C   ON DIFFERENT ATOMS

                 DO SV=1,2
                    ASV=2*AI+4*(SV-1)
                    ALPHASUM2=D1*SVTYPE(ASV+2,J)*(AADD(SV)+RR)
                    SVSUB=SVTYPE(ASV+3,J)-SVTYPE(ASV+4,J)

                    DIFFSV(SV,1,1)=-AADD(SV)*D1*SVTYPE(ASV+1,J)
                    DIFFSV(SV,1,2)=SVTYPE(ASV+2,J)*(RR*SDC1+AADD(SV)*SQC1)
              DIFFSV(SV,1,3)=D2*ALPHASUM2
                    DIFFSV(SV,1,4)=D3*ALPHASUM2

                    DIFFSV(SV,2,1)=-DIFFSV(SV,1,2)
                    DIFFSV(SV,2,2)=-D1*(SVTYPE(ASV+3,J)*(AADD(SV)*SQC1+2.0D0*RR*SDC1)-SVTYPE(ASV+4,J)*SDC1*AS1(SV))
                    DIFFSV(SV,2,3)=-SVSUB*D2*LONG(SV)
                    DIFFSV(SV,2,4)=-SVSUB*D3*LONG(SV)
                
                    DIFFSV(SV,3,1)=-DIFFSV(SV,1,3)
                    DIFFSV(SV,3,2)= DIFFSV(SV,2,3)
                    DIFFSV(SV,3,3)=-D1*(SVTYPE(ASV+3,J)*SQC2*AS1(SV)-SVTYPE(ASV+4,J)*(AADD(SV)*SDC2+2.0D0*SQC2*RR))
                    DIFFSV(SV,3,4)=-SVSUB*LMC(J,I)*AS1(SV)

                    DIFFSV(SV,4,1)=-DIFFSV(SV,1,4)
                    DIFFSV(SV,4,2)= DIFFSV(SV,2,4)
                    DIFFSV(SV,4,3)= DIFFSV(SV,3,4)
                    DIFFSV(SV,4,4)=-D1*(SVTYPE(ASV+3,J)*SQC3*AS1(SV)-SVTYPE(ASV+4,J)*(AADD(SV)*SDC3+2.0D0*SQC3*RR))

                 END DO ! SV
           DIFFS2=-AADD(1)*D1*S2(I,J)
           KAPSQ=1.0D0/KAPPANEW(J,I)**2
C   NEW VALUE OF DIFFK IN IMPROVED VERSION
           DIFFK=2.0D0*SIGMA*D1*(R(J,I)-D)*KAPPANEW(J,I)
           E1=0.0D0
           DO NUM1=1,4
             DO NUM2=1,4   

              DIFFH=DIFFSV(2,NUM1,NUM2)*LAMBDA(I,J)-HORIG((AJ+NUM2),(AI+NUM1))
     1             /LAMBDA(I,J)*(DIFFK*KAPSQ+2.0D0*S2(I,J)*DIFFS2)

              E2=DIFFSV(1,NUM1,NUM2)
              DO LEV=4*N,2*N+1,-1
               E1=E1+EIGVEC(LEV,AI+NUM1)*EIGVEC(LEV,AJ+NUM2)*(DIFFH-DIAG(LEV)*E2)
              END DO !LEV
             END DO !NUM2
           END DO !NUM1
           ELEC1ST(I,1)=ELEC1ST(I,1)+2.0D0*E1
           ELEC1ST(J,1)=ELEC1ST(J,1)-2.0D0*E1

         END DO  !J (1ST TIME)
        END DO  !I(1ST TIME)

C   DIFFERENTIATING BY Y

        DO I=1,N
         AI=4*(I-1)

C   DIFF OF INTERACTIONS OF AOS ON SAME ATOM
C   DON T NEED TO INCLUDE FOR DIFFSV SINCE NOT USED - LOOP
C   IS ONLY FOR J=I+1,N

         DO J=I+1,N
           RR=1.0D0/R(J,I)
           AJ=4*(J-1)
           J2=3*(J-1)

           D1=DIRCOS(J,I,2)
           D2=DIRCOS(J,I,3)
           D3=DIRCOS(J,I,1)

           AADD(1)=ALPHAADD(J,I)
           AADD(2)=ALPHA

           AS1(1)=ALPHASUM1S(J,I)
           AS1(2)=ALPHASUM1V(J,I)
           SDC1=SUBDIRCOS(J2+2,I)
           SDC2=SUBDIRCOS(J2+3,I)
           SDC3=SUBDIRCOS(J2+1,I)
           SQC1=SQDIRCOS(J2+2,I)
           SQC2=SQDIRCOS(J2+3,I)
           SQC3=SQDIRCOS(J2+1,I)

                 LONG(1)=RR*(2.0D0*SQC1-1.0D0)+SQC1*AADD(1)
                 LONG(2)=RR*(2.0D0*SQC1-1.0D0)+SQC1*ALPHA

C                 OPTION(1)=-D2*LONG(SV)
C                 OPTION(2)=-D3*LONG(SV)
C                 OPTION(3)=-LMC(J,I)*AS1(SV)

C   DIFFSV(DIFF. OF S OR V,AO NO.,AO NO.)

C   DIFFERENTIATION OF OVERLAP OR INTERACTION BETWEEN ORBITALS
C   ON DIFFERENT ATOMS

                 DO SV=1,2
                    ASV=2*AI+4*(SV-1)
                    ALPHASUM2=D1*SVTYPE(ASV+2,J)*(AADD(SV)+RR)
                    SVSUB=SVTYPE(ASV+3,J)-SVTYPE(ASV+4,J)

                    DIFFSV(SV,1,1)=-AADD(SV)*D1*SVTYPE(ASV+1,J)
                    DIFFSV(SV,1,3)=SVTYPE(ASV+2,J)*(RR*SDC1+AADD(SV)*SQC1)
              DIFFSV(SV,1,4)=D2*ALPHASUM2
                    DIFFSV(SV,1,2)=D3*ALPHASUM2

                    DIFFSV(SV,2,1)=-DIFFSV(SV,1,2)
                    DIFFSV(SV,3,3)=-D1*(SVTYPE(ASV+3,J)*(AADD(SV)*SQC1+2.0D0*RR*SDC1)-SVTYPE(ASV+4,J)*SDC1*AS1(SV))
                    DIFFSV(SV,2,3)=-SVSUB*D3*LONG(SV)
                    DIFFSV(SV,2,4)=-SVSUB*LMC(J,I)*AS1(SV)
                
                    DIFFSV(SV,3,1)=-DIFFSV(SV,1,3)
                    DIFFSV(SV,3,2)= DIFFSV(SV,2,3)
                    DIFFSV(SV,4,4)=-D1*(SVTYPE(ASV+3,J)*SQC2*AS1(SV)+SVTYPE(ASV+4,J)*(-AADD(SV)*SDC2-2.0D0*SQC2*RR))
                    DIFFSV(SV,3,4)=-SVSUB*D2*LONG(SV)

                    DIFFSV(SV,4,1)=-DIFFSV(SV,1,4)
                    DIFFSV(SV,4,2)= DIFFSV(SV,2,4)
                    DIFFSV(SV,4,3)= DIFFSV(SV,3,4)
                    DIFFSV(SV,2,2)=-D1*(SVTYPE(ASV+3,J)*SQC3*AS1(SV)+SVTYPE(ASV+4,J)*(-AADD(SV)*SDC3-2.0D0*SQC3*RR))

                 END DO ! SV

           DIFFS2=-AADD(1)*D1*S2(I,J)
           KAPSQ=1.0D0/KAPPANEW(J,I)**2
C   NEW VALUE OF DIFFK IN IMPROVED VERSION
           DIFFK=2.0D0*SIGMA*D1*(R(J,I)-D)*KAPPANEW(J,I)

           E1=0.0D0
           DO NUM2=1,4   
             DO NUM1=1,4

              DIFFH=DIFFSV(2,NUM1,NUM2)*LAMBDA(I,J)-HORIG((AJ+NUM2),(AI+NUM1))
     1             /LAMBDA(I,J)*(DIFFK*KAPSQ+2.0D0*S2(I,J)*DIFFS2)

              E2=DIFFSV(1,NUM1,NUM2)
              DO LEV=4*N,2*N+1,-1
               E1=E1+EIGVEC(LEV,AI+NUM1)*EIGVEC(LEV,AJ+NUM2)*(DIFFH-DIAG(LEV)*E2)
              END DO !LEV
             END DO !NUM2
           END DO !NUM1
           ELEC1ST(I,2)=ELEC1ST(I,2)+2.0D0*E1
           ELEC1ST(J,2)=ELEC1ST(J,2)-2.0D0*E1

         END DO  !J (1ST TIME)
        END DO  !I(1ST TIME)

C   NOW DIFFERENTIATING BY Z

        DO I=1,N
         AI=4*(I-1)

         DO J=I+1,N
           RR=1.0D0/R(J,I)
           AJ=4*(J-1)
           J2=3*(J-1)

           D1=DIRCOS(J,I,3)
           D2=DIRCOS(J,I,1)
           D3=DIRCOS(J,I,2)

           AADD(1)=ALPHAADD(J,I)
           AADD(2)=ALPHA

           AS1(1)=ALPHASUM1S(J,I)
           AS1(2)=ALPHASUM1V(J,I)
           SDC1=SUBDIRCOS(J2+3,I)
           SDC2=SUBDIRCOS(J2+1,I)
           SDC3=SUBDIRCOS(J2+2,I)
           SQC1=SQDIRCOS(J2+3,I)
           SQC2=SQDIRCOS(J2+1,I)
           SQC3=SQDIRCOS(J2+2,I)

                 LONG(1)=RR*(2.0D0*SQC1-1.0D0)+SQC1*AADD(1)
                 LONG(2)=RR*(2.0D0*SQC1-1.0D0)+SQC1*ALPHA

C                 OPTION(1)=-D2*LONG(SV)
C                 OPTION(2)=-D3*LONG(SV)
C                 OPTION(3)=-LMC(J,I)*AS1(SV)

C   DIFFSV(DIFF. OF S OR V,AO NO.,AO NO.)

C   DIFFERENTIATION OF OVERLAP OR INTERACTION BETWEEN ORBITALS
C   ON DIFFERENT ATOMS

                 DO SV=1,2
                    ASV=2*AI+4*(SV-1)
                    ALPHASUM2=D1*SVTYPE(ASV+2,J)*(AADD(SV)+RR)
                    SVSUB=SVTYPE(ASV+3,J)-SVTYPE(ASV+4,J)

                    DIFFSV(SV,1,1)=-AADD(SV)*D1*SVTYPE(ASV+1,J)
                    DIFFSV(SV,1,4)=SVTYPE(ASV+2,J)*(RR*SDC1+AADD(SV)*SQC1)
              DIFFSV(SV,1,2)=D2*ALPHASUM2
                    DIFFSV(SV,1,3)=D3*ALPHASUM2

                    DIFFSV(SV,2,1)=-DIFFSV(SV,1,2)
                    DIFFSV(SV,4,4)=-D1*(SVTYPE(ASV+3,J)*(AADD(SV)*SQC1+2.0D0*RR*SDC1)-SVTYPE(ASV+4,J)*SDC1*AS1(SV))
                    DIFFSV(SV,2,3)=-SVSUB*LMC(J,I)*AS1(SV)
                    DIFFSV(SV,2,4)=-SVSUB*D2*LONG(SV)
                
                    DIFFSV(SV,3,1)=-DIFFSV(SV,1,3)
                    DIFFSV(SV,3,2)= DIFFSV(SV,2,3)
                    DIFFSV(SV,2,2)=-D1*(SVTYPE(ASV+3,J)*SQC2*AS1(SV)+SVTYPE(ASV+4,J)*(-AADD(SV)*SDC2-2.0D0*SQC2*RR))
                    DIFFSV(SV,3,4)=-SVSUB*D3*LONG(SV)

                    DIFFSV(SV,4,1)=-DIFFSV(SV,1,4)
                    DIFFSV(SV,4,2)= DIFFSV(SV,2,4)
                    DIFFSV(SV,4,3)= DIFFSV(SV,3,4)
                    DIFFSV(SV,3,3)=-D1*(SVTYPE(ASV+3,J)*SQC3*AS1(SV)+SVTYPE(ASV+4,J)*(-AADD(SV)*SDC3-2.0D0*SQC3*RR))

                 END DO ! SV

           DIFFS2=-AADD(1)*D1*S2(I,J)
           KAPSQ=1.0D0/KAPPANEW(J,I)**2
C   NEW VALUE OF DIFFK IN IMPROVED VERSION
           DIFFK=2.0D0*SIGMA*D1*(R(J,I)-D)*KAPPANEW(J,I)

           E1=0.0D0
           DO NUM2=1,4   
             DO NUM1=1,4

              DIFFH=DIFFSV(2,NUM1,NUM2)*LAMBDA(I,J)-HORIG((AJ+NUM2),(AI+NUM1))
     1             /LAMBDA(I,J)*(DIFFK*KAPSQ+2.0D0*S2(I,J)*DIFFS2)

              E2=DIFFSV(1,NUM1,NUM2)
              DO LEV=4*N,2*N+1,-1
               E1=E1+EIGVEC(LEV,AI+NUM1)*EIGVEC(LEV,AJ+NUM2)*(DIFFH-DIAG(LEV)*E2)
              END DO !LEV
             END DO !NUM2
           END DO !NUM1
           ELEC1ST(I,3)=ELEC1ST(I,3)+2.0D0*E1
           ELEC1ST(J,3)=ELEC1ST(J,3)-2.0D0*E1

         END DO  !J (1ST TIME)
        END DO  !I(1ST TIME)

C   IN ORDER TO DIFFERENTIATE BY THE COORDINATE OF ATOM K, YOU ONLY GET 
C   A VALUE FOR THE DERIVATIVE IF ONE OF THE TWO ATOMS INVOLVED IN THE
C   PAIR INTERACTION IS K OTHERWISE IT IS ZERO. THIS IS ACHIEVED BY USE
C   OF THE FACTOR TERM. I M SURE THIS IS HIGHLY INEFFICIENT BUT IF IT
C   WORKS THEN THAT IS WORTHWHILE. I CAN IMPROVE IT LATER....WHEN I M 
C   DRAWING MY PENSION.            
C   HAVE TO KEEP IT IN A LOOP WHERE I AND J ARE THE ATOM NUMBER RATHER
C   THAN THE AO.

C   RECENT CHANGES INVOLVE REPLACING DERIVV WITH ITS SPECIFIC VALUE 
C   FACTOR*DIFFSV(2,X,Y) AND PERHAPS SIMILARLY FOR DERIVS.
C   DIFFSV AND DIFFH WILL BE ZERO.
C   MUST BE AWARE THAT ALTHOUGH NONE OF THE DIAGONAL ELEMENTS ARE DEFINED
C   THEY ARE EQUAL TO ZERO. NOT DEEMED NECESSARY TO CALC. THEM SINCE
C   THE LOOP NEVER REACHES I=J.  GOOD TO USE J=I+1 SINCE USES SYMMETRY TO 
C   CUT DOWN ON CALCULATIONS.

C   KEEP DIFFS2 SINCE IT IS ONLY DEPENDENT ON WHICH ATOMS ARE INTERACTING 
C   NOT THE AOS

C      DO I=1,3
C        WRITE(6,*) 'ELECTRONIC DERIVATIVE'
C        DO K=1,N
C          WRITE(6,*) ELEC1ST(K,I)
C        END DO
C       WRITE(6,*)
C      END DO


C   INCLUDE FACTOR OF 2 FOR ELEC1ST SINCE TWO ELECTRONS FILL EACH MO
      DO K=1,3
         DO I=1,N
            I2=3*(I-1)
C            DERIV1ST(I2+K)=2.0D0*ELEC1ST(I,K)+BOND1ST(I,K)+REP1ST(I,K)
            DERIV1ST(I2+K)=2.0D0*ELEC1ST(I,K)+REP1ST(I,K)
         END DO
      END DO

C      DO I=1,3*N
C            WRITE(6,*) 'THUS THE FIRST DERIVATIVE OF THE TOTAL ENERGY'
C     1                 ,DERIV1ST(I)
C      END DO

      END
C
      SUBROUTINE SECSI(N,X,VNEW,BOXLX,BOXLY,BOXLZ)
      USE MODHESS
      IMPLICIT NONE
      INTEGER N, J1, J2
      DOUBLE PRECISION X(3*N), TEMP1, 
     1                 DIF, FG1(3*N),V1,VNEW(3*N),BOXLX,BOXLY,BOXLZ

      DIF=1.0D-3

      DO J1=1,3*N
         TEMP1=X(J1)
         X(J1)=X(J1)+DIF
         CALL TIGHTE(N,X,FG1,V1,.TRUE.,BOXLX,BOXLY,BOXLZ)
         X(J1)=X(J1)-DIF
         DO J2=J1,3*N
            HESS(J2,J1)=(FG1(J2)-VNEW(J2))/DIF
            HESS(J1,J2)=HESS(J2,J1)
         ENDDO
      ENDDO

      RETURN
      END
