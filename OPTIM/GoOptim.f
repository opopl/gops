      SUBROUTINE GO(QO,NATOMS,GRAD,ENERGY,GTEST,STEST)
      USE KEY
      IMPLICIT NONE
      INTEGER NATOMS
      DOUBLE PRECISION QO(3*NATOMS), GRAD(3*NATOMS)
      DOUBLE PRECISION ENERGY

!      DOUBLE PRECISION  RB(NATOMS), BK(NATOMS), ANTC(NATOMS), 
!     Q TK(NATOMS), PK(NATOMS), GAMS1(NATOMS), GAMS3(NATOMS), 
!     Q GAMC1(NATOMS), GAMC3(NATOMS), SIGMA(NATOMS*10), 
!     Q EPSC(NATOMS*10),  NNCSIGMA(NATOMS*NATOMS),NCSIGMA(NATOMS*NATOMS)
!      INTEGER  IB1(NATOMS), IB2(NATOMS), IT(NATOMS), JT(NATOMS), 
!     Q KT(NATOMS),IP(NATOMS), JP(NATOMS), KP(NATOMS), 
!     Q LP(NATOMS), IC(NATOMS*10), JC(NATOMS*10),INC(NATOMS*NATOMS), 
!     Q JNC(NATOMS*NATOMS), NBA, NTA, NPA, NC, NNC
      LOGICAL :: CALLED=.FALSE.
      LOGICAL GTEST, STEST
        INTEGER NGOMAX
        PARAMETER(NGOMAX=500)
      DOUBLE PRECISION  RB(NGOMAX), BK(NGOMAX), ANTC(NGOMAX),
     Q TK(NGOMAX), PK(NGOMAX), GAMS1(NGOMAX), GAMS3(NGOMAX),
     Q GAMC1(NGOMAX), GAMC3(NGOMAX), SIGMA(NGOMAX*10),
     Q EPSC(NGOMAX*10),  NNCSIGMA(NGOMAX*NGOMAX),NCSIGMA(NGOMAX*NGOMAX)
      INTEGER  IB1(NGOMAX), IB2(NGOMAX), IT(NGOMAX), JT(NGOMAX),
     Q KT(NGOMAX),IP(NGOMAX), JP(NGOMAX), KP(NGOMAX),
     Q LP(NGOMAX), IC(NGOMAX*10), JC(NGOMAX*10),INC(NGOMAX*NGOMAX),
     Q JNC(NGOMAX*NGOMAX), NBA, NTA, NPA, NC, NNC

        COMMON /DOUBLE PRECISION/ RB, BK, ANTC, TK,PK, GAMS1, GAMS3, GAMC1, GAMC3,
     Q SIGMA, EPSC, NNCSIGMA, NCSIGMA
        COMMON /INT/ IB1, IB2, IT, JT, KT, IP,
     Q JP, KP, LP,IC, JC, INC, JNC, NBA, NTA, NPA, NC, NNC


        IF(NATOMS.GT. NGOMAX)THEN
        WRITE(*,*) 'TOO MANY ATOMS FOR GO, CHANGE NGOMAX'
        STOP
        ENDIF

!  DIMENSION(:):: 
!      SAVE  NATOMS,IB1, IB2,RB, BK, IT, JT, KT, ANTC, TK, IP, JP, KP, LP, PK,
!     Q GAMS1, GAMS3, GAMC1, GAMC3,IC, JC, SIGMA, EPSC, INC, JNC, NNCSIGMA,NBA, NTA, NPA, NC, NNC
!  PUT IN A LINE THAT READS IN THE PARAMETERS, IF THIS IS THE FIRST TIME IT HAS BEEN CALLED

       IF(.NOT.CALLED)THEN
!        CALLED=.TRUE.
!        ENDIF
       CALL GOINIT(NATOMS,IB1, IB2,RB, BK, IT, JT, KT, ANTC, TK, IP, 
     Q JP, KP, LP, PK, GAMS1, GAMS3, GAMC1, GAMC3,IC, JC, SIGMA, 
     Q EPSC, INC, JNC, NNCSIGMA, NCSIGMA,NBA, NTA, NPA, NC, NNC)

        CALLED=.TRUE.
        ENDIF
! CALL THE ENERGY ROUTINE

      CALL CALC_ENERGY_GO(QO,NATOMS, GRAD, ENERGY, IB1, IB2,
     Q RB, BK, IT, JT, KT, ANTC, TK, IP, JP, KP, LP, PK,
     Q GAMS1, GAMS3, GAMC1, GAMC3,IC, JC, SIGMA, EPSC, INC, 
     Q JNC, NNCSIGMA,NCSIGMA,NBA, NTA, NPA, NC, NNC)


      IF (STEST) THEN
         PRINT '(A)','ERROR - SECOND DERIVATIVES NOT AVAILABLE FOR THIS POTENTIAL'
         STOP
      ENDIF
      RETURN
      END





!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
!* GOINIT() READS THE ATOM POSITIONS FROM FILE.  IF 1 IS SELECTED FOR  *
!* STARTT THEN THE VELOCITIES ARE ASSIGNED, OTHERWISE, THEY ARE READ   *
!* BY SELECTING 2, OR GENERATED BY SELECTING 3                         *
!***********************************************************************

      SUBROUTINE GOINIT(NATOMS,IB1, IB2,RB, BK, IT, JT, KT, ANTC, TK,
     Q  IP, JP, KP, LP, PK,GAMS1, GAMS3, GAMC1, GAMC3,IC, JC, SIGMA, 
     Q EPSC, INC, JNC, NNCSIGMA, NCSIGMA,NBA, NTA, NPA, NC, NNC)
      USE KEY
      IMPLICIT NONE

        INTEGER I,J,MAXCON,NNCMAX,NATOMS,STORAGE, DUMMY,  ANR, IB11,
     Q IB12, IB22, IB21,IT1, JT1, KT1, IT2, JT2, KT2, IP1, JP1,
     Q KP1, LP1, IP2, JP2, KP2,
     Q LP2, NBA1, NTA1, NPA1, NBA2, NTA2, NPA2,  IND1, IND2, ANT,
     Q  MDT1, MDT2, CL1, CL2

      DOUBLE PRECISION  RB(NATOMS), BK(NATOMS), ANTC(NATOMS), 
     Q TK(NATOMS), PK(NATOMS), GAMS1(NATOMS), GAMS3(NATOMS),
     Q GAMC1(NATOMS), GAMC3(NATOMS), SIGMA(NATOMS*10), EPSC(NATOMS*10),  
     Q NNCSIGMA(NATOMS*NATOMS),NCSIGMA(NATOMS*NATOMS)
      INTEGER  IB1(NATOMS), IB2(NATOMS), IT(NATOMS), JT(NATOMS), 
     Q KT(NATOMS),IP(NATOMS), JP(NATOMS), KP(NATOMS),
     Q LP(NATOMS), IC(NATOMS*10), JC(NATOMS*10),INC(NATOMS*NATOMS), 
     Q JNC(NATOMS*NATOMS), NBA, NTA, NPA, NC, NNC

       DOUBLE PRECISION  PINITMAX, TK1, TK2, PK1, PK2, APTTEMP, MST,
     Q SIGMAT1, SIGMAT2, EPSTEMP
!      INTEGER I,J,MAXCON,NNCMAX,NATOMS,STORAGE, DUMMY,  ANR, IB11, 
!     Q IB12, IB22, IB21,IT1, JT1, KT1, IT2, JT2, KT2, IP1, JP1, 
!     Q KP1, LP1, IP2, JP2, KP2,
!     Q LP2, NBA1, NTA1, NPA1, NBA2, NTA2, NPA2,  IND1, IND2, ANT, 
!     Q  MDT1, MDT2, CL1, CL2
        CHARACTER(LEN=20) FMTB, FMTT, FMTP, CA, RP

       DOUBLE PRECISION NNCEPS
       DIMENSION NNCEPS(NATOMS*NATOMS)
      DOUBLE PRECISION DX,DY,DZ
       DOUBLE PRECISION PI
      PI = 3.14159265358979323846264338327950288419716939937510

        NNCMAX = NATOMS*NATOMS
        MAXCON=NATOMS*10
! OLD FORMATTING
        FMTB="(3I5,2F8.3)"
        FMTT="(4I5,2F8.3)"
        FMTP="(5I5,2F8.3)"
        CA="(3I5,F10.3, F9.6)"
        RP="(I5,2I5, 2F8.3)"

! NEW FORMATTING
!        FMTB="(3I5,2F8.3)"
!        FMTT="(4I5,2F8.3)"
!        FMTP="(5I5,2F8.3)"
!        CA="(3I5,F10.3,F9.6)"
!        RP="(I8,2I5, 2F10.3)"


! THESE LINES READ IN THE PARAMETERS.
        OPEN(30, FILE='GO.INP', STATUS='OLD', ACCESS='SEQUENTIAL')

          READ(30,*) NBA

        DO I=1, NBA
          READ(30,*) J, IB1(I), IB2(I),RB(I), BK(I)
        END DO

          READ(30,*) NTA
        DO I=1, NTA
          READ(30,*) J, IT(I), JT(I), KT(I), ANTC(I), TK(I)
        ENDDO

          READ(30,*) NPA

! THIS READS IN THE DIHEDRAL ANGLES AND CALCULATES THE COSINES AND SINES
! IN ORDER TO MAKE THE FORCE AND ENERGY CALCULATIONS EASIER, LATER.
        DO I=1, NPA
           READ(30,*) J, IP(I), JP(I), KP(I), LP(I), APTTEMP, PK(I)

!1010   IF(APTTEMP .GT. PI)THEN
!       APTTEMP = APTTEMP -2*PI
!       GOTO 1010
!        ELSE
!1010    IF(APTTEMP .LT. 0.0)THEN
!        APTTEMP = APTTEMP+2*PI
!        GOTO 1010
!        ENDIF
         
            GAMS1(I)= PK(I)*SIN(APTTEMP)
            GAMC1(I)= PK(I)*COS(APTTEMP)

!1020    IF(3*APTTEMP .GT. PI)THEN
!        APTTEMP = APTTEMP -2.0/3.0*PI
!        GOTO 1020
!        ELSE
!1020    IF(3*APTTEMP .LT. 0.0)THEN
!        APTTEMP = APTTEMP +2.0/3.0*PI
!        GOTO 1020

!        ENDIF

            GAMS3(I)= PK(I)*SIN(3.0*APTTEMP)/2
            GAMC3(I)= PK(I)*COS(3.0*APTTEMP)/2

        END DO


        READ(30,*) NC

          IF(NC .GT. MAXCON)THEN
             WRITE(*,*) 'TOO MANY CONTACTS'
             STOP
          ENDIF

        DO I=1, NC

          READ(30, *) IND1, IC(I), JC(I), SIGMA(I), EPSC(I)
        END DO

 
! READ NON-NATIVE INTERACTIONS
        READ(30,*) NNC
        IF(NNC .GT. NNCMAX)THEN
        WRITE(*,*) 'TOO MANY NON CONTACTS'
        STOP
        ENDIF        
        DO I=1, NNC
           READ(30,*) IND1, INC(I), JNC(I), NCSIGMA(I), NNCEPS(I)
! THIS SIMPLIFIES CALCULATIONS LATER
           NNCSIGMA(I) = 12*NNCEPS(I)*NCSIGMA(I)**6
        END DO


!        READ(30,*) AN
       CLOSE(30)
       END

!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^END OF GOINIT^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


C
C CALCULATE THE FORCES AND ENERGIES
C
      SUBROUTINE CALC_ENERGY_GO(QO,NATOMS,GRAD, ENERGY,IB1, IB2,
     Q RB, BK, IT, JT, KT, ANTC, TK, IP, JP, KP, LP, PK,
     Q GAMS1, GAMS3, GAMC1, GAMC3,IC, JC, SIGMA, EPSC, INC, JNC, 
     Q NNCSIGMA,NCSIGMA,NBA, NTA, NPA, NC, NNC)

      INTEGER I, J, NATOMS,NBA, NTA, NPA, NC, NNC

      DOUBLE PRECISION QO(3*NATOMS), GRAD(3*NATOMS), ENERGY
      DOUBLE PRECISION X(NATOMS), Y(NATOMS), Z(NATOMS)

        DOUBLE PRECISION RB(NBA), BK(NBA), ANTC(NTA), TK(NTA), PK(NPA), 
     Q GAMS1(NPA), GAMS3(NPA), GAMC1(NPA), GAMC3(NPA), SIGMA(NC), 
     Q EPSC(NC),  NNCSIGMA(NNC),NCSIGMA(NNC)
        INTEGER IB1(NBA), IB2(NBA), IT(NTA), JT(NTA), KT(NTA),IP(NPA), 
     Q JP(NPA), KP(NPA), LP(NPA), IC(NC), JC(NC), INC(NNC), JNC(NNC)
      DOUBLE PRECISION DX,DY,DZ

      DO I = 1, NATOMS
         J = (I-1)*3
         X(I) = QO(J+1)
         Y(I) = QO(J+2)
         Z(I) = QO(J+3)
         GRAD(J+1) = 0.0
        GRAD(J+2) = 0.0
        GRAD(J+3) = 0.0
      ENDDO

      ENERGY = 0.0

      CALL GOBONDS(X,Y,Z,GRAD, ENERGY, NATOMS,IB1, IB2,RB, BK,NBA)
      CALL GOANGL(X,Y,Z,GRAD, ENERGY, NATOMS,IT,JT,KT,ANTC,TK,NTA)
        CALL GODIHEDRAL(X,Y,Z,GRAD, ENERGY, NATOMS,IP,JP,KP,LP,PK,
     Q GAMS1, GAMS3, GAMC1, GAMC3,NPA)
        CALL GOCONTACTS(X,Y,Z,GRAD, ENERGY, NATOMS, IC, JC, 
     Q SIGMA, EPSC, NC)
        CALL GONONCONTACTS(X,Y,Z,GRAD, ENERGY, NATOMS, INC, 
     Q JNC, NCSIGMA,NNCSIGMA,NNC)

      END


!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
!* GOBONDS  COMPUTES THE HOOKEAN FORCE AND ENERGY BETWEEN CHOSEN ATOMS *
!***********************************************************************

      SUBROUTINE GOBONDS(X,Y,Z,GRAD,ENERGY, NATOMS,IB1, IB2,RB, BK,NBA)
      USE KEY
      IMPLICIT NONE
      INTEGER I2, J2,  OUTE,I, N, J, NATOMS, NBA
      DOUBLE PRECISION X(NATOMS), Y(NATOMS), Z(NATOMS), GRAD(3*NATOMS),
     Q ENERGY
      DOUBLE PRECISION R2, F, R1
      DOUBLE PRECISION DX,DY,DZ

        DOUBLE PRECISION RB(NBA), BK(NBA)
        INTEGER IB1(NBA), IB2(NBA)


        DO 1 I=1, NBA
           I2 = IB1(I)
           J2 = IB2(I)

        DX = X(I2) - X(J2)
        DY = Y(I2) - Y(J2)
        DZ = Z(I2) - Z(J2)

          R2 = DX**2 + DY**2 + DZ**2
          R1 = SQRT(R2)

! ENERGY CALCULATION
             ENERGY = ENERGY + BK(I)*(R1-RB(I))**2/2.0

! END ENERGY CALCULATION

! F_OVER_R IS THE FORCE OVER THE MAGNITUDE OF R SO THERE IS NO NEED TO RESOLVE
! THE DX, DY AND DZ INTO UNIT VECTORS

! THE INDEX I INDICATES THE INTERACTION BETWEEN PARTICLE I AND I+1

             F = -BK(I)*(R1-RB(I))/R1
!            F = RB(I)*BK(I)/R1 - BK(I)
        !WRITE(*,*) I, F
            ! NOW ADD THE FORCE
              GRAD(I2*3-2) = GRAD(I2*3-2) - F * DX
              GRAD(I2*3-1) = GRAD(I2*3-1) - F * DY
              GRAD(I2*3)   = GRAD(I2*3)   - F * DZ
! THE NEGATIVE SIGN IS DUE TO THE COMPUTATION OF DX, DY AND DZ
              GRAD(J2*3-2) = GRAD(J2*3-2) + F * DX
              GRAD(J2*3-1) = GRAD(J2*3-1) + F * DY
              GRAD(J2*3)   = GRAD(J2*3)   + F * DZ

1         CONTINUE
      !STOP
      END

!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^END OF GOBONDS^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
!* GOANGL  COMPUTES THE FORCE DUE TO THE BOND ANGLES                   *
!* THIS CODE IS TAKEN FROM AMBER, AND MODIFIED                         *
!***********************************************************************

      SUBROUTINE GOANGL(X,Y,Z,GRAD, ENERGY, NATOMS,IT, JT, KT, 
     Q ANTC, TK,NTA)
      USE KEY
      IMPLICIT NONE
      INTEGER NATOMS
      DOUBLE PRECISION X(NATOMS), Y(NATOMS), Z(NATOMS), GRAD(3*NATOMS),
     Q ENERGY
      INTEGER I, N, J, NTA
! "XX, IX," WAS RIGHT AFTER "X," BUT HAS BEEN TAKEN OUT FOR THE TIME BEING
!      IMPLICIT _REAL_ (A-H,O-Z)
      LOGICAL SKIP,NOCRST
C
C     ----- ROUTINE TO GET THE ANGLE ENERGIES AND FORCES FOR THE
C           POTENTIAL OF THE TYPE CT*(T-T0)**2
C

      DOUBLE PRECISION CST,EAW,RIJ,RKJ,RIK,DFW,ANT,XIJ,YIJ,
     + ZIJ,XKJ,YKJ,
     + ZKJ, DF
      DIMENSION  XIJ(NTA),YIJ(NTA),ZIJ(NTA),XKJ(NTA),YKJ(NTA),
     + ZKJ(NTA),CST(NTA),EAW(NTA),RIJ(NTA),RKJ(NTA),RIK(NTA),
     + DFW(NTA),ANT(NTA)
      DOUBLE PRECISION CT0, CT1, CT2, RIJ0, RKJ0, RIK0, ANT0, DA, ST, 
     + CIK, CII, CKK, DT1, DT2, DT3, DT4, DT5, DT6, DT7, DT8, DT9, PT999
     Q , EBAL,STH

! THESE ARE ALL REPLACED WITH GLOBAL ARRAYS THAT DON'T NEED TO DECLARED
! I THINK AMBER USES THIS METHOD SINCE IT HAS SUCH A LARGE MEMORY
! IF I NEED TO, I WILL USE THIS METHOD LATER.
!      DIMENSION IT(*),JT(*),KT(*),ICT(*),X(*),F(*)

! ",XX(*),IX(*)" WAS REMOVED FROM DIMENSION ABOVE
        DOUBLE PRECISION ANTC(NTA), TK(NTA)
        INTEGER JN, IT(NTA), JT(NTA), KT(NTA)
        INTEGER I3, J3, K3

      DATA PT999 /1.0D0/
      EBAL= 0.0D0


!        X(1) = 1.0 
!        Y(2) = 0.0
!        Z(2) = 0.0

!        X(2) = 0.0
!        Y(2) = 0.0
!        Z(2) = 0.0
 
!        DO JN=3, NTA

 !       X(JN) = COS(3.14159*2*(JN-3)/200.)
!        Y(JN) = SIN(3.14159*2*(JN-3)/200.)
!        Z(JN) = 0.0


!        ENDDO

          DO JN = 1, NTA
            I3 = IT(JN)
            J3 = JT(JN)
            K3 = KT(JN)

!            I3 = 1
!            J3 = 2
!            K3 = KT(JN)



C
C           ----- CALCULATION OF THE ANGLE -----
C
            XIJ(JN) = X(I3)-X(J3)
            YIJ(JN) = Y(I3)-Y(J3)
            ZIJ(JN) = Z(I3)-Z(J3)
            XKJ(JN) = X(K3)-X(J3)
            YKJ(JN) = Y(K3)-Y(J3)
            ZKJ(JN) = Z(K3)-Z(J3)
          END DO
C
          DO JN = 1,NTA
            RIJ0 = XIJ(JN)*XIJ(JN)+YIJ(JN)*YIJ(JN)+ZIJ(JN)*ZIJ(JN)
            RKJ0 = XKJ(JN)*XKJ(JN)+YKJ(JN)*YKJ(JN)+ZKJ(JN)*ZKJ(JN)
            RIK0 = SQRT(RIJ0*RKJ0)
            CT0 = (XIJ(JN)*XKJ(JN)+YIJ(JN)*YKJ(JN)+ZIJ(JN)*ZKJ(JN))/RIK0
            CT1 = MAX(-PT999,CT0)
            CT2 = MIN(PT999,CT1)
            CST(JN) = CT2
            ANT(JN) = ACOS(CT2)
            RIJ(JN) = RIJ0
            RKJ(JN) = RKJ0
            RIK(JN) = RIK0
          END DO

! END OF INSERTION


C
C         ----- CALCULATION OF THE ENERGY AND DER -----
C

          DO JN = 1,NTA
            ANT0 = ANT(JN)
            DA = ANT0 - ANTC(JN)
            DF = TK(JN)*DA


! THESE LINES WERE IN AMBER, BUT I DON'T NEED THEM... YET...
!            IF(IDECOMP.EQ.1 .OR. IDECOMP.EQ.2) THEN
!             II = (IT(JN) + 3)/3
!             JJ = (JT(JN) + 3)/3
!             KK = (KT(JN) + 3)/3
!              CALL DECANGLE(XX,IX,II,JJ,KK,EAW(JN))
!            ENDIF
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!            DFW(JN) = -(DF+DF)/SIN(ANT0)
            DFW(JN) = -(DF)/SIN(ANT0)

          END DO
C
C         ----- CALCULATION OF THE FORCE -----
C
          DO JN = 1,NTA
            I3 = IT(JN)
            J3 = JT(JN)
            K3 = KT(JN)
C
            ST = DFW(JN)
            STH = ST*CST(JN)
            CIK = ST/RIK(JN)
            CII = STH/RIJ(JN)
            CKK = STH/RKJ(JN)
            DT1 = CIK*XKJ(JN)-CII*XIJ(JN)
            DT2 = CIK*YKJ(JN)-CII*YIJ(JN)
            DT3 = CIK*ZKJ(JN)-CII*ZIJ(JN)
            DT7 = CIK*XIJ(JN)-CKK*XKJ(JN)
            DT8 = CIK*YIJ(JN)-CKK*YKJ(JN)
            DT9 = CIK*ZIJ(JN)-CKK*ZKJ(JN)
            DT4 = -DT1-DT7
            DT5 = -DT2-DT8
            DT6 = -DT3-DT9
C

            GRAD(I3*3-2) = GRAD(I3*3-2)+ DT1
            GRAD(I3*3-1) = GRAD(I3*3-1)+ DT2
            GRAD(I3*3)   = GRAD(I3*3)  + DT3
            GRAD(J3*3-2) = GRAD(J3*3-2)+ DT4
            GRAD(J3*3-1) = GRAD(J3*3-1)+ DT5
            GRAD(J3*3)   = GRAD(J3*3)  + DT6
            GRAD(K3*3-2) = GRAD(K3*3-2)+ DT7
            GRAD(K3*3-1) = GRAD(K3*3-1)+ DT8
            GRAD(K3*3)   = GRAD(K3*3)  + DT9

!         WRITE(100,*) DT1,DT2,DT3,DT4,DT5,DT6,DT7,DT8,DT9
          END DO
!         STOP
! ENERGY CALCULATIONS


          DO I=1, NTA
             ENERGY = ENERGY + TK(I)*(ANTC(I)- ANT(I))**2/2.0
          END DO

       RETURN
       END

!^^^^^^^^^^^^^^^^^^^^^^^^END OF GOANGL^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
!* GODIHEDRAL COMPUTES THE DIHEDRAL ANGLES AND THE FORCES DUE TO THEM *
!**********************************************************************

      SUBROUTINE GODIHEDRAL(X,Y,Z,GRAD, ENERGY, NATOMS,IP,JP,KP,LP,PK,
     Q GAMS1, GAMS3, GAMC1, GAMC3,NPA)
      USE KEY
      IMPLICIT NONE
      INTEGER I, N, J, NATOMS, NPA, JN
      DOUBLE PRECISION X(NATOMS),Y(NATOMS),Z(NATOMS),
     Q GRAD(3*NATOMS),ENERGY


      DOUBLE PRECISION PK(NPA),GAMS1(NPA),GAMS3(NPA),
     Q GAMC1(NPA),GAMC3(NPA)
      INTEGER IP(NPA), JP(NPA), KP(NPA), LP(NPA) 

      DOUBLE PRECISION LFAC
      INTEGER I3, J3, K3, L3
      DOUBLE PRECISION  XIJ,YIJ,ZIJ,XKJ,YKJ,
     + ZKJ,XKL,YKL,ZKL,DX,DY,
     + DZ, GX,GY,GZ,CT,CPHI,
     + SPHI,Z1, Z2,FXI,FYI,FZI,
     + FXJ,FYJ,FZJ, FXK,FYK,FZK,
     + FXL,FYL,FZL,DF,Z10,Z20,Z12,Z11,Z22,FTEM,CT0,CT1,AP0,AP1,
     + DUMS,DFLIM, DF1, DF0, DR1, DR2,DR3,DR4,DR5,DR6,DRX,DRY,DRZ,
     +  DC1, DC2, DC3, DC4, DC5, DC6,S

      DIMENSION XIJ(NPA),YIJ(NPA),ZIJ(NPA),XKJ(NPA),YKJ(NPA),
     + ZKJ(NPA),XKL(NPA),YKL(NPA),ZKL(NPA),DX(NPA),DY(NPA),
     + DZ(NPA), GX(NPA),GY(NPA),GZ(NPA),CT(NPA),CPHI(NPA),
     + SPHI(NPA),Z1(NPA), Z2(NPA),FXI(NPA),FYI(NPA),FZI(NPA),
     + FXJ(NPA),FYJ(NPA),FZJ(NPA), FXK(NPA),FYK(NPA),FZK(NPA),
     + FXL(NPA),FYL(NPA),FZL(NPA),DF(NPA)
C
      DOUBLE PRECISION  TM24,TM06,TENM3,ZERO,ONE,TWO,FOUR,SIX,TWELVE

      DATA TM24,TM06,TENM3/1.0D-24,1.0D-06,1.0D-03/
      DATA ZERO,ONE,TWO,FOUR,SIX,TWELVE/0.D0,1.D0,2.D0,4.D0,6.D0,12.D0/

      DOUBLE PRECISION PI,SINNP,COSNP,SINNP3,COSNP3
      PI = 3.14159265358979323846264338327950288419716939937510

!      PI = 3.141592653589793
C
C     ----- GRAND LOOP FOR THE DIHEDRAL STUFF -----
C
          DO JN = 1,NPA

            I3 = IP(JN)
            J3 = JP(JN)
            K3 = KP(JN)
            L3 = LP(JN)

C
C           ----- CALCULATION OF IJ, KJ, KL VECTORS -----
C
 

            XIJ(JN) = X(I3)-X(J3)
            YIJ(JN) = Y(I3)-Y(J3)
            ZIJ(JN) = Z(I3)-Z(J3)
            XKJ(JN) = X(K3)-X(J3)
            YKJ(JN) = Y(K3)-Y(J3)
            ZKJ(JN) = Z(K3)-Z(J3)
            XKL(JN) = X(K3)-X(L3)
            YKL(JN) = Y(K3)-Y(L3)
            ZKL(JN) = Z(K3)-Z(L3)                                  
          END DO
C
C         ----- GET THE NORMAL VECTOR -----
C
          DO JN = 1,NPA
            DX(JN) = YIJ(JN)*ZKJ(JN)-ZIJ(JN)*YKJ(JN)
            DY(JN) = ZIJ(JN)*XKJ(JN)-XIJ(JN)*ZKJ(JN)
            DZ(JN) = XIJ(JN)*YKJ(JN)-YIJ(JN)*XKJ(JN)
            GX(JN) = ZKJ(JN)*YKL(JN)-YKJ(JN)*ZKL(JN)
            GY(JN) = XKJ(JN)*ZKL(JN)-ZKJ(JN)*XKL(JN)
            GZ(JN) = YKJ(JN)*XKL(JN)-XKJ(JN)*YKL(JN)
          END DO
C
          DO JN = 1,NPA
            FXI(JN) = SQRT(DX(JN)*DX(JN)
     Q                    +DY(JN)*DY(JN)
     Q                    +DZ(JN)*DZ(JN)+TM24)
            FYI(JN) = SQRT(GX(JN)*GX(JN)
     Q                    +GY(JN)*GY(JN)
     Q                    +GZ(JN)*GZ(JN)+TM24)
            CT(JN) = DX(JN)*GX(JN)+DY(JN)*GY(JN)+DZ(JN)*GZ(JN)
          END DO
C
C         ----- BRANCH IF LINEAR DIHEDRAL -----
C                             
         DO JN = 1,NPA
!#IFDEF CRAY_PVP
!            BIT = ONE/FXI(JN)
!            BIK = ONE/FYI(JN)
!            Z10 = CVMGT(ZERO,BIT,TENM3.GT.FXI(JN))
!            Z20 = CVMGT(ZERO,BIK,TENM3.GT.FYI(JN))
!#ELSE
            Z10 = ONE/FXI(JN)
            Z20 = ONE/FYI(JN)
            IF (TM24 .GT. FXI(JN)) Z10 = ZERO
            IF (TM24 .GT. FYI(JN)) Z20 = ZERO
!#ENDIF
            Z12 = Z10*Z20
            Z1(JN) = Z10
            Z2(JN) = Z20
!#IFDEF CRAY_PVP
!            FTEM = CVMGZ(ZERO,ONE,Z12)
!#ELSE
            FTEM = ZERO
            IF (Z12 .NE. ZERO) FTEM = ONE
!#ENDIF
            FZI(JN) = FTEM
            CT0 = MIN(ONE,CT(JN)*Z12)
            CT1 = MAX(-ONE,CT0)
            S = XKJ(JN)*(DZ(JN)*GY(JN)-DY(JN)*GZ(JN))+
     Q          YKJ(JN)*(DX(JN)*GZ(JN)-DZ(JN)*GX(JN))+
     Q          ZKJ(JN)*(DY(JN)*GX(JN)-DX(JN)*GY(JN))
            AP0 = ACOS(CT1)
            AP1 = PI-SIGN(AP0,S)
            CT(JN) = AP1
!1050    IF(AP1 .GT. PI)THEN
!        AP1 = AP1-2*PI
!        GOTO 1050
!        ELSE
!1050	IF(AP1 .LT. 0.0)THEN
!        AP1 = AP1+2*PI
!        GOTO 1050
!        ENDIF

            CT(JN) = AP1
            CPHI(JN) = COS(AP1)
            SPHI(JN) = SIN(AP1)
         END DO
C
C         ----- CALCULATE THE ENERGY AND THE DERIVATIVES WITH RESPECT TO
C               COSPHI -----
C
        DO JN = 1,NPA
            CT0 = CT(JN)
!1030 	IF(CT0 .GT. PI)THEN
!	CT0 = CT0-2*PI
!	GOTO 1030
!	ELSE
!1030	IF(CT0 .LT. 0.0)THEN
!        CT0 = CT0+2*PI
!	GOTO 1030
!	ENDIF

            COSNP = COS(CT0)
            SINNP = SIN(CT0)
!	WRITE(100,*) JN, SPHI(JN),SINNP
!1040    IF(3*CT0 .GT. PI)THEN
!        CT0 = CT0 -2.0/3.0*PI
!        GOTO 1040
!        ELSE
!1040	IF(3*CT0 .LT. 0.0)THEN
!        CT0 = CT0 +2.0/3.0*PI
!        GOTO 1040

!        ENDIF


            COSNP3 = COS(CT0*3.0)
            SINNP3 = SIN(CT0*3.0)

!DEBUG LINES
!             IF(JN .LE. 10)THEN
!               WRITE(*,*) COSNP, GAMC11(JN), COSNP3, 2*GAMC31(JN)
!               WRITE(*,*) SINNP, GAMS11(JN), SINNP3, 2*GAMS31(JN)

!            END IF



!LATER            EPW(JN) = (PK(MC)+COSNP*GAMC(MC)+SINNP*GAMS(MC))*FZI(JN)
!            IF(IDECOMP.EQ.1 .OR. IDECOMP.EQ.2) THEN
!              II = (IP(JN+IST) + 3)/3
!              JJ = (JP(JN+IST) + 3)/3
!              KK = (IABS(KP(JN+IST)) + 3)/3
!              LL = (IABS(LP(JN+IST)) + 3)/3
!              CALL DECPHI(XX,IX,II,JJ,KK,LL,EPW(JN))
!            ENDIF

! HERE IS THE ENERGY PART

            ENERGY =  ENERGY + (3.0/2.0*PK(JN)-GAMC1(JN)*COSNP - 
     Q GAMS1(JN)*SINNP - GAMC3(JN)*COSNP3 - GAMS3(JN)*SINNP3)*FZI(JN)
!	IF(FZI(JN) .EQ. 0.0)THEN
!	WRITE(77,*) JN, FZI(JN)
!	ENDIF
! END OF ENERGY PART(AT LEAST UNTIL THE BOTTOM OF THIS ROUTINE

	   DF0 = (GAMS1(JN)*COSNP - GAMC1(JN)*SINNP + 3*GAMC3(JN)*COSNP3 - 3*GAMC3(JN)*SINNP3)

            DF0 = -((GAMC1(JN)*SINNP-GAMS1(JN)*COSNP)
     Q + 3*(GAMC3(JN)*SINNP3-GAMS3(JN)*COSNP3))

            DUMS = SPHI(JN)+SIGN(TM24,SPHI(JN))
!	WRITE(89,*) JN, SPHI(JN)

!            DFLIM = GAMC(JN)*(PN(MC)-GMUL(INC)+GMUL(INC)*CPHI(JN))
! DFLIM WAS AS IS WRITTEN ABOVE, BUT IF SPHI IS SMALL ~ 0, THEN CPHI
! ~ 1, WHICH MEANS THAT THE TERMS OF GMUL(GMUL IS ZERO FOR ODD POWERED DIHEDRALS) WILL ALMOST PERFECTLY CANCEL.
! AND ALL YOU WILL HAVE LEFT IS PN, WHICH IN THIS CASE IS THE 1+3=4

            DFLIM = GAMC1(JN) + 3*GAMC3(JN)

!#IFDEF CRAY_PVP
!            DF1 = CVMGT(DFLIM,DF0/DUMS,TM06.GT.ABS(DUMS))
!#ELSE
            DF1 = DF0/DUMS
            IF(TM24.GT.ABS(DUMS))THEN
	     DF1 = DFLIM
            ENDIF

!#ENDIF
            DF(JN) = DF1*FZI(JN)
	
!	WRITE(88,"(I4,5F12.8)") JN, DF(JN), SPHI(JN), CPHI(JN), GAMC1(JN), GAMS1(JN)
          END DO
C                                     
C         ----- NOW DO TORSIONAL FIRST DERIVATIVES -----
C
         DO JN = 1,NPA
C
C           ----- NOW, SET UP ARRAY DC = FIRST DER. OF COSPHI W/RESPECT
C                 TO THE CARTESIAN DIFFERENCES T -----
C
            Z11 = Z1(JN)*Z1(JN)
            Z12 = Z1(JN)*Z2(JN)
            Z22 = Z2(JN)*Z2(JN)
            DC1 = -GX(JN)*Z12-CPHI(JN)*DX(JN)*Z11
            DC2 = -GY(JN)*Z12-CPHI(JN)*DY(JN)*Z11
            DC3 = -GZ(JN)*Z12-CPHI(JN)*DZ(JN)*Z11
            DC4 =  DX(JN)*Z12+CPHI(JN)*GX(JN)*Z22
            DC5 =  DY(JN)*Z12+CPHI(JN)*GY(JN)*Z22
            DC6 =  DZ(JN)*Z12+CPHI(JN)*GZ(JN)*Z22
C
C           ----- UPDATE THE FIRST DERIVATIVE ARRAY -----
C
            DR1 = DF(JN)*(DC3*YKJ(JN) - DC2*ZKJ(JN))
            DR2 = DF(JN)*(DC1*ZKJ(JN) - DC3*XKJ(JN))
            DR3 = DF(JN)*(DC2*XKJ(JN) - DC1*YKJ(JN))
            DR4 = DF(JN)*(DC6*YKJ(JN) - DC5*ZKJ(JN))
            DR5 = DF(JN)*(DC4*ZKJ(JN) - DC6*XKJ(JN))
            DR6 = DF(JN)*(DC5*XKJ(JN) - DC4*YKJ(JN))
            DRX = DF(JN)*(-DC2*ZIJ(JN) + DC3*YIJ(JN) +
     +               DC5*ZKL(JN) - DC6*YKL(JN))
            DRY = DF(JN)*( DC1*ZIJ(JN) - DC3*XIJ(JN) -
     +               DC4*ZKL(JN) + DC6*XKL(JN))
            DRZ = DF(JN)*(-DC1*YIJ(JN) + DC2*XIJ(JN) +
     +               DC4*YKL(JN) - DC5*XKL(JN))
 
            I3 = IP(JN)
            J3 = JP(JN)
            K3 = KP(JN)
            L3 = LP(JN)


            GRAD(I3*3-2) =  GRAD(I3*3-2) +  DR1
            GRAD(I3*3-1) =  GRAD(I3*3-1) +  DR2
            GRAD(I3*3)   =  GRAD(I3*3)   +  DR3
            GRAD(J3*3-2) =  GRAD(J3*3-2) +  DRX -  DR1
            GRAD(J3*3-1) =  GRAD(J3*3-1) +  DRY -  DR2
            GRAD(J3*3)   =  GRAD(J3*3)   +  DRZ -  DR3
            GRAD(K3*3-2) =  GRAD(K3*3-2) -  DRX -  DR4
            GRAD(K3*3-1) =  GRAD(K3*3-1) -  DRY -  DR5
            GRAD(K3*3)   =  GRAD(K3*3)   -  DRZ -  DR6
            GRAD(L3*3-2) =  GRAD(L3*3-2) +  DR4
            GRAD(L3*3-1) =  GRAD(L3*3-1) +  DR5
            GRAD(L3*3)   =  GRAD(L3*3)   +  DR6

          END DO

          END


!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^END OF GODIHEDRAL^^^^^^^^^^^^^^^^^^^^^^^^^^^


!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
!* GOCONTACTS: COMPUTES THE FORCE ON ALL ATOMS DUE TO CONTACTS VIA A   *
!* 10-12 POTENTIAL                                                     *
!***********************************************************************

      SUBROUTINE GOCONTACTS(X,Y,Z,GRAD,ENERGY,
     Q NATOMS,IC,JC,SIGMA,EPSC,NC)
      USE KEY
      IMPLICIT NONE
      INTEGER I, N, J,NATOMS,NC

      DOUBLE PRECISION X(NATOMS), Y(NATOMS), Z(NATOMS) 
     Q , GRAD(3*NATOMS), ENERGY
      DOUBLE PRECISION DX,DY,DZ

      INTEGER C1, C2, CONFID, Q, SC1, SC2, CF1, CF2
      DOUBLE PRECISION  R2, RM2, RM10, F_OVER_R, DSIG, DEPS, 
     Q S1, S2, EP1, EP2, R1, RC,R, SUMMM

        DOUBLE PRECISION SIGMA(NC), EPSC(NC)
        INTEGER IC(NC), JC(NC)


!      Q = 0
!      CONTS = 0

!      DO I=1, NC
!         COUNT(I) = 0
!      END DO
!	WRITE(89,*) NC
	DO I=1, NC
	
           C1 = IC(I)
           C2 = JC(I)
!        WRITE(*,*) C1, C2

	DX = X(C1) - X(C2)

 	DY = Y(C1) - Y(C2)

	DZ = Z(C1) - Z(C2)

	  R2 = DX**2 + DY**2 + DZ**2

	      RM2 = 1.0/R2
              RM2 = RM2*SIGMA(I)
	      RM10 = RM2**5


	ENERGY = ENERGY + EPSC(I)*RM10*(5*RM2-6.0)
!         ENERGY=ENERGY+EPSC(I)*RM10*(5*RM2-6)
	F_OVER_R = -EPSC(I)*60.0*RM10*(RM2-1.0)/R2
!	WRITE(99,*) F_OVER_R,C1,C2,I
	!WRITE(*,*) F_OVER_R
!         F_OVER_R = -EPSC(I)*RM10*(RM2-1.0)*60.0/R2

! NOW ADD THE ACCELERATION 
	      GRAD(3*C1-2) = GRAD(3*C1-2) + F_OVER_R * DX
	      GRAD(3*C1-1) = GRAD(3*C1-1) + F_OVER_R * DY
	      GRAD(3*C1)   = GRAD(3*C1)   + F_OVER_R * DZ

 	      GRAD(3*C2-2) =  GRAD(3*C2-2) - F_OVER_R * DX
	      GRAD(3*C2-1) =  GRAD(3*C2-1) - F_OVER_R * DY
	      GRAD(3*C2)   =  GRAD(3*C2)   - F_OVER_R * DZ
!	WRITE(89,*) C1,C2
!	WRITE(90,*) DX,DY,DZ
 !       WRITE(100,*) F_OVER_R, EPSC(I),SIGMA(I), R2,RM2,RM10
              ENDDO
	!STOP

      END

!^^^^^^^^^^^^^^^^^^^^^^^^^^^^END OF GOCONTACTS^^^^^^^^^^^^^^^^^^^^^^^^^^^


!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
!* GONONCONTACTS COMPUTES THE FORCES DUE TO NON NATIVE CONTACTS       *
!**********************************************************************

      SUBROUTINE GONONCONTACTS(X,Y,Z,GRAD, ENERGY, 
     Q NATOMS, INC, JNC, NCSIGMA,NNCSIGMA,NNC)
      USE KEY
      IMPLICIT NONE
      INTEGER I, N, J, AN, NATOMS

      DOUBLE PRECISION X(NATOMS), Y(NATOMS), Z(NATOMS), 
     Q GRAD(3*NATOMS), ENERGY

      INTEGER C1, C2
      DOUBLE PRECISION  R2, RM2, RM14, F_OVER_R 

	INTEGER NNC 

        DOUBLE PRECISION NNCSIGMA(NNC),NCSIGMA(NNC)
        INTEGER INC(NNC), JNC(NNC)
      DOUBLE PRECISION DX,DY,DZ



!      WRITE(*,*) NPAIRNUM
	DO I=1, NNC
           
           C1 = INC(I)
           C2 = JNC(I)

	DX = X(C1) - X(C2)

 	DY = Y(C1) - Y(C2)

	DZ = Z(C1) - Z(C2)

	  R2 = DX**2 + DY**2 + DZ**2

             RM2 = 1/R2
             RM14 = RM2**7

! NNCSIGMA1 IS ACTUALLY 12*EPS*SIGMA**12 (LOOK AT READ.F AND INIT.F)

!NCSIGMA(I), NNCEPS(I
		ENERGY = ENERGY  + NCSIGMA(I)**6/R2**6
!              ENERGY = ENERGY + NNCSIGMA(I)*RM14*R2/12.0
		F_OVER_R = - 12.0*NCSIGMA(I)**6/R2**7


! F_OVER_R IS THE FORCE OVER THE MAGNITUDE OF R SO THERE IS NO NEED TO RESOLVE
! THE DX, DY AND DZ INTO UNIT VECTORS
!              F_OVER_R = -NNCSIGMA(I)*RM14

! NOW ADD THE ACCELERATION 
	      GRAD(C1*3-2) = GRAD(C1*3-2) + F_OVER_R * DX
	      GRAD(C1*3-1) = GRAD(C1*3-1) + F_OVER_R * DY
	      GRAD(C1*3)   = GRAD(C1*3)   + F_OVER_R * DZ

 	      GRAD(C2*3-2) =  GRAD(C2*3-2) - F_OVER_R * DX
	      GRAD(C2*3-1) =  GRAD(C2*3-1) - F_OVER_R * DY
	      GRAD(C2*3)   =  GRAD(C2*3)   - F_OVER_R * DZ

           END DO


      END

!^^^^^^^^^^^^^^^^^^^^^^^^^^^END OF GONONCONTACTS^^^^^^^^^^^^^^^^^^^^^^^^^


