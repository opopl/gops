C   OPTIM: A PROGRAM FOR OPTIMIZING GEOMETRIES AND CALCULATING REACTION PATHWAYS
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C
C********************************************************************
C
      SUBROUTINE EIG(A,B,L,N,N1)
      IMPLICIT NONE
C
C DIAGONALIZATION BY THE JACOBI METHOD.
C A - MATRIX TO BE DIAGONALIZED (EIGENVALUES RETURNED IN DIAGONAL
C        ELEMENTS OF A).  IF YOU WANT TO SAVE A, YOU MUST DO THIS BEFORE
C        CALLING EIG.  SET N TO THE SAME VALUE AS L.
C B - EIGENVECTORS
C L - DIMENSION OF A AND B
C N - SIZE OF SUBMATRIX USED
C N1 - A FLAG INDICATING WHETHER THE EIGENVECTORS AND
C      EIGENVALUES ARE TO BE REORDERED.
C
CSW      1
      INTEGER MU, MM, J, II, JI, L, N, N1, ONE, IOFF, I, IM1, JJ
      DOUBLE PRECISION A(L,L),B(L,L)
      DOUBLE PRECISION W2, W1, C, T, ALP, ALN, D, SUM, S, DIFF, R, Q, P, ZER, TOL, TOL2
      DATA ZER/0.D00/,ONE/1.D00/
CSW     2
      TOL=1.D-14
      TOL2=1.D-10
      JJ=0
      IOFF=0
      B(1,1)=ONE
      IF(N.EQ.1) RETURN
      DO 20 I=2,N
         IM1=I-1
         DO 10 J=1,IM1
            B(I,J)=ZER
            B(J,I)=ZER
10       CONTINUE
         B(I,I)=ONE
20    CONTINUE
C
C FIRST SEE IF MATRIX IS ALREADY DIAGONAL- IF SO THEN
C  TAKE APPROPRIATE ACTION
C
      DO II=1,L
         DO JI=II+1,L
           IF(DABS(A(II,JI)).GT.TOL2)IOFF=IOFF+1
           IF(DABS(A(JI,II)).GT.TOL2)IOFF=IOFF+1
         ENDDO
      ENDDO
      IF(IOFF.EQ.0)THEN
          B(1:L,1:L)=0.0D0
          DO 40 I=1,L
          B(I,I)=ONE
40        CONTINUE
      ELSE
50    P=ZER
      DO 70 I=2,N
      IM1=I-1
      DO 60 J=1,IM1
      Q=A(I,J)
      IF(P.GE. ABS(Q)) GO TO 60
      P= ABS(Q)
      II=I
      JJ=J
60    CONTINUE
70    CONTINUE
      IF(P.EQ.0.) GO TO 140
      P=A(II,II)
      Q=A(II,JJ)
      R=A(JJ,JJ)
      DIFF=0.5D0*(P-R)
      IF( ABS(DIFF).LT. ABS(Q)) GO TO 80
      IF( ABS(Q/DIFF).GT.TOL) GO TO 80
      A(II,JJ)=ZER
      A(JJ,II)=ZER
      GO TO 50
80    S=SQRT(0.250*(P-R)**2+Q**2)
      SUM=0.5D0*(P+R)
      D=R*P-Q**2
      IF(SUM.GT.ZER) GO TO 90
      ALN=SUM-S
      ALP=D/ALN
      GO TO 100
90    ALP=SUM+S
      ALN=D/ALP
100   IF(DIFF.GT.ZER) GO TO 110
      T=Q/(DIFF-S)
      A(II,II)=ALN
      A(JJ,JJ)=ALP
      GO TO 120
110   T=Q/(DIFF+S)
      A(II,II)=ALP
      A(JJ,JJ)=ALN
120   C=1.0/SQRT(1.0+T**2)
      S=T*C
      A(II,JJ)=ZER
      A(JJ,II)=ZER
      DO 130 I=1,N
      P=B(I,II)
      Q=B(I,JJ)
      B(I,II)=C*P+S*Q
      B(I,JJ)=C*Q-S*P
      IF(I.EQ.II.OR.I.EQ.JJ) GO TO 130
      P=A(I,II)
      Q=A(I,JJ)
      R=C*P+S*Q
       A(I,II)=R
      A(II,I)=R
      R=Q*C-P*S
      A(I,JJ)=R
      A(JJ,I)=R
130   CONTINUE
      GO TO 50
      ENDIF
140   IF(N1.EQ.1) RETURN
      MM=N-1
      DO I=1,MM
      II=I+1
      DO J=II,N
      IF(A(I,I)-A(J,J)) 170,150,150
150   W1=A(I,I)
      A(I,I)=A(J,J)
      A(J,J)=W1
      DO MU=1,N
         W2=B(MU,I)
         B(MU,I)=B(MU,J)
         B(MU,J)=W2
      ENDDO
170   CONTINUE
      ENDDO
      ENDDO
      RETURN
      END
