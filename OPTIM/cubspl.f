      SUBROUTINE CUBSPL ( TAU, C, N, IBCBEG, IBCEND )
C  FROM  * A PRACTICAL GUIDE TO SPLINES *  BY C. DE BOOR    
C     ************************  INPUT  ***************************
C     N = NUMBER OF DATA POINTS. ASSUMED TO BE .GE. 2.
C     (TAU(I), C(1,I), I=1,...,N) = ABSCISSAE AND ORDINATES OF THE
C        DATA POINTS. TAU IS ASSUMED TO BE STRICTLY INCREASING.
C     IBCBEG, IBCEND = BOUNDARY CONDITION INDICATORS, AND
C     C(2,1), C(2,N) = BOUNDARY CONDITION INFORMATION. SPECIFICALLY,
C        IBCBEG = 0  MEANS NO BOUNDARY CONDITION AT TAU(1) IS GIVEN.
C           IN THIS CASE, THE NOT-A-KNOT CONDITION IS USED, I.E. THE
C           JUMP IN THE THIRD DERIVATIVE ACROSS TAU(2) IS FORCED TO
C           ZERO, THUS THE FIRST AND THE SECOND CUBIC POLYNOMIAL PIECES
C           ARE MADE TO COINCIDE.)
C        IBCBEG = 1  MEANS THAT THE SLOPE AT TAU(1) IS MADE TO EQUAL
C           C(2,1), SUPPLIED BY INPUT.
C        IBCBEG = 2  MEANS THAT THE SECOND DERIVATIVE AT TAU(1) IS
C           MADE TO EQUAL C(2,1), SUPPLIED BY INPUT.
C        IBCEND = 0, 1, OR 2 HAS ANALOGOUS MEANING CONCERNING THE
C           BOUNDARY CONDITION AT TAU(N), WITH THE ADDITIONAL INFOR-
C           MATION TAKEN FROM C(2,N).
C     ***********************  OUTPUT  **************************
C     C(J,I), J=1,...,4; I=1,...,L (= N-1) = THE POLYNOMIAL COEFFICIENTS
C        OF THE CUBIC INTERPOLATING SPLINE WITH INTERIOR KNOTS (OR
C        JOINTS) TAU(2), ..., TAU(N-1). PRECISELY, IN THE INTERVAL
C        (TAU(I), TAU(I+1)), THE SPLINE F IS GIVEN BY
C           F(X) = C(1,I)+H*(C(2,I)+H*(C(3,I)+H*C(4,I)/3.)/2.)
C        WHERE H = X - TAU(I). THE FUNCTION PROGRAM *PPVALU* MAY BE
C        USED TO EVALUATE F OR ITS DERIVATIVES FROM TAU,C, L = N-1,
C        AND K=4.
      INTEGER IBCBEG,IBCEND,N,   I,J,L,M
      DOUBLE PRECISION C(4,N),TAU(N),   DIVDF1,DIVDF3,DTAU,G
C****** A TRIDIAGONAL LINEAR SYSTEM FOR THE UNKNOWN SLOPES S(I) OF
C  F  AT TAU(I), I=1,...,N, IS GENERATED AND THEN SOLVED BY GAUSS ELIM-
C  INATION, WITH S(I) ENDING UP IN C(2,I), ALL I.
C     C(3,.) AND C(4,.) ARE USED INITIALLY FOR TEMPORARY STORAGE.
      L = N-1
COMPUTE FIRST DIFFERENCES OF TAU SEQUENCE AND STORE IN C(3,.). ALSO,
COMPUTE FIRST DIVIDED DIFFERENCE OF DATA AND STORE IN C(4,.).
      DO 10 M=2,N
         C(3,M) = TAU(M) - TAU(M-1)
   10    C(4,M) = (C(1,M) - C(1,M-1))/C(3,M)
CONSTRUCT FIRST EQUATION FROM THE BOUNDARY CONDITION, OF THE FORM
C             C(4,1)*S(1) + C(3,1)*S(2) = C(2,1)
      IF (IBCBEG-1)                     11,15,16
   11 IF (N .GT. 2)                     GO TO 12
C     NO CONDITION AT LEFT END AND N = 2.
      C(4,1) = 1.
      C(3,1) = 1.
      C(2,1) = 2.*C(4,2)
                                        GO TO 25
C     NOT-A-KNOT CONDITION AT LEFT END AND N .GT. 2.
   12 C(4,1) = C(3,3)
      C(3,1) = C(3,2) + C(3,3)
      C(2,1) =((C(3,2)+2.*C(3,1))*C(4,2)*C(3,3)+C(3,2)**2*C(4,3))/C(3,1)
                                        GO TO 19
C     SLOPE PRESCRIBED AT LEFT END.
   15 C(4,1) = 1.
      C(3,1) = 0.
                                        GO TO 18
C     SECOND DERIVATIVE PRESCRIBED AT LEFT END.
   16 C(4,1) = 2.
      C(3,1) = 1.
      C(2,1) = 3.*C(4,2) - C(3,2)/2.*C(2,1)
   18 IF(N .EQ. 2)                      GO TO 25
C  IF THERE ARE INTERIOR KNOTS, GENERATE THE CORRESP. EQUATIONS AND CAR-
C  RY OUT THE FORWARD PASS OF GAUSS ELIMINATION, AFTER WHICH THE M-TH
C  EQUATION READS    C(4,M)*S(M) + C(3,M)*S(M+1) = C(2,M).
   19 DO 20 M=2,L
         G = -C(3,M+1)/C(4,M-1)
         C(2,M) = G*C(2,M-1) + 3.*(C(3,M)*C(4,M+1)+C(3,M+1)*C(4,M))
   20    C(4,M) = G*C(3,M-1) + 2.*(C(3,M) + C(3,M+1))
CONSTRUCT LAST EQUATION FROM THE SECOND BOUNDARY CONDITION, OF THE FORM
C           (-G*C(4,N-1))*S(N-1) + C(4,N)*S(N) = C(2,N)
C     IF SLOPE IS PRESCRIBED AT RIGHT END, ONE CAN GO DIRECTLY TO BACK-
C     SUBSTITUTION, SINCE C ARRAY HAPPENS TO BE SET UP JUST RIGHT FOR IT
C     AT THIS POINT.
      IF (IBCEND-1)                     21,30,24
   21 IF (N .EQ. 3 .AND. IBCBEG .EQ. 0) GO TO 22
C     NOT-A-KNOT AND N .GE. 3, AND EITHER N.GT.3 OR  ALSO NOT-A-KNOT AT
C     LEFT END POINT.
      G = C(3,N-1) + C(3,N)
      C(2,N) = ((C(3,N)+2.*G)*C(4,N)*C(3,N-1)
     *            + C(3,N)**2*(C(1,N-1)-C(1,N-2))/C(3,N-1))/G
      G = -G/C(4,N-1)
      C(4,N) = C(3,N-1)
                                        GO TO 29
C     EITHER (N=3 AND NOT-A-KNOT ALSO AT LEFT) OR (N=2 AND NOT NOT-A-
C     KNOT AT LEFT END POINT).
   22 C(2,N) = 2.*C(4,N)
      C(4,N) = 1.
                                        GO TO 28
C     SECOND DERIVATIVE PRESCRIBED AT RIGHT ENDPOINT.
   24 C(2,N) = 3.*C(4,N) + C(3,N)/2.*C(2,N)
      C(4,N) = 2.
                                        GO TO 28
   25 IF (IBCEND-1)                     26,30,24
   26 IF (IBCBEG .GT. 0)                GO TO 22
C     NOT-A-KNOT AT RIGHT ENDPOINT AND AT LEFT ENDPOINT AND N = 2.
      C(2,N) = C(4,N)
                                        GO TO 30
   28 G = -1./C(4,N-1)
COMPLETE FORWARD PASS OF GAUSS ELIMINATION.
   29 C(4,N) = G*C(3,N-1) + C(4,N)
      C(2,N) = (G*C(2,N-1) + C(2,N))/C(4,N)
CARRY OUT BACK SUBSTITUTION
   30 J = L 
   40    C(2,J) = (C(2,J) - C(3,J)*C(2,J+1))/C(4,J)
         J = J - 1
         IF (J .GT. 0)                  GO TO 40
C****** GENERATE CUBIC COEFFICIENTS IN EACH INTERVAL, I.E., THE DERIV.S
C  AT ITS LEFT ENDPOINT, FROM VALUE AND SLOPE AT ITS ENDPOINTS.
      DO 50 I=2,N
         DTAU = C(3,I)
         DIVDF1 = (C(1,I) - C(1,I-1))/DTAU
         DIVDF3 = C(2,I-1) + C(2,I) - 2.*DIVDF1
         C(3,I-1) = 2.*(DIVDF1 - C(2,I-1) - DIVDF3)/DTAU
   50    C(4,I-1) = (DIVDF3/DTAU)*(6./DTAU)
                                        RETURN
      END
