C   OPTIM: A PROGRAM FOR OPTIMIZING GEOMETRIES AND CALCULATING REACTION PATHWAYS
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C PERTURBS ONE ANGLE AS DEFINED BY KEYWORD TWISTDIHE NMODE DPERT
C DMODE REFERS TO DIHEDRALS IN ORDER BACKBONE, SIDECHAIN.
C
      SUBROUTINE UNRSTWISTDIHE(X,Y,Z,DMODE,DPERT)
      USE COMMONS 
      USE MODUNRES
      IMPLICIT NONE

      DOUBLE PRECISION P,ANGLE,PINT(NVARU)
      REAL*8 X(NATOMS),Y(NATOMS),Z(NATOMS)
      REAL*8 DPERT
      INTEGER DMODE,DMODEMOD,NUMMODES,IICD,I1,J1
      LOGICAL L1,L2,SMARTMOVE
C
      NUMMODES=NPHI+NSIDE

      PRINT *,'NUMMODES,DMODE,DPERT',NUMMODES,DMODE,DPERT
      IF ((DMODE.GT.NUMMODES).OR.(DMODE.LT.-NUMMODES)) THEN
         PRINT *,'INDEX OF MODE TO BE PERTURBED IS LARGER THAN NUMBER OF DIHEDRAL ANGLES IN PROTEIN'
         STOP
      ENDIF
C     
C DPERT SHOULD BE ENTERED IN DEGREES IN ODATA
C
      IF (DMODE.LT.0) THEN
         ANGLE=-1.0D0*DPERT/57.29577951D0
         DMODEMOD=-DMODE
      ELSE
         ANGLE=DPERT/57.29577951D0
         DMODEMOD=DMODE
      ENDIF

!CALL GEOM_TO_VAR(NVARU,PINT)
C SO PINT NOW CONTAINS OLD UNRES INTERNAL COORDINATES (IN RADIANS!!). ORDER IS BACKBONE DIHEDRALS, 
C BACKBONE BOND ANGLES, SC POLAR ANGLES THEN SC DIHEDRAL ANGLES (CALLED OMEGA IN UNRES!!!). 
C
C     PRINT *,'TC ANGLE ',ANGLE
      IF(DMODEMOD.LE.NPHI) IICD=DMODEMOD
      IF(DMODEMOD.GT.NPHI) IICD=DMODEMOD+NRES-2+NSIDE

      PINT(IICD)=PINT(IICD)+ANGLE
C     IF (PINT(IICD).LE.-3.141592654D0) PINT(IICD)=PINT(IICD)+2.0D0*3.141592654D0
C     IF (PINT(IICD).GT.3.141592654D0) PINT(IICD)=PINT(IICD)-2.0D0*3.141592654D0

      WRITE (*,'(A20,I3,A2,1X,F10.5,1X,A8)') 'TWISTING DIHEDRAL ',DMODEMOD,'BY',ANGLE,'RADIANS'

C NOW UPDATE THE STORED INTERNAL COORDINATE ARRAYS AND THE CARTESIAN COORDINATES.
!CALL VAR_TO_GEOM(NVARU,PINT)
!CALL CHAINBUILD
      DO J1=1,NRES
C JMC COORDS CONTAINS X,Y,Z FOR ALL THE CALPHAS
         X(2*J1-1)=C(1,J1)
         Y(2*J1-1)=C(2,J1)
         Z(2*J1-1)=C(3,J1)
C JMC THEN X,Y,Z FOR THE SIDE CHAIN CENTROIDS
         X(2*J1)=C(1,J1+NRES)
         Y(2*J1)=C(2,J1+NRES)
         Z(2*J1)=C(3,J1+NRES)
      END DO

      RETURN

      END


      SUBROUTINE UNRSPERTDIHE(X,Y,Z,UNPMIN,UNPMAX,UNNMIN,UNNMAX,ISEED)
C ADAPTED FROM TAKESTEPCH IN GMIN
      USE COMMONS
      USE MODUNRES
      IMPLICIT NONE

      REAL*8 UNPMIN,UNPMAX,UNNMIN,UNNMAX
      REAL*8 P,ANGLE,DPRAND,RANDOM,STEP,PINT(NVARU)
      INTEGER          A,B,D,NP,NTEST1,NTEST2,I1,J1,RESNUM,ISEED
C
      REAL*8 X(NATOMS),Y(NATOMS),Z(NATOMS)
      REAL*8 XVEC(3*NATOMS),G(3*NATOMS),TWISTARRAY(NATOMS)
      REAL*8 EP1,EP2,E,EMIN1,EMIN2
      INTEGER IICD
      LOGICAL L1,L2,CHIRALFAIL
      LOGICAL TPP(NATOMS),TS(NATOMS)

C SET STEP (MAXIMUM TWIST IN ANY ONE DIHEDRAL) TO 180.D0
C THIS COULD BE AN INPUT PARAMETER

C     PRINT *,'UNPMIN,UNPMAX,UNNMIN,UNNMAX IN UNRSPERTDIHE',UNPMIN,UNPMAX,UNNMIN,UNNMAX,ISEED
      STEP=180.D0

C INITIALISE RANDOM NUMBER GENERATOR WITH INPUT SEED
      CALL SDPRND(ISEED)

!CALL GEOM_TO_VAR(NVARU,PINT)
C
C WILL BE SENT BACK TO 192 IF TOO MANY OR TOO FEW DIHEDRALS ARE ALTERED
C AS DETERMINED BY UNNMIN AND UNNMAX

192   CONTINUE
C
      B=0
      DO A=1,NPHI
        TPP(A)=.FALSE.
C
C  CALCULATE P, THE PROBABILITY OF TWISTING
C
        P=UNPMAX
C JMC TESTING        IF (REAL(A).LE.(0.5*NPHI)) THEN
C JMC TESTING          P=UNPMAX-A*((UNPMAX-UNPMIN)/(NPHI*0.5))
C JMC TESTING        ELSE
C JMC TESTING          P=UNPMIN+(A-0.5*NPHI)*((UNPMAX-UNPMIN)/(NPHI*0.5))
C JMC TESTING        END IF

        RANDOM=DPRAND()
C       PRINT *,'P, RANDOM',P,RANDOM
        IF (RANDOM.LT.P) THEN
           WRITE (*,'(A,I3)') 'TWISTING DIHEDRAL ',A
           TPP(A)=.TRUE.
           B=B+1
        END IF
      END DO

C JMC NOTE LOOP OVER NRES NOT NSIDE, TO TAKE INTO ACCOUNT GLYCINES AND CAPPING GROUPS.
      DO A=1,NRES
        TS(A)=.FALSE.
C SKIP IF GLYCINE ! JMC CAN USE CYCLE (F90)
        IF (ITYPE(A).EQ.10) GOTO 100

C  CALCULATE P, THE PROBABILITY OF TWISTING
         P=UNPMAX
C        IF (REAL(A).LE.(0.5E0*(NRES+1))) THEN
C          P=UNPMAX-(REAL(A)-1.E0)*(2.0E0*(UNPMAX-UNPMIN)/(NRES-1.E0))
C        ELSE
C          P=UNPMIN+(REAL(A)-(0.5E0*(NRES+1.E0)))*(2.0E0*(UNPMAX-UNPMIN)/(NRES-1.E0))
C        END IF

C          IF (REAL(RESNUM).LE.(0.5*NRES)) THEN
C            P=CHPMAX-A*((CHPMAX-CHPMIN)/(NRES*0.5))
C          ELSE
C            P=CHPMIN+(A-0.5*NRES)*((CHPMAX-CHPMIN)/(NRES*0.5))
C          END IF
C
        RANDOM=DPRAND()
        IF (RANDOM.LT.P) THEN
           WRITE (*,'(A,I3)') 'TWISTING DIHEDRAL ',A
           TS(A)=.TRUE.
           B=B+1
        END IF
100   CONTINUE
      END DO
C
C        PRINT *,'UNNMIN UNNMAX',UNNMIN,UNNMAX
C        PRINT *,'NPHIPSI NSIDECHAIN',NPHIPSI,NSIDECHAIN

      NTEST1=INT(UNNMIN*(NPHI+NSIDE))
      IF (NTEST1.LT.1) NTEST1=1
      NTEST2=INT(UNNMAX*(NPHI+NSIDE))

C     WRITE (*,'(A,I3,A,I3,A)') 'MUST SHIFT BETWEEN ',NTEST1,' AND ',NTEST2,' DIHEDRALS'
C     WRITE (*,'(A,I3)') 'ATTEMPTING TO SHIFT ',B

      IF (B.LT.NTEST1 .OR. B.GT.NTEST2) THEN
         WRITE (*,'(A)') 'TOO MANY DIHEDRALS SHIFTED - RETRYING'
        GOTO 192
      END IF

      DO A=1,NPHI
         IF (TPP(A)) THEN
            ANGLE=(DPRAND()-0.5D0)*2.0D0*STEP/57.29577951D0
            PINT(A)=PINT(A)+ANGLE
            PRINT *,'TWISTING DIHE ',A,' BY ',ANGLE
C              IF (PINT(A).LE.-3.141592654D0) PINT(A)=PINT(A)+2.0D0*3.141592654D0
C              IF (PINT(A).GT.3.141592654D0) PINT(A)=PINT(A)-2.0D0*3.141592654D0
         ENDIF
      ENDDO

      DO A=1,NRES
         IF (TS(A)) THEN
            IICD=A+2*NRES+NSIDE-5
            ANGLE=(DPRAND()-0.5D0)*2.0D0*STEP/57.29577951D0
            PINT(IICD)=PINT(IICD)+ANGLE
            PRINT *,'TWISTING DIHE ',A,' BY ',ANGLE
C              IF (PINT(IICD).LE.-3.141592654D0) PINT(IICD)=PINT(IICD)+2.0D0*3.141592654D0
C              IF (PINT(IICD).GT.3.141592654D0) PINT(IICD)=PINT(IICD)-2.0D0*3.141592654D0
         ENDIF
      ENDDO

C NOW UPDATE THE STORED INTERNAL COORDINATE ARRAYS AND THE CARTESIAN COORDINATES.
!CALL VAR_TO_GEOM(NVARU,PINT)
!CALL CHAINBUILD
      DO J1=1,NRES
C JMC COORDS CONTAINS X,Y,Z FOR ALL THE CALPHAS
         X(2*J1-1)=C(1,J1)
         Y(2*J1-1)=C(2,J1)
         Z(2*J1-1)=C(3,J1)
C JMC THEN X,Y,Z FOR THE SIDE CHAIN CENTROIDS
         X(2*J1)=C(1,J1+NRES)
         Y(2*J1)=C(2,J1+NRES)
         Z(2*J1)=C(3,J1+NRES)
      END DO

C JMC COMMENTED THESE LINES OUT...
C     DO J1=1,NATOMS
C        PRINT *,'PD X',X(J1)
C     ENDDO

      RETURN

      END

C PERTURBS ONE ANGLE AS DEFINED BY KEYWORD TWISTALL NMODE DPERT
C DMODE REFERS TO ANGLES IN ORDER BACKBONE DIHEDRALS, BACKBONE BOND ANGLES, SC POLAR ANGLES THEN SC DIHEDRAL ANGLES
C
      SUBROUTINE UNRSTWISTALL(X,Y,Z,DMODE,DPERT)
      USE COMMONS
      USE MODUNRES
      IMPLICIT NONE

      DOUBLE PRECISION P,ANGLE,PINT(NVARU)
      REAL*8 X(NATOMS),Y(NATOMS),Z(NATOMS)
      REAL*8 DPERT
      INTEGER DMODE,DMODEMOD,NUMMODES,IICD,I1,J1
      LOGICAL L1,L2,SMARTMOVE
C
      NUMMODES=NPHI+NTHETA+2*NSIDE

      PRINT *,'NUMMODES,DMODE,DPERT',NUMMODES,DMODE,DPERT
      IF ((DMODE.GT.NUMMODES).OR.(DMODE.LT.-NUMMODES)) THEN
         PRINT *,'INDEX OF MODE TO BE PERTURBED IS LARGER THAN NUMBER OF ANGLES IN PROTEIN'
         STOP
      ENDIF
C     
C DPERT SHOULD BE ENTERED IN DEGREES IN ODATA
C
      IF (DMODE.LT.0) THEN
         ANGLE=-1.0D0*DPERT/57.29577951D0
         DMODEMOD=-DMODE
      ELSE
         ANGLE=DPERT/57.29577951D0
         DMODEMOD=DMODE
      ENDIF

!CALL GEOM_TO_VAR(NVARU,PINT)
C SO PINT NOW CONTAINS OLD UNRES INTERNAL COORDINATES (IN RADIANS!!). ORDER IS BACKBONE DIHEDRALS, 
C BACKBONE BOND ANGLES, SC POLAR ANGLES THEN SC DIHEDRAL ANGLES (CALLED OMEGA IN UNRES!!!). 
C
C     PRINT *,'TC ANGLE ',ANGLE

      PINT(DMODEMOD)=PINT(DMODEMOD)+ANGLE
C JMC CALL TO VAR_TO_GEOM SORTS OUT PERIODICITIES FOR US, SO NO NEED TO IMPOSE RESTRICTIONS HERE.

      WRITE (*,'(A20,I3,A2,1X,F10.5,1X,A8)') 'TWISTING ANGLE ',DMODEMOD,' BY ',ANGLE,' RADIANS'

C NOW UPDATE THE STORED INTERNAL COORDINATE ARRAYS AND THE CARTESIAN COORDINATES.
!CALL VAR_TO_GEOM(NVARU,PINT)
!CALL CHAINBUILD
      DO J1=1,NRES
C JMC COORDS CONTAINS X,Y,Z FOR ALL THE CALPHAS
         X(2*J1-1)=C(1,J1)
         Y(2*J1-1)=C(2,J1)
         Z(2*J1-1)=C(3,J1)
C JMC THEN X,Y,Z FOR THE SIDE CHAIN CENTROIDS
         X(2*J1)=C(1,J1+NRES)
         Y(2*J1)=C(2,J1+NRES)
         Z(2*J1)=C(3,J1+NRES)
      END DO

      RETURN

      END
