C   OPTIM: A PROGRAM FOR OPTIMIZING GEOMETRIES AND CALCULATING REACTION PATHWAYS
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C
C  TIFFANY S TB ROUTINE FOR C.
C
      SUBROUTINE DFTB(N,XS,DERIV1ST,ENERGY,GTEST,XMULREAL)
      USE KEY
      IMPLICIT NONE
      LOGICAL GTEST
      INTEGER I, J, K, AI, AJ, NDIM,NMAX, I2, J2, K2, LWORK, INFO, J1, N, NDIAG
      DOUBLE PRECISION DIST,XMULREAL,WORK(320*N),DPRAND,S(4*N,4*N),SORIG(4*N,4*N),
     &                 ENERGY,XS(3*N),HB(4*N,4*N),HA(4*N,4*N),VA(4*N,4*N),VB(4*N,4*N)

      DOUBLE PRECISION R(N,N), ABSTOL,DIRCOS(N,N,3),DIAG(4*N),DERIV1ST(3*N),DIAGA(4*N),DIAGB(4*N)

      DOUBLE PRECISION SSSSIG,SSPSIG,SPPSIG,SPPPI,EPSSAC,EPSSBC,EPSPAC,EPSPBC,HSSSIGA,HSPSIGA,
     &        HPPSIGA,HPPPIA,HSSSIGB,HSPSIGB,HPPSIGB,HPPPIB

      PARAMETER(EPSSAC=-0.519289D0, EPSPAC=-0.216472D0, EPSSBC=-0.434382D0, EPSPBC=-0.216472D0)
   
      INTEGER IWORK(20*N), IFAIL(4*N) 

C     COMMON /RDIST/ R, DIRCOS, DIAGA, DIAGB

      DOUBLE PRECISION UREP,REP
      LOGICAL DIAGTEST
      COMMON /FAIL/ DIAGTEST

      LWORK=320*N
      XMUL=INT(XMULREAL)

C   CALCULATE DISTANCE MATRIX

      DO I=1,N
       I2=3*(I-1)
       R(I,I)=0.0D0
          DO J=I+1,N
            J2=3*(J-1)
            DIST=(XS(I2+1)-XS(J2+1))**2+(XS(I2+2)-XS(J2+2))**2+(XS(I2+3)-XS(J2+3))**2
             R(I,J)=SQRT(DIST)
             R(J,I)=R(I,J)

C   NOW THE DIRECTION COSINES
C   WHICH INCIDENTALLY ARE THE PROJECTIONS OF A UNIT VECTOR ONTO 
C   THE AXES AND NOT THE COSINES.
C   NOTE WE HAVE NOT CALCULATED DIRCOS(I,I)

            DO K=1,3
               DIRCOS(I,J,K)=(XS(J2+K)-XS(I2+K))/R(I,J)
               DIRCOS(J,I,K)=-DIRCOS(I,J,K)
               DIRCOS(I,I,K)=0.0D0
            END DO
C            PRINT*,'D1 IS',DIRCOS(I,J,1)
C            PRINT*,'D2 IS',DIRCOS(I,J,2)
C            PRINT*,'D3 IS',DIRCOS(I,J,3)

         END DO
      END DO 


C   CALCULATE REPULSIVE FREE ENERGY

      UREP=0.0D0

      DO I=1,N
         DO J=I+1,N

CC          PRINT*,'JS AND ATNOS ARE',I,J,IATNUM(I),IATNUM(J)
C REMEMBER  : THESE CALCUALTIONS ARE IN BOHR, NOT ANGSTROM

              CALL AREPCC(N,I,J,REP,R)

C        PRINT*,'REP IN H IS',REP

        UREP=REP+UREP

         REP=0.0D0

        ENDDO
      ENDDO

C      PRINT*,' NEW UREP IN H IS',UREP

C   ONLY INCLUDE OVERLAP OR INTERACTION WITH DIFFERENT ATOMS HERE.
               
      DO I=1,N
         AI=4*(I-1)
         DO J=I+1,N
            AJ=4*(J-1)

C   CALCULATE THE OVERLAP MATRIX S(I,J), RELATED TO THESE PARAMETERS
C   BY THE SLATER-KOSTER SCHEME

           CALL OVECC(N,I,J,SSSSIG, SSPSIG, SPPSIG, SPPPI, R)

           S((AI+1),(AJ+2))=DIRCOS(I,J,1)*SSPSIG
           S((AI+1),(AJ+3))=DIRCOS(I,J,2)*SSPSIG
           S((AI+1),(AJ+4))=DIRCOS(I,J,3)*SSPSIG

           S((AI+2),(AJ+1))=-DIRCOS(I,J,1)*SSPSIG
           S((AI+3),(AJ+1))=-DIRCOS(I,J,2)*SSPSIG
           S((AI+4),(AJ+1))=-DIRCOS(I,J,3)*SSPSIG

           S((AI+1),(AJ+1))=SSSSIG
 
           S((AI+2),(AJ+2))=DIRCOS(I,J,1)**2*SPPSIG+(1.0D0-DIRCOS(I,J,1)**2)*SPPPI
           S((AI+2),(AJ+3))=DIRCOS(I,J,1)*DIRCOS(I,J,2)*(SPPSIG-SPPPI)
           S((AI+2),(AJ+4))=DIRCOS(I,J,1)*DIRCOS(I,J,3)*(SPPSIG-SPPPI)

           S((AI+3),(AJ+2))=S((AI+2),(AJ+3))
           S((AI+3),(AJ+3))=DIRCOS(I,J,2)**2*SPPSIG+(1.0D0-DIRCOS(I,J,2)**2)*SPPPI
           S((AI+3),(AJ+4))=DIRCOS(I,J,2)*DIRCOS(I,J,3)*(SPPSIG-SPPPI)

           S((AI+4),(AJ+2))=S((AI+2),(AJ+4))
           S((AI+4),(AJ+3))=S((AI+3),(AJ+4))
           S((AI+4),(AJ+4))=DIRCOS(I,J,3)**2*SPPSIG+(1.0D0-DIRCOS(I,J,3)**2)*SPPPI
            
C   HAMILTONIAN IS FOUND USING THE SLATER-KOSTER SCHEME
C   AS SHOWN IN THEIR PAPER AND HARRISON S BOOK P.481
C   WHICH RELATES H TO THE PARAMETER V USING DIRECTION COSINES.
C   LAMBDA CHANGES FOR EACH I AND J
      
C MY CHANGE MEANS CONSTRUCTING  A AND B TYPE INTERACTION MATRICES
C AS AN UHF ANALOGUE

           CALL HAMCCA(N,I,J,HSSSIGA, HSPSIGA, HPPSIGA, HPPPIA, R)
           CALL HAMCCB(N,I,J,HSSSIGB, HSPSIGB, HPPSIGB, HPPPIB, R)

           HA((AI+1),(AJ+2))=DIRCOS(I,J,1)*HSPSIGA
           HA((AI+1),(AJ+3))=DIRCOS(I,J,2)*HSPSIGA
           HA((AI+1),(AJ+4))=DIRCOS(I,J,3)*HSPSIGA

           HA((AI+2),(AJ+1))=-DIRCOS(I,J,1)*HSPSIGA
           HA((AI+3),(AJ+1))=-DIRCOS(I,J,2)*HSPSIGA
           HA((AI+4),(AJ+1))=-DIRCOS(I,J,3)*HSPSIGA

           HB((AI+1),(AJ+2))=DIRCOS(I,J,1)*HSPSIGB
           HB((AI+1),(AJ+3))=DIRCOS(I,J,2)*HSPSIGB
           HB((AI+1),(AJ+4))=DIRCOS(I,J,3)*HSPSIGB

           HB((AI+2),(AJ+1))=-DIRCOS(I,J,1)*HSPSIGB
           HB((AI+3),(AJ+1))=-DIRCOS(I,J,2)*HSPSIGB
           HB((AI+4),(AJ+1))=-DIRCOS(I,J,3)*HSPSIGB

C  TRANSFORM THE HA INTO SK ELEMENTS....

           HA((AI+1),(AJ+1))=HSSSIGA

           HA((AI+2),(AJ+2))=DIRCOS(I,J,1)**2*HPPSIGA+(1.0D0-DIRCOS(I,J,1)**2)*HPPPIA
           HA((AI+2),(AJ+3))=DIRCOS(I,J,1)*DIRCOS(I,J,2)*(HPPSIGA-HPPPIA)
           HA((AI+2),(AJ+4))=DIRCOS(I,J,1)*DIRCOS(I,J,3)*(HPPSIGA-HPPPIA)

           HA((AI+3),(AJ+2))=HA((AI+2),(AJ+3))
           HA((AI+3),(AJ+3))=DIRCOS(I,J,2)**2*HPPSIGA+(1.0D0-DIRCOS(I,J,2)**2)*HPPPIA
           HA((AI+3),(AJ+4))=DIRCOS(I,J,2)*DIRCOS(I,J,3)*(HPPSIGA-HPPPIA)

           HA((AI+4),(AJ+2))=HA((AI+2),(AJ+4))
           HA((AI+4),(AJ+3))=HA((AI+3),(AJ+4))
           HA((AI+4),(AJ+4))=DIRCOS(I,J,3)**2*HPPSIGA+(1.0D0-DIRCOS(I,J,3)**2)*HPPPIA

C NOW FOR THE BETA TYPE...

           HB((AI+1),(AJ+1))=HSSSIGB

           HB((AI+2),(AJ+2))=DIRCOS(I,J,1)**2*HPPSIGB+(1.0D0-DIRCOS(I,J,1)**2)*HPPPIB
           HB((AI+2),(AJ+3))=DIRCOS(I,J,1)*DIRCOS(I,J,2)*(HPPSIGB-HPPPIB)
           HB((AI+2),(AJ+4))=DIRCOS(I,J,1)*DIRCOS(I,J,3)*(HPPSIGB-HPPPIB)

           HB((AI+3),(AJ+2))=HB((AI+2),(AJ+3))
           HB((AI+3),(AJ+3))=DIRCOS(I,J,2)**2*HPPSIGB+(1.0D0-DIRCOS(I,J,2)**2)*HPPPIB
           HB((AI+3),(AJ+4))=DIRCOS(I,J,2)*DIRCOS(I,J,3)*(HPPSIGB-HPPPIB)

           HB((AI+4),(AJ+2))=HB((AI+2),(AJ+4))
           HB((AI+4),(AJ+3))=HB((AI+3),(AJ+4))
           HB((AI+4),(AJ+4))=DIRCOS(I,J,3)**2*HPPSIGB+(1.0D0-DIRCOS(I,J,3)**2)*HPPPIB

        ENDDO

C   INTERACTION/OVERLAP OF DIFFERENT AOS ON THE SAME ATOM
         
        DO K=1,4
           DO K2=K+1,4
              S((AI+K),(AI+K2))=0.0D0
C             H((AI+K),(AI+K2))=0.0D0

              HA((AI+K),(AI+K2))=0.0D0
              HB((AI+K),(AI+K2))=0.0D0
           ENDDO
        ENDDO

C   INTERACTION OF SAME AO ON THE SAME ATOM

         HA((AI+1),(AI+1))=EPSSAC
         HA((AI+2),(AI+2))=EPSPAC
         HA((AI+3),(AI+3))=EPSPAC
         HA((AI+4),(AI+4))=EPSPAC

         HB((AI+1),(AI+1))=EPSSBC
         HB((AI+2),(AI+2))=EPSPBC
         HB((AI+3),(AI+3))=EPSPBC
         HB((AI+4),(AI+4))=EPSPBC

      ENDDO

      DO I=1,4*N
         S(I,I)=1.0D0
      ENDDO

      DO I=1,4*N
        DO J=1,4*N
           SORIG(I,J)=S(I,J)
        ENDDO
      ENDDO

      NDIM=4*N
      NMAX=4*N

      DIAGTEST=.FALSE.

      ABSTOL=-1.0D0
      DO J1=1,4*N
         DIAG(J1)=1.0D100
      ENDDO
      CALL DSYGVX(1, 'V', 'I', 'U', NDIM, HA, NMAX, S, NMAX, 0.0D0,
     1     0.0D0, 1, 120, ABSTOL, NDIAG, DIAG, VA, NMAX, WORK, LWORK, IWORK, IFAIL, INFO)
C
C     CALL DSYGV( 1, 'V', 'U', NDIM, H, NMAX, S, NMAX, DIAG, WORK, LWORK, INFO )
C
      IF (DIAG(1).LT.DIAG(NDIM)) CALL EIGENSORT_VAL_ASC(DIAG,VA,NDIM,NMAX)
 
      IF (INFO.NE.0) THEN
         DIAGTEST=.TRUE.
         ENERGY=1.0D6*DPRAND() ! PUT IN DPRAND TO PREVENT ZERO EIGENVALUE IN SECDIAG
         DO J1=1,3*N
            DERIV1ST(J1)=1.0D10*DPRAND()
         ENDDO
         PRINT*,'ALPHA DFTB DIAGONALISATION FAILED - INFO=',INFO
         RETURN
      ENDIF

      DO I=1,4*N
         DIAGA(I)=DIAG(I)
      ENDDO

      DO I=1,4*N
        DO J=1,4*N
           S(I,J)=SORIG(I,J)
        END DO
      END DO

      DIAGTEST=.FALSE.

      DO J1=1,4*N
         DIAG(J1)=1.0D100
      ENDDO

      CALL DSYGVX(1, 'V', 'A', 'U', NDIM, HB, NMAX, S, NMAX, 0.0D0,
     1     0.0D0, 1, 120, ABSTOL, NDIAG, DIAG, VB, NMAX, WORK, LWORK, IWORK, IFAIL, INFO)

C     CALL DSYGV( 1, 'V', 'U', NDIM, H, NMAX, S, NMAX, DIAG, WORK, LWORK, INFO )
      IF (DIAG(1).LT.DIAG(NDIM)) CALL EIGENSORT_VAL_ASC(DIAG,VB,NDIM,NMAX)

      IF (INFO.NE.0) THEN
         DIAGTEST=.TRUE.
         ENERGY=1.0D6*DPRAND()
         DO J1=1,3*N
            DERIV1ST(J1)=1.0D10*DPRAND()
         ENDDO
         PRINT*,'DSYGV FAILED - INFO=',INFO
         RETURN
      ENDIF

      DO I=1,4*N
         DIAGB(I)=DIAG(I)
      ENDDO

      ENERGY=0.0D0

      DO J=4*N-119,4*N
         ENERGY=ENERGY+DIAGA(J)+DIAGB(J)
      ENDDO

C   FOR SINGLE ATOM THERE SHOULD BE NO CONTRIBUTION FROM THE
C   BOND COUNTING TERM
C      IF (N .EQ. 1) THEN
C         ENERGY=2*ENERGY
C      ELSE
C ALTERED WITH NO UREP TO FIGURE OUT WHAT MY UREP SHOULD BE...
          ENERGY=ENERGY+UREP
C           ENERGY=UREP+0.0D0
C TESTING THE REP PART OF THE POTENTIAL (DERIVS)

C      END IF

C   NOW CALL THE ALL NEW ORIGINALLY CRAFTED SUBROUTINE TO CALCULATE
C   THE FIRST DERIVATIVES.

      IF (GTEST) CALL DFDERIV1(XMUL,N,XS,DERIV1ST,VA,VB,R, DIRCOS, DIAGA, DIAGB)


      RETURN
      END
C   
C  SUBROUTINE TO EXPAND THE POLYNOMIAL SUM FOR THE OVERLAP MATRIX ELEMENTS
C  THIS IS BETWEEN SAME ELEMENT....SAME ELEMENT/DIFF ELEMENT WILL BE MORE
C   
      SUBROUTINE OVECC(N,K,L,SSSS,SSPS,SPPS,SPPP,R)
      IMPLICIT NONE
      INTEGER  K,L,N
      DOUBLE PRECISION R(N,N), QTB(N,N)

C     COMMON /RDIST/ R, DIRCOS, DIAGA, DIAGB

      DOUBLE PRECISION SSSS,SSPS,SPPS,SPPP,
     3                  D1,D2,D3,D4,D5,D6,A3,B3,
     4                 D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,
     5                 D19,D20,D21,D22,D23,D24,D25,D26,D27,D28,D29,
     6             D30,D31,D32,D33,D34,D35,D36,D37,D38,D39,D40

      PARAMETER (   D1=  0.4635980000 ,D2=-0.354943D0,
C OLD PARAM :D2= -0.3593880000 ,
     /  D3=  0.1597240000 ,D4= -0.0236036000
     / ,D5= -0.0160748000 ,D6=  0.0101939000 ,D7= -0.0010466800 ,D8= -0.0013805000
     / ,D9=  0.0007822820,D10= -0.0001806570,

     /  D11= -0.3627180000 ,D12=  0.2504088000 ,D13= -0.0459648000 ,D14= -0.0572412000
     / ,D15=  0.0499554000 ,D16= -0.0161908000 ,D17= -0.0007504350 ,D18=  0.0030270400
     / ,D19= -0.0013407800,D20=  0.0002213130,

     /  D21= -0.1381954000 , D22=0.021232D0,
C OLD PARAM: D22=  0.0272058000 ,
     /  D23=  0.1362280000 ,D24= -0.1495750000
     / ,D25=  0.0722040000 ,D26= -0.0144966000 ,D27= -0.0040281700 ,D28=  0.0047257800
     / ,D29= -0.0021491900,D30=  0.0004729620,

     /  D31=  0.3653820000 ,D32= -0.3031560000 ,D33=  0.1686080000 ,D34= -0.0580734000
     / ,D35=  0.0075940400 ,D36=  0.0040539700 ,D37= -0.0031628400 ,D38=  0.0011715700
     / ,D39= -0.0002414690,D40= -0.0000131366)


       A3=1.0D0
       B3=7.0D0

       QTB(K,L)=(R(K,L)-((B3+A3)/2.0D0))/((B3-A3)/2.0D0)

C       PRINT*,'R OF IJ IN OVERL IS',R(K,L)

C  SSSSIG

      IF (R(K,L).LT.6.858869592109767D0) THEN

      SSSS=D1 + D2*QTB(K,L) + D3*(-1.0D0 + 2.0D0*QTB(K,L)**2) 
     /    + D4*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    D5*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4) 
     /    + D6*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + D7*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + D8*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + D9*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + D10*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - D1/2.0D0 - 0.005280155435851808D0
     
      ELSE
       
      SSSS=0.0D0

       ENDIF

C   SSPSIG

            IF (R(K,L).LT.6.968036930355212D0) THEN

      SSPS= D11 + D12*QTB(K,L) + D13*(-1.0D0 + 2.0D0*QTB(K,L)**2)
     /    + D14*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    D15*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + D16*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + D17*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + D18*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + D19*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + D20*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - D11/2.0D0 - 0.0007691252996453457D0

      ELSE

      SSPS=0.0D0

       ENDIF

C *****
C WHEN USING FS PARAMS, SWAP PPS AND PPPI
C *****
C SPPSIG

            IF (R(K,L).LT.7.031215111280781D0) THEN

      SPPS= D21 + D22*QTB(K,L) + D23*(-1.0D0 + 2.0D0*QTB(K,L)**2)        
     /    + D24*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    D25*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + D26*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + D27*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + D28*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + D29*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + D30*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - D21/2.0D0 + 0.004483419251163735D0

          ELSE

        SPPS=0.0D0

         ENDIF

C   SPPPI

            IF (R(K,L).LT.6.4433341605186D0) THEN

      SPPP= D31 + D32*QTB(K,L) + D33*(-1.0D0 + 2.0D0*QTB(K,L)**2)        
     /    + D34*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    D35*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + D36*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + D37*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + D38*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + D39*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + D40*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - D31/2.0D0 + 0.0006053764295787245D0

          ELSE

      SPPP=0.0D0

          ENDIF

C       PRINT*,'IN OVERLAPCC, ELEMENTS ARE',SSSS,SSPS,SPPS,SPPP
C       PRINT*,'B3 IS',B3

C         IF (R(K,L).GT.B3) THEN
C          SSSS=0.0D0
C          SSPS=0.0D0
C          SPPS=0.0D0
C          SPPP=0.0D0
C         ENDIF

       RETURN
       END
   
C  SUBROUTINE TO EXPAND THE POLYNOMIAL SUM FOR THE OVERLAP MATRIX ELEMENTS
C  THIS IS BETWEEN SAME ELEMENT....SAME ELEMENT/DIFF ELEMENT WILL BE MORE
C   
      SUBROUTINE HAMCCA(N,K,L,SSSS,SSPS,SPPS,SPPP,R)
      IMPLICIT NONE
      INTEGER  K,L,N
      DOUBLE PRECISION R(N,N), QTB(N,N)

      DOUBLE PRECISION SSSS,SSPS,SPPS,SPPP,
     /     G1,G2,G3,
     7     G4,G5,G6,G7,G8,G9,G10,G11,G12,G13,G14,G15,G16,G17,G18,G19,G20,
     8     G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G33,G34,G35,G36,
     9     G37,G38,G39,G40,A2,B2

       PARAMETER (  G1= -0.4546540000 ,G2=  0.3501960000 ,G3= -0.1513000000 ,G4=  0.0159980000
     / ,G5=  0.0247918000 ,G6= -0.0192764000 ,G7=  0.0071180300 ,G8= -0.0002604590
     / ,G9= -0.0014905100,G10=  0.0013685600,

     /  G11=  0.3813740000 ,G12= -0.2675544000 ,G13=  0.0587541000 ,G14=  0.0551394000
     / ,G15= -0.0624710000 ,G16=  0.0366550000 ,G17= -0.0161735000 ,G18=  0.0047799300
     / ,G19= -0.0000637944,G20= -0.0010983800,

     /  G21=  0.2788480000 , G22=-0.1669651D0,
C OLD PARAM G22= -0.1770288000 ,
     /  G23=  0.0113421000 ,G24=  0.0677288000
     / ,G25= -0.0683438000 ,G26=  0.0436374000 ,G27= -0.0211787000 ,G28=  0.0074277200
     / ,G29= -0.0013746800,G30= -0.0004145400,

     /  G31= -0.3851400000 ,G32=  0.3337080000 ,G33= -0.2141850000 ,G34=  0.1061410000
     / ,G35= -0.0414461000 ,G36=  0.0121444000 ,G37= -0.0017954400 ,G38= -0.0007822330
     / ,G39=  0.0008151550,G40= -0.0004982710)


       A2=1.0D0
       B2=7.0D0
       QTB(K,L)=(R(K,L)-((B2+A2)/2.0D0))/((B2-A2)/2.0D0)

C  SSSSIG

       IF (R(K,L).LT.6.501645139158383D0) THEN

      SSSS=G1 + G2*QTB(K,L) + G3*(-1.0D0 + 2.0D0*QTB(K,L)**2) 
     /    + G4*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    G5*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4) 
     /    + G6*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + G7*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + G8*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + G9*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + G10*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - G1/2.0D0 + 0.001465818855739154D0 

       ELSE
 
       SSSS=0.0D0

       ENDIF

C   SSPSIG

       IF (R(K,L).LT.6.514708000907687D0) THEN

      SSPS=G11 + G12*QTB(K,L) + G13*(-1.0D0 + 2.0D0*QTB(K,L)**2)
     /    + G14*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    G15*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + G16*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + G17*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + G18*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + G19*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + G20*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - G11/2.0D0 + 0.0001542094201995026D0

       ELSE
 
      SSPS=0.0D0

       ENDIF

C SPPSIG

       IF (R(K,L).LT.6.699591659971658D0) THEN

      SPPS=G21 + G22*QTB(K,L) + G23*(-1.0D0 + 2.0D0*QTB(K,L)**2)        
     /    + G24*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    G25*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + G26*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + G27*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + G28*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + G29*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + G30*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - G21/2.0D0 - 0.01228748543456073D0

       ELSE

      SPPS=0.0D0

        ENDIF


C   SPPPI

       IF (R(K,L).LT.6.841936337171249D0) THEN

      SPPP=G31 + G32*QTB(K,L) + G33*(-1.0D0 + 2.0D0*QTB(K,L)**2)        
     /    + G34*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    G35*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + G36*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + G37*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + G38*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + G39*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + G40*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - G31/2.0D0 - 0.001936846016333094D0 

         ELSE

            SPPP=0.0D0

         ENDIF


C         IF (R(K,L).GT.B2) THEN
C          SSSS=0.0D0
C          SSPS=0.0D0
C          SPPS=0.0D0
C          SPPP=0.0D0
C         ENDIF

      RETURN
      END

C   
C  SUBROUTINE TO EXPAND THE POLYNOMIAL SUM FOR THE OVERLAP MATRIX ELEMENTS
C  THIS IS BETWEEN SAME ELEMENT....SAME ELEMENT/DIFF ELEMENT WILL BE MORE
C   

      SUBROUTINE HAMCCB(N,K,L,SSSS,SSPS,SPPS,SPPP,R)
      IMPLICIT NONE
      INTEGER  K,L,N
      DOUBLE PRECISION R(N,N), QTB(N,N)

      DOUBLE PRECISION SSSS,SSPS,SPPS,SPPP,
     /     G1,G2,G3,
     7     G4,G5,G6,G7,G8,G9,G10,G11,G12,G13,G14,G15,G16,G17,G18,G19,G20,
     8     G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G33,G34,G35,G36,
     9     G37,G38,G39,G40,A2,B2

       PARAMETER (   G1= -0.3789880000 , G2=0.287963,
C OLD PARAM
C G2=  0.2886558000 ,
     /  G3= -0.1201660000 ,G4=  0.0100538000
     / ,G5=  0.0203983000 ,G6= -0.0149822000 ,G7=  0.0056378700 ,G8= -0.0006071250
     / ,G9= -0.0008101620,G10=  0.0006987440,

     /  G11=  0.2956740000 ,G12= -0.2010048000 ,G13=  0.0327500000 ,G14=  0.0514607000
     / ,G15= -0.0508434000 ,G16=  0.0288404000 ,G17= -0.0133668000 ,G18=  0.0046855100
     / ,G19=  0.0006011540,G20= -0.0000060000,

     /  G21=  0.2314380000 ,G22= -0.1469886000 ,G23=  0.0151875000 ,G24=  0.0440803000
     / ,G25= -0.0458782000 ,G26=  0.0312287000 ,G27= -0.0171949000 ,G28=  0.0079412400
     / ,G29= -0.0028890500,G30=  0.0012923000,

     /  G31= -0.3325740000 ,G32=  0.2847522000 ,G33= -0.1816530000 ,G34=  0.0901204000
     / ,G35= -0.0360385000 ,G36=  0.0113274000 ,G37= -0.0021334300 ,G38= -0.0006478810
     / ,G39=  0.0009400840,G40= -0.0009030410)


       A2=1.0D0
       B2=7.0D0
       QTB(K,L)=(R(K,L)-((B2+A2)/2.0D0))/((B2-A2)/2.0D0)

C  SSSSIG

       IF (R(K,L).LT.6.695259436126274D0) THEN

      SSSS=G1 + G2*QTB(K,L) + G3*(-1.0D0 + 2.0D0*QTB(K,L)**2) 
     /    + G4*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    G5*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4) 
     /    + G6*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + G7*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + G8*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + G9*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + G10*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - G1/2.0D0 + 0.002109343015707699D0

      ELSE

      SSSS=0.0D0

      ENDIF


C   SSPSIG

       IF (R(K,L).LT.6.796735011037814D0) THEN

      SSPS=G11 + G12*QTB(K,L) + G13*(-1.0D0 + 2.0D0*QTB(K,L)**2)
     /    + G14*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    G15*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + G16*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + G17*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + G18*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + G19*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + G20*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - G11/2.0D0 + 0.001551075520518252D0

         ELSE

        SSPS=0.0D0

         ENDIF


C SPPSIG

       IF (R(K,L).LT.6.880535598840217D0) THEN

      SPPS=G21 + G22*QTB(K,L) + G23*(-1.0D0 + 2.0D0*QTB(K,L)**2)        
     /    + G24*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    G25*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + G26*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + G27*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + G28*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + G29*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + G30*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - G21/2.0D0 - 0.001666042658392236D0

         ELSE

         SPPS=0.0D0

         ENDIF


C   SPPPI

       IF (R(K,L).LT.5.944816716454667D0) THEN

      SPPP=G31 + G32*QTB(K,L) + G33*(-1.0D0 + 2.0D0*QTB(K,L)**2)        
     /    + G34*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    G35*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4)
     /    + G36*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + G37*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + G38*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + G39*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + G40*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - G31/2.0D0 + 0.0007476927053454984D0

        ELSE

          SPPP=0.0D0

        ENDIF


C         IF (R(K,L).GT.B2) THEN
C          SSSS=0.0D0
C          SSPS=0.0D0
C          SPPS=0.0D0
C          SPPP=0.0D0
C         ENDIF

      RETURN
      END
C   
C  SUBROUTINE TO EXPAND THE POLYNOMIAL SUM FOR THE OVERLAP MATRIX ELEMENTS
C  THIS IS BETWEEN SAME ELEMENT....SAME ELEMENT/DIFF ELEMENT WILL BE MORE
C   

      SUBROUTINE AREPCC(N,K,L,REP,R)
      IMPLICIT NONE
      INTEGER  K,L,N
      DOUBLE PRECISION R(N,N), QTB(N,N)

      DOUBLE PRECISION REP,
     /     C1,C2,C3,
     7     C4,C5,C6,C7,C8,C9,C10,
     9     A2,B2

       PARAMETER (   C1=  2.5911600000 ,C2= -2.0924020000 ,C3=  1.1228900000 ,C4= -0.4302620000
     / ,C5=  0.1257390000 ,C6= -0.0215445000 ,C7=  0.0000000000 ,C8=  0.0000000000
     / ,C9=  0.0000000000,C10=  0.0000000000) 

       A2=1.0D0
       B2=3.3D0
       QTB(K,L)=(R(K,L)-((B2+A2)/2.0D0))/((B2-A2)/2.0D0)

C  SSSSIG

      REP=C1 + C2*QTB(K,L) + C3*(-1.0D0 + 2.0D0*QTB(K,L)**2) 
     /    + C4*(-3.0D0*QTB(K,L) + 4.0D0*QTB(K,L)**3) +
     /    C5*(1 -8.0D0*QTB(K,L)**2 + 8.0D0*QTB(K,L)**4) 
     /    + C6*(5.0D0*QTB(K,L) -20.0D0*QTB(K,L)**3 + 16.0D0*QTB(K,L)**5)
     /     + C7*(-1.0D0+18.0D0*QTB(K,L)**2 -48.0D0*QTB(K,L)**4 + 32.0D0*QTB(K,L)**6)
     /   + C8*(-7.0D0*QTB(K,L) + 56.0D0*QTB(K,L)**3 - 112.0D0*QTB(K,L)**5 + 64.0D0*QTB(K,L)**7)
     /    + C9*(1.0D0 - 32.0D0*QTB(K,L)**2 + 160.0D0*QTB(K,L)**4 - 256.0D0*QTB(K,L)**6
     /   +128.0D0*QTB(K,L)**8) + C10*(9.0D0*QTB(K,L) - 120.0D0*QTB(K,L)**3 + 432.0D0*QTB(K,L)**5
     /   - 576.0D0*QTB(K,L)**7 + 256.0D0*QTB(K,L)**9) - C1/2.0D0




         IF (R(K,L).GT.3.251838574097556D0) THEN
            REP=0.0D0
         ELSE
           REP=REP+0.00002383611355998103D0
         ENDIF

      RETURN
      END
C   THIS IS PHASE TWO WHERE WE CALCULATE THE FIRST DERIVATIVES
C   OF THE SILICON POTENTIAL CODED IN TB.SI.F. IT IS IN TIGHT
C   BINDING PARAMETERISED FORM.
C   OFF I GO...
C   THIS IS DERIVS1.F.JLOOP.BETTERISH IN THE RESRVES DIRECTORY
C   FOR THE RECORD

      SUBROUTINE DFDERIV1(XMUL,N,XS,DERIV1ST,EIGVECA,EIGVECB,R, DIRCOS, DIAGA, DIAGB)
      IMPLICIT NONE 
      INTEGER N
      DOUBLE PRECISION R(N,N),DERIV1ST(3*N),
     1                 DIRCOS(N,N,3),
     6                 DIAGA(4*N),DIAGB(4*N)

C     COMMON /RDIST/ R, DIRCOS, DIAGA, DIAGB

      INTEGER I, J, K , AI, AJ, LEV, NUM1, NUM2, 
     1        I2,J2,XMUL
      DOUBLE PRECISION REP1ST(N,3),RR, D1, D2, D3,
     1                 DUMMY, DUMMY1,
     2                 DIFFSVC(3,4,4), SDC1, SQC1, SQC2, SQC3,
     3                 R1ST(N,N), DIFFSVA(3,4,4), DIFFSVB(3,4,4),
C MADE UREP FIRST A SCALAR
     4                 UREP1ST,XS(3*N),E1AA,E1BA,E1AB,E1BB,E1AC,E1BC,
     5                 ELEC1STA(N,3),ELEC1STB(N,3),EIGVECA(4*N,4*N),DUMVECA(4*N),DUMVECB(4*N),
     6                 EIGVECB(4*N,4*N)
      DOUBLE PRECISION SVSUB,TEMP1A,TEMP2A,TEMP1B,TEMP2B,
     1                 SQDIRCOS(3*N,N),SUBDIRCOS(3*N,N),
     2                 DELD1, DELD12, DELD2, DELD22, DELD3, DELD32, DELRDX, DSVSUB,
     3                 DRSSSA,DRSSPA,DRSPPSA,DRSPPPA,
     3                 DRSSSB,DRSSPB,DRSPPSB,DRSPPPB,
     4                 SSSSIG, SSPSIG, SPPSIG, SPPPI,
     5                 HSSSIGA, HSPSIGA, HPPSIGA, HPPPIA,
     5                 HSSSIGB, HSPSIGB, HPPSIGB, HPPPIB,
     5                 DORSSS,DORSSP,DORSPPS,DORSPPP
      LOGICAL TEST1,TEST2,TEST3

C       PRINT*,'MAKES IT TO DFDERIV'
C
C  TAKE THE TRANSPOSE OF EIGVEC - MAKES LOOPS MORE EFFICIENT
C
      DO J=1,4*N
         DO I=J+1,4*N
            DUMMY=EIGVECA(J,I)
            EIGVECA(J,I)=EIGVECA(I,J)
            EIGVECA(I,J)=DUMMY

            DUMMY=EIGVECB(J,I)
            EIGVECB(J,I)=EIGVECB(I,J)
            EIGVECB(I,J)=DUMMY
         ENDDO
      ENDDO

C OCCUPATION NUMBERS

C
C   CAN PUT ARRAYS INTO A BLOCK DATA FORMAT INSTEAD OF PARAMETER
C   SO CAN JUST PUT IN ONCE IN A FILE TO BE INCLUDED

C   CAN T START AN ARRAY WITH A NO. IE. 1STDERIV...SYNTAX ERROR

C   FIRST OF ALL CALCULATE DERIVATIVES OF REPULSIVE ENERGY TERM
C   THIS IS CALLED REP1ST.

C      WRITE(6,*)'FIRST GOING TO DO DERIVATIVE OF REPULSIVE ENERGY:'

      DO K=1,3
         DO I=1,N
            DO J=I+1,N

               CALL DREPCC(N,I,J,UREP1ST,R)

               R1ST(J,I)=-DIRCOS(I,J,K)*UREP1ST
               R1ST(I,J)=-R1ST(J,I)

            END DO

            R1ST(I,I)=0.0D0
            D1=0.0D0
            DO J=1,N
              D1=D1+R1ST(J,I)
            END DO

            REP1ST(I,K)=D1
         END DO
      END DO

C   CO=1,2 OR 3 REPRESENTS THE X,Y OR Z COORDINATE AND THUS DIFFERENTIATION
C   THAT COORDINATE. CRIPES, I HOPE MY WORK IS MORE COMPACT THAN MY COMMENT
C   STATEMENTS.

      DO I=1,N
         DO J=I+1,N

            J2=3*(J-1)

            DO NUM1=1,3
               SQDIRCOS(J2+NUM1,I)=DIRCOS(J,I,NUM1)**2
               SUBDIRCOS(J2+NUM1,I)=SQDIRCOS(J2+NUM1,I)-1.0D0
            ENDDO
         ENDDO
      ENDDO

C     PRINT*,'ENTERING THE DIFFERENTIATION OF ELECTRONIC ENERGY ZONE'
        DO K=1,N
           ELEC1STA(K,1)=0.0D0
           ELEC1STB(K,1)=0.0D0
           ELEC1STA(K,2)=0.0D0
           ELEC1STB(K,2)=0.0D0
           ELEC1STA(K,3)=0.0D0
           ELEC1STB(K,3)=0.0D0
        ENDDO

        DO I=1,N
           AI=4*(I-1)
           I2=3*(I-1)


           DO J=I+1,N
              IF (R(J,I).GT.7.031215111280781D0) GOTO 666
              RR=1.0D0/R(J,I)
              AJ=4*(J-1)
              J2=3*(J-1)

              D1=DIRCOS(J,I,1)
              D2=DIRCOS(J,I,2)
              D3=DIRCOS(J,I,3)

              SDC1=SUBDIRCOS(J2+1,I)
              SQC1=SQDIRCOS(J2+1,I)
              SQC2=SQDIRCOS(J2+2,I)
              SQC3=SQDIRCOS(J2+3,I)

C   DIFFSV(DIFF. OF S OR V,AO NO.,AO NO.)

C   DIFFERENTIATION OF OVERLAP OR INTERACTION BETWEEN ORBITALS
C   ON DIFFERENT ATOMS

              DELD1=RR*SDC1
              DELD12=-2*RR*D1*SDC1
              DELD2=D2*D1*RR
              DELD22=-2*SQC2*D1*RR
              DELD3=D3*D1*RR
              DELD32=-2*SQC3*D1*RR
              DELRDX=D1

              CALL OVECC(N,I,J,SSSSIG, SSPSIG, SPPSIG, SPPPI,R)
              CALL DOVECC(N,I,J,DORSSS,DORSSP,DORSPPS,DORSPPP,R)

              DUMMY1=DORSSP*DELRDX

              DIFFSVA(1,1,2)=SSPSIG*DELD1 - D1*DUMMY1
              DIFFSVA(1,1,3)=SSPSIG*DELD2 - D2*DUMMY1
              DIFFSVA(1,1,4)=SSPSIG*DELD3 - D3*DUMMY1

              DIFFSVA(1,2,1)=-DIFFSVA(1,1,2)
              DIFFSVA(1,3,1)=-DIFFSVA(1,1,3)
              DIFFSVA(1,4,1)=-DIFFSVA(1,1,4)

              SVSUB=SPPSIG - SPPPI
              DSVSUB=DORSPPS - DORSPPP

              DIFFSVA(1,1,1)=DORSSS*DELRDX
              DUMMY1=DELRDX*DSVSUB

              DIFFSVA(1,2,2)=SQC1*DUMMY1  + SVSUB*DELD12   + DORSPPP*DELRDX
              DIFFSVA(1,2,3)=D1*D2*DUMMY1 - SVSUB*D1*DELD2 - SVSUB*D2*DELD1
              DIFFSVA(1,2,4)=D1*D3*DUMMY1 - SVSUB*D1*DELD3 - SVSUB*D3*DELD1
                
              DIFFSVA(1,3,2)= DIFFSVA(1,2,3)
              DIFFSVA(1,3,3)= SQC2*DUMMY1 + SVSUB*DELD22 + DORSPPP*DELRDX
              DIFFSVA(1,3,4)= D2*D3*DUMMY1 - SVSUB*D2*DELD3  - SVSUB*D3*DELD2

              DIFFSVA(1,4,2)= DIFFSVA(1,2,4)
              DIFFSVA(1,4,3)= DIFFSVA(1,3,4)
              DIFFSVA(1,4,4)= SQC3*DUMMY1 + SVSUB*DELD32 + DORSPPP*DELRDX

              CALL HAMCCA(N,I,J,HSSSIGA, HSPSIGA, HPPSIGA, HPPPIA,R)
              CALL DAMCCA(N,I,J,DRSSSA,DRSSPA,DRSPPSA,DRSPPPA,R)

              DUMMY1=DRSSPA*DELRDX

              DIFFSVA(2,1,2)=HSPSIGA*DELD1 - D1*DUMMY1
              DIFFSVA(2,1,3)=HSPSIGA*DELD2 - D2*DUMMY1
              DIFFSVA(2,1,4)=HSPSIGA*DELD3 - D3*DUMMY1

              DIFFSVA(2,2,1)=-DIFFSVA(2,1,2)
              DIFFSVA(2,3,1)=-DIFFSVA(2,1,3)
              DIFFSVA(2,4,1)=-DIFFSVA(2,1,4)

              SVSUB=HPPSIGA - HPPPIA
              DSVSUB=DRSPPSA - DRSPPPA

              DIFFSVA(2,1,1)=DRSSSA*DELRDX
              DUMMY1=DELRDX*DSVSUB

              DIFFSVA(2,2,2)=SQC1*DUMMY1  + SVSUB*DELD12   + DRSPPPA*DELRDX
              DIFFSVA(2,2,3)=D1*D2*DUMMY1 - SVSUB*D1*DELD2 - SVSUB*D2*DELD1
              DIFFSVA(2,2,4)=D1*D3*DUMMY1 - SVSUB*D1*DELD3 - SVSUB*D3*DELD1

              DIFFSVA(2,3,2)= DIFFSVA(2,2,3)
              DIFFSVA(2,3,3)= SQC2*DUMMY1  + SVSUB*DELD22    + DRSPPPA*DELRDX
              DIFFSVA(2,3,4)= D2*D3*DUMMY1 - SVSUB*D2*DELD3  - SVSUB*D3*DELD2

              DIFFSVA(2,4,2)= DIFFSVA(2,2,4)
              DIFFSVA(2,4,3)= DIFFSVA(2,3,4)
              DIFFSVA(2,4,4)= SQC3*DUMMY1 + SVSUB*DELD32 + DRSPPPA*DELRDX

              CALL HAMCCB(N,I,J,HSSSIGB, HSPSIGB, HPPSIGB, HPPPIB,R)
              CALL DAMCCB(N,XS,I,J,DRSSSB,DRSSPB,DRSPPSB,DRSPPPB,R, DIRCOS, DIAGA, DIAGB)

              DUMMY1=DRSSPB*DELRDX
      
              DIFFSVA(3,1,2)=HSPSIGB*DELD1 - D1*DUMMY1
              DIFFSVA(3,1,3)=HSPSIGB*DELD2 - D2*DUMMY1
              DIFFSVA(3,1,4)=HSPSIGB*DELD3 - D3*DUMMY1
     
              DIFFSVA(3,2,1)=-DIFFSVA(3,1,2)
              DIFFSVA(3,3,1)=-DIFFSVA(3,1,3)
              DIFFSVA(3,4,1)=-DIFFSVA(3,1,4)

              SVSUB=HPPSIGB - HPPPIB
              DSVSUB=DRSPPSB - DRSPPPB

              DIFFSVA(3,1,1)=DRSSSB*DELRDX
              DUMMY1=DELRDX*DSVSUB

              DIFFSVA(3,2,2)=SQC1*DUMMY1 + SVSUB*DELD12 + DRSPPPB*DELRDX
              DIFFSVA(3,2,3)=D1*D2*DUMMY1 - SVSUB*D1*DELD2 - SVSUB*D2*DELD1
              DIFFSVA(3,2,4)=D1*D3*DUMMY1 - SVSUB*D1*DELD3 - SVSUB*D3*DELD1

              DIFFSVA(3,3,2)= DIFFSVA(3,2,3)
              DIFFSVA(3,3,3)= SQC2*DUMMY1 + SVSUB*DELD22 + DRSPPPB*DELRDX
              DIFFSVA(3,3,4)= D2*D3*DUMMY1 - SVSUB*D2*DELD3  - SVSUB*D3*DELD2

              DIFFSVA(3,4,2)= DIFFSVA(3,2,4)
              DIFFSVA(3,4,3)= DIFFSVA(3,3,4)
              DIFFSVA(3,4,4)= SQC3*DUMMY1 + SVSUB*DELD32 + DRSPPPB*DELRDX

CBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
C   DIFFERENTIATION OF OVERLAP OR INTERACTION BETWEEN ORBITALS
C   ON DIFFERENT ATOMS

              D1=DIRCOS(J,I,2)
              D2=DIRCOS(J,I,3)
              D3=DIRCOS(J,I,1)

              SDC1=SUBDIRCOS(J2+2,I)
              SQC1=SQDIRCOS(J2+2,I)
              SQC2=SQDIRCOS(J2+3,I)
              SQC3=SQDIRCOS(J2+1,I)

              DELD1=RR*SDC1
              DELD12=-2*RR*D1*SDC1
              DELD2=D2*D1*RR
              DELD22=-2*SQC2*D1*RR
              DELD3=D3*D1*RR
              DELD32=-2*SQC3*D1*RR
              DELRDX=D1

              DIFFSVB(1,1,3)=(SSPSIG*DELD1 - D1*DORSSP*DELRDX)
              DIFFSVB(1,1,4)=(SSPSIG*DELD2 - D2*DORSSP*DELRDX)
              DIFFSVB(1,1,2)=DIFFSVA(1,1,3)

              DIFFSVB(1,3,1)=-DIFFSVB(1,1,3)
              DIFFSVB(1,4,1)=-DIFFSVB(1,1,4)
              DIFFSVB(1,2,1)=-DIFFSVB(1,1,2)

              SVSUB=SPPSIG - SPPPI
              DSVSUB=DORSPPS - DORSPPP

              DIFFSVB(1,1,1)=DORSSS*DELRDX

              DIFFSVB(1,3,3)=SQC1*DELRDX*DSVSUB + SVSUB*DELD12 + DORSPPP*DELRDX
              DIFFSVB(1,2,3)=D1*D3*DELRDX*DSVSUB - SVSUB*D1*DELD3 - SVSUB*D3*DELD1
              DIFFSVB(1,2,4)=DIFFSVA(1,3,4)

              DIFFSVB(1,3,2)= DIFFSVB(1,2,3)
              DIFFSVB(1,4,4)= SQC2*DELRDX*DSVSUB + SVSUB*DELD22 + DORSPPP*DELRDX
              DIFFSVB(1,3,4)= D2*D1*DELRDX*DSVSUB - SVSUB*D2*DELD1 - SVSUB*D1*DELD2

              DIFFSVB(1,4,2)= DIFFSVB(1,2,4)
              DIFFSVB(1,4,3)= DIFFSVB(1,3,4)
              DIFFSVB(1,2,2)= SQC3*DELRDX*DSVSUB + SVSUB*DELD32 + DORSPPP*DELRDX

              DIFFSVB(2,1,3)=(HSPSIGA*DELD1 - D1*DRSSPA*DELRDX)
              DIFFSVB(2,1,4)=(HSPSIGA*DELD2 - D2*DRSSPA*DELRDX)
              DIFFSVB(2,1,2)=DIFFSVA(2,1,3)

              DIFFSVB(2,3,1)=-DIFFSVB(2,1,3)
              DIFFSVB(2,4,1)=-DIFFSVB(2,1,4)
              DIFFSVB(2,2,1)=-DIFFSVB(2,1,2)

              SVSUB=HPPSIGA - HPPPIA
              DSVSUB=DRSPPSA - DRSPPPA

              DIFFSVB(2,1,1)=DRSSSA*DELRDX

              DIFFSVB(2,3,3)=SQC1*DELRDX*DSVSUB + SVSUB*DELD12 + DRSPPPA*DELRDX
              DIFFSVB(2,2,3)=D1*D3*DELRDX*DSVSUB - SVSUB*D1*DELD3 - SVSUB*D3*DELD1
              DIFFSVB(2,2,4)=DIFFSVA(2,3,4)

              DIFFSVB(2,3,2)= DIFFSVB(2,2,3)
              DIFFSVB(2,4,4)= SQC2*DELRDX*DSVSUB + SVSUB*DELD22 + DRSPPPA*DELRDX
              DIFFSVB(2,3,4)= D2*D1*DELRDX*DSVSUB - SVSUB*D2*DELD1 - SVSUB*D1*DELD2

              DIFFSVB(2,4,2)= DIFFSVB(2,2,4)
              DIFFSVB(2,4,3)= DIFFSVB(2,3,4)
              DIFFSVB(2,2,2)= SQC3*DELRDX*DSVSUB + SVSUB*DELD32 + DRSPPPA*DELRDX

              DIFFSVB(3,1,3)=(HSPSIGB*DELD1 - D1*DRSSPB*DELRDX)
              DIFFSVB(3,1,4)=(HSPSIGB*DELD2 - D2*DRSSPB*DELRDX)
              DIFFSVB(3,1,2)=DIFFSVA(3,1,3)

              DIFFSVB(3,3,1)=-DIFFSVB(3,1,3)
              DIFFSVB(3,4,1)=-DIFFSVB(3,1,4)
              DIFFSVB(3,2,1)=-DIFFSVB(3,1,2)

              SVSUB=HPPSIGB - HPPPIB
              DSVSUB=DRSPPSB - DRSPPPB

              DIFFSVB(3,1,1)=DRSSSB*DELRDX

              DIFFSVB(3,3,3)=SQC1*DELRDX*DSVSUB + SVSUB*DELD12 + DRSPPPB*DELRDX
              DIFFSVB(3,2,3)=D1*D3*DELRDX*DSVSUB - SVSUB*D1*DELD3 - SVSUB*D3*DELD1
              DIFFSVB(3,2,4)=DIFFSVA(3,3,4)

              DIFFSVB(3,3,2)= DIFFSVB(3,2,3)
              DIFFSVB(3,4,4)= SQC2*DELRDX*DSVSUB + SVSUB*DELD22 + DRSPPPB*DELRDX
              DIFFSVB(3,3,4)= D2*D1*DELRDX*DSVSUB - SVSUB*D2*DELD1 - SVSUB*D1*DELD2

              DIFFSVB(3,4,2)= DIFFSVB(3,2,4)
              DIFFSVB(3,4,3)= DIFFSVB(3,3,4)
              DIFFSVB(3,2,2)= SQC3*DELRDX*DSVSUB + SVSUB*DELD32 + DRSPPPB*DELRDX

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C   DIFFSV(DIFF. OF S OR V,AO NO.,AO NO.)

C   DIFFERENTIATION OF OVERLAP OR INTERACTION BETWEEN ORBITALS
C   ON DIFFERENT ATOMS

              D1=DIRCOS(J,I,3)
              D2=DIRCOS(J,I,1)
              D3=DIRCOS(J,I,2)

              SDC1=SUBDIRCOS(J2+3,I)
              SQC1=SQDIRCOS(J2+3,I)
              SQC2=SQDIRCOS(J2+1,I)
              SQC3=SQDIRCOS(J2+2,I)

              DELD1=RR*SDC1
              DELD12=-2*RR*D1*SDC1
              DELD2=D2*D1*RR
              DELD22=-2*SQC2*D1*RR
              DELD3=D3*D1*RR
              DELD32=-2*SQC3*D1*RR
              DELRDX=D1

              DUMMY1=DORSSP*DELRDX

              DIFFSVC(1,1,4)=SSPSIG*DELD1 - D1*DUMMY1
              DIFFSVC(1,1,2)=DIFFSVA(1,1,4)
              DIFFSVC(1,1,3)=DIFFSVB(1,1,4)

              DIFFSVC(1,4,1)=-DIFFSVC(1,1,4)
              DIFFSVC(1,2,1)=-DIFFSVC(1,1,2)
              DIFFSVC(1,3,1)=-DIFFSVC(1,1,3)

              SVSUB=SPPSIG - SPPPI
              DSVSUB=DORSPPS - DORSPPP

              DIFFSVC(1,1,1)=DORSSS*DELRDX

              DUMMY1=DELRDX*DSVSUB

              DIFFSVC(1,4,4)=SQC1*DUMMY1 + SVSUB*DELD12 + DORSPPP*DELRDX
              DIFFSVC(1,2,3)=DIFFSVA(1,3,4)
              DIFFSVC(1,2,4)=D1*D2*DUMMY1 - SVSUB*D1*DELD2 - SVSUB*D2*DELD1

              DIFFSVC(1,3,2)= DIFFSVC(1,2,3)
              DIFFSVC(1,2,2)= SQC2*DUMMY1 + SVSUB*DELD22 + DORSPPP*DELRDX
              DIFFSVC(1,3,4)= D1*D3*DUMMY1 - SVSUB*D1*DELD3 - SVSUB*D3*DELD1

              DIFFSVC(1,4,2)= DIFFSVC(1,2,4)
              DIFFSVC(1,4,3)= DIFFSVC(1,3,4)
              DIFFSVC(1,3,3)= SQC3*DUMMY1 + SVSUB*DELD32 + DORSPPP*DELRDX

              DUMMY1=DRSSPA*DELRDX

              DIFFSVC(2,1,4)=HSPSIGA*DELD1 - D1*DUMMY1
              DIFFSVC(2,1,2)=DIFFSVA(2,1,4)
              DIFFSVC(2,1,3)=DIFFSVB(2,1,4)

              DIFFSVC(2,4,1)=-DIFFSVC(2,1,4)
              DIFFSVC(2,2,1)=-DIFFSVC(2,1,2)
              DIFFSVC(2,3,1)=-DIFFSVC(2,1,3)

              SVSUB=HPPSIGA - HPPPIA
              DSVSUB=DRSPPSA - DRSPPPA

              DIFFSVC(2,1,1)=DRSSSA*DELRDX

              DUMMY1=DELRDX*DSVSUB

              DIFFSVC(2,4,4)=SQC1*DUMMY1 + SVSUB*DELD12 + DRSPPPA*DELRDX
              DIFFSVC(2,2,3)=DIFFSVA(2,3,4)
              DIFFSVC(2,2,4)=D1*D2*DUMMY1 - SVSUB*D1*DELD2 - SVSUB*D2*DELD1

              DIFFSVC(2,3,2)= DIFFSVC(2,2,3)
              DIFFSVC(2,2,2)= SQC2*DUMMY1 + SVSUB*DELD22 + DRSPPPA*DELRDX
              DIFFSVC(2,3,4)= D1*D3*DUMMY1 - SVSUB*D1*DELD3 - SVSUB*D3*DELD1

              DIFFSVC(2,4,2)= DIFFSVC(2,2,4)
              DIFFSVC(2,4,3)= DIFFSVC(2,3,4)
              DIFFSVC(2,3,3)= SQC3*DUMMY1 + SVSUB*DELD32 + DRSPPPA*DELRDX

              DUMMY1=DRSSPB*DELRDX

              DIFFSVC(3,1,4)=HSPSIGB*DELD1 - D1*DUMMY1
              DIFFSVC(3,1,2)=DIFFSVA(3,1,4)
              DIFFSVC(3,1,3)=DIFFSVB(3,1,4)

              DIFFSVC(3,4,1)=-DIFFSVC(3,1,4)
              DIFFSVC(3,2,1)=-DIFFSVC(3,1,2)
              DIFFSVC(3,3,1)=-DIFFSVC(3,1,3)

              SVSUB=HPPSIGB - HPPPIB
              DSVSUB=DRSPPSB - DRSPPPB

              DIFFSVC(3,1,1)=DRSSSB*DELRDX

              DUMMY1=DELRDX*DSVSUB

              DIFFSVC(3,4,4)=SQC1*DUMMY1 + SVSUB*DELD12 + DRSPPPB*DELRDX
              DIFFSVC(3,2,3)=DIFFSVA(3,3,4)
              DIFFSVC(3,2,4)=D1*D2*DUMMY1 - SVSUB*D1*DELD2 - SVSUB*D2*DELD1

              DIFFSVC(3,3,2)= DIFFSVC(3,2,3)
              DIFFSVC(3,2,2)= SQC2*DUMMY1 + SVSUB*DELD22 + DRSPPPB*DELRDX
              DIFFSVC(3,3,4)= D1*D3*DUMMY1 - SVSUB*D1*DELD3 - SVSUB*D3*DELD1

              DIFFSVC(3,4,2)= DIFFSVC(3,2,4)
              DIFFSVC(3,4,3)= DIFFSVC(3,3,4)
              DIFFSVC(3,3,3)= SQC3*DUMMY1 + SVSUB*DELD32 + DRSPPPB*DELRDX

              E1AA=0.0D0
              E1BA=0.0D0
              E1AB=0.0D0
              E1BB=0.0D0
              E1AC=0.0D0
              E1BC=0.0D0

              DO NUM1=1,4
                 DO LEV=4*N-119,4*N
                    DUMVECA(LEV)=EIGVECA(LEV,AI+NUM1)
                    DUMVECB(LEV)=EIGVECB(LEV,AI+NUM1)
                 ENDDO
                 DO NUM2=1,4
 
                    TEST1=((DIFFSVA(1,NUM1,NUM2).EQ.0.0D0).AND.
     1                     (DIFFSVB(1,NUM1,NUM2).EQ.0.0D0).AND.
     2                     (DIFFSVC(1,NUM1,NUM2).EQ.0.0D0))
                    TEST2=((DIFFSVA(2,NUM1,NUM2).EQ.0.0D0).AND.
     1                     (DIFFSVB(2,NUM1,NUM2).EQ.0.0D0).AND.
     2                     (DIFFSVC(2,NUM1,NUM2).EQ.0.0D0))
                    TEST3=((DIFFSVA(3,NUM1,NUM2).EQ.0.0D0).AND.
     1                     (DIFFSVB(3,NUM1,NUM2).EQ.0.0D0).AND.
     2                     (DIFFSVC(3,NUM1,NUM2).EQ.0.0D0))
C                   WRITE(*,'(A,4I6,3L)') 'AI,AJ,NUM1,NUM2,T1,T2,T3=',AI,AJ,NUM1,NUM2,TEST1,TEST2,TEST3
                    IF (TEST1.AND.TEST2.AND.TEST3) GOTO 555
                    TEMP1A=0.0D0
                    TEMP2A=0.0D0
                    TEMP1B=0.0D0
                    TEMP2B=0.0D0
                    IF (TEST1) THEN
                       DO LEV=4*N-119,4*N
                          TEMP1A=TEMP1A+DUMVECA(LEV)*EIGVECA(LEV,AJ+NUM2)
                          TEMP1B=TEMP1B+DUMVECB(LEV)*EIGVECB(LEV,AJ+NUM2)
                       ENDDO !LEV
                    ELSE IF (TEST2.AND.TEST3) THEN
                       DO LEV=4*N-119,4*N
                          TEMP2A=TEMP2A-DUMVECA(LEV)*EIGVECA(LEV,AJ+NUM2)*DIAGA(LEV)
                          TEMP2B=TEMP2B-DUMVECB(LEV)*EIGVECB(LEV,AJ+NUM2)*DIAGB(LEV)
                       ENDDO !LEV
                    ELSE IF (TEST2) THEN
                       DO LEV=4*N-119,4*N
                          TEMP2A=TEMP2A-DUMVECA(LEV)*EIGVECA(LEV,AJ+NUM2)*DIAGA(LEV)
                          DUMMY=DUMVECB(LEV)*EIGVECB(LEV,AJ+NUM2)
                          TEMP1B=TEMP1B+DUMMY
                          TEMP2B=TEMP2B-DUMMY*DIAGB(LEV)
                       ENDDO !LEV
                    ELSE IF (TEST3) THEN
                       DO LEV=4*N-119,4*N
                          DUMMY=DUMVECA(LEV)*EIGVECA(LEV,AJ+NUM2)
                          TEMP1A=TEMP1A+DUMMY
                          TEMP2A=TEMP2A-DUMMY*DIAGA(LEV)
                          TEMP2B=TEMP2B-DUMVECB(LEV)*EIGVECB(LEV,AJ+NUM2)*DIAGB(LEV)
                       ENDDO !LEV
                    ELSE
                       DO LEV=4*N-119,4*N
                          DUMMY=DUMVECA(LEV)*EIGVECA(LEV,AJ+NUM2)
                          TEMP1A=TEMP1A+DUMMY
                          TEMP2A=TEMP2A-DUMMY*DIAGA(LEV)
                          DUMMY=DUMVECB(LEV)*EIGVECB(LEV,AJ+NUM2)
                          TEMP1B=TEMP1B+DUMMY
                          TEMP2B=TEMP2B-DUMMY*DIAGB(LEV)
                       ENDDO !LEV
                    ENDIF
                    E1AA=E1AA+TEMP1A*DIFFSVA(2,NUM1,NUM2)+TEMP2A*DIFFSVA(1,NUM1,NUM2)
                    E1AB=E1AB+TEMP1A*DIFFSVB(2,NUM1,NUM2)+TEMP2A*DIFFSVB(1,NUM1,NUM2)
                    E1AC=E1AC+TEMP1A*DIFFSVC(2,NUM1,NUM2)+TEMP2A*DIFFSVC(1,NUM1,NUM2)
                    E1BA=E1BA+TEMP1B*DIFFSVA(3,NUM1,NUM2)+TEMP2B*DIFFSVA(1,NUM1,NUM2)
                    E1BB=E1BB+TEMP1B*DIFFSVB(3,NUM1,NUM2)+TEMP2B*DIFFSVB(1,NUM1,NUM2)
                    E1BC=E1BC+TEMP1B*DIFFSVC(3,NUM1,NUM2)+TEMP2B*DIFFSVC(1,NUM1,NUM2)
555                 CONTINUE 
                 ENDDO !NUM2
              ENDDO !NUM1
 
              ELEC1STA(I,1)=ELEC1STA(I,1)+2.0D0*E1AA
              ELEC1STA(J,1)=ELEC1STA(J,1)-2.0D0*E1AA
              ELEC1STB(I,1)=ELEC1STB(I,1)+2.0D0*E1BA
              ELEC1STB(J,1)=ELEC1STB(J,1)-2.0D0*E1BA
              ELEC1STA(I,2)=ELEC1STA(I,2)+2.0D0*E1AB
              ELEC1STA(J,2)=ELEC1STA(J,2)-2.0D0*E1AB
              ELEC1STB(I,2)=ELEC1STB(I,2)+2.0D0*E1BB
              ELEC1STB(J,2)=ELEC1STB(J,2)-2.0D0*E1BB
              ELEC1STA(I,3)=ELEC1STA(I,3)+2.0D0*E1AC
              ELEC1STA(J,3)=ELEC1STA(J,3)-2.0D0*E1AC
              ELEC1STB(I,3)=ELEC1STB(I,3)+2.0D0*E1BC
              ELEC1STB(J,3)=ELEC1STB(J,3)-2.0D0*E1BC

666           CONTINUE

           ENDDO  !J 
        ENDDO  !

C   IN ORDER TO DIFFERENTIATE BY THE COORDINATE OF ATOM K, YOU ONLY GET 
C   A VALUE FOR THE DERIVATIVE IF ONE OF THE TWO ATOMS INVOLVED IN THE
C   PAIR INTERACTION IS K OTHERWISE IT IS ZERO. THIS IS ACHIEVED BY USE
C   OF THE FACTOR TERM. I M SURE THIS IS HIGHLY INEFFICIENT BUT IF IT
C   WORKS THEN THAT IS WORTHWHILE. I CAN IMPROVE IT LATER....WHEN I M 
C   DRAWING MY PENSION.            
C   HAVE TO KEEP IT IN A LOOP WHERE I AND J ARE THE ATOM NUMBER RATHER
C   THAN THE AO.

C   RECENT CHANGES INVOLVE REPLACING DERIVV WITH ITS SPECIFIC VALUE 
C   FACTOR*DIFFSV(2,X,Y) AND PERHAPS SIMILARLY FOR DERIVS.
C   DIFFSV AND DIFFH WILL BE ZERO.
C   MUST BE AWARE THAT ALTHOUGH NONE OF THE DIAGONAL ELEMENTS ARE DEFINED
C   THEY ARE EQUAL TO ZERO. NOT DEEMED NECESSARY TO CALC. THEM SINCE
C   THE LOOP NEVER REACHES I=J.  GOOD TO USE J=I+1 SINCE USES SYMMETRY TO 
C   CUT DOWN ON CALCULATIONS.

C   KEEP DIFFS2 SINCE IT IS ONLY DEPENDENT ON WHICH ATOMS ARE INTERACTING 
C   NOT THE AOS

C   INCLUDE FACTOR OF 2 FOR ELEC1ST SINCE TWO ELECTRONS FILL EACH MO

      DO K=1,3
         DO I=1,N
            I2=3*(I-1)
            DERIV1ST(I2+K)=ELEC1STA(I,K)+ELEC1STB(I,K)+REP1ST(I,K)
         ENDDO
      ENDDO
       
      RETURN
      END
C   
C  SUBROUTINE TO EXPAND THE POLYNOMIAL SUM FOR THE OVERLAP MATRIX ELEMENTS
C  THIS IS BETWEEN SAME ELEMENT....SAME ELEMENT/DIFF ELEMENT WILL BE MORE
C   

      SUBROUTINE DOVECC(N,K,L,SSSS,SSPS,SPPS,SPPP,R)
      IMPLICIT NONE
      INTEGER  K,L,N
      DOUBLE PRECISION R(N,N), QTB(N,N)

C     COMMON /RDIST/ R, DIRCOS, DIAGA, DIAGB

      DOUBLE PRECISION SSSS,SSPS,SPPS,SPPP,
     3                  D1,D2,D3,D4,D5,D6,A3,B3,
     4                 D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,
     5                 D19,D20,D21,D22,D23,D24,D25,D26,D27,D28,D29,
     6             D30,D31,D32,D33,D34,D35,D36,D37,D38,D39,D40,DQDR

      PARAMETER ( D1=  0.4635980000 , D2=-0.354943D0,
C OLD PARAMS D2= -0.3593880000 ,
     /  D3=  0.1597240000 ,D4= -0.0236036000
     / ,D5= -0.0160748000 ,D6=  0.0101939000 ,D7= -0.0010466800 ,D8= -0.0013805000
     / ,D9=  0.0007822820,D10= -0.0001806570,

     /  D11= -0.3627180000 ,D12=  0.2504088000 ,D13= -0.0459648000 ,D14= -0.0572412000
     / ,D15=  0.0499554000 ,D16= -0.0161908000 ,D17= -0.0007504350 ,D18=  0.0030270400
     / ,D19= -0.0013407800,D20=  0.0002213130,

     /  D21= -0.1381954000 , D22=0.021232D0,
C OLD PARAMS D22=  0.0272058000 ,
     /  D23=  0.1362280000 ,D24= -0.1495750000
     / ,D25=  0.0722040000 ,D26= -0.0144966000 ,D27= -0.0040281700 ,D28=  0.0047257800
     / ,D29= -0.0021491900,D30=  0.0004729620,

     /  D31=  0.3653820000 ,D32= -0.3031560000 ,D33=  0.1686080000 ,D34= -0.0580734000
     / ,D35=  0.0075940400 ,D36=  0.0040539700 ,D37= -0.0031628400 ,D38=  0.0011715700
     / ,D39= -0.0002414690,D40= -0.0000131366)

       A3=1.0D0
       B3=7.0D0

       QTB(K,L)=(R(K,L)-((B3+A3)/2.0D0))/((B3-A3)/2.0D0)

C         PRINT*,'R IN DEROV IS',R(K,L)

      DQDR=1.0D0 /((B3-A3)/2.0D0)

C  SSSSIG

            IF (R(K,L).LT.6.858869592109767D0) THEN

        SSSS=(D2 + D3*4.0D0*QTB(K,L)
     /   +D4*(-3.0D0 + 12.0D0*(QTB(K,L)**2))
     /   + D5*(-16.0D0*QTB(K,L) + 32.0D0*(QTB(K,L)**3)) +D6*(5.0D0 -60.0D0*(QTB(K,L)**2)
     /   + 80.0D0*(QTB(K,L)**4)) +D7*(36.0D0*QTB(K,L) - 192.0D0*(QTB(K,L)**3) +192.0D0*(QTB(K,L)**5))
     /   +D8*(-7.0D0 +168.0D0*(QTB(K,L)**2) - 560.0D0*(QTB(K,L)**4) +448.0D0*(QTB(K,L)**6))
     /   +D9*(-64.0D0*QTB(K,L) +640.0D0*(QTB(K,L)**3) -1536.0D0*(QTB(K,L)**5) +1024.0D0*(QTB(K,L)**7))
     / +D10*(9.0D0 -360.0D0*(QTB(K,L)**2) +2160*(QTB(K,L)**4)
     /   -4032.0D0*(QTB(K,L)**6) +2304.0D0*(QTB(K,L)**8)))*DQDR

         ELSE
       
      SSSS=0.0D0

       ENDIF

C   SSPSIG

            IF (R(K,L).LT.6.968036930355212D0) THEN

      SSPS=D12*DQDR + D13*4.0D0*QTB(K,L)*DQDR
     /   +D14*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + D15*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +D16*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +D17*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +D18*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +D19*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +D20*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR - 4032*(QTB(K,L)**6)*DQDR
     /   +2304*(QTB(K,L)**8)*DQDR)

        ELSE

      SSPS=0.0D0

       ENDIF

C *****
C WHEN USING FS PARAMS, SWAP PPS AND PPPI
C *****

C SPPSIG

            IF (R(K,L).LT.7.031215111280781D0) THEN

      SPPS=(D22 + D23*4.0D0*QTB(K,L)
     /   +D24*(-3.0D0 + 12.0D0*(QTB(K,L)**2))
     /   + D25*(-16.0D0*QTB(K,L) + 32.0D0*(QTB(K,L)**3)) +D26*(5.0D0 -60.0D0*(QTB(K,L)**2)
     /   + 80.0D0*(QTB(K,L)**4)) +D27*(36.0D0*QTB(K,L) - 192.0D0*(QTB(K,L)**3) +192.0D0*(QTB(K,L)**5))
     /   +D28*(-7.0D0 +168.0D0*(QTB(K,L)**2) - 560.0D0*(QTB(K,L)**4) +448.0D0*(QTB(K,L)**6))
     /   +D29*(-64.0D0*QTB(K,L) +640.0D0*(QTB(K,L)**3) -1536.0D0*(QTB(K,L)**5) +1024.0D0*(QTB(K,L)**7))
     /   +D30*(9.0D0 -360.0D0*(QTB(K,L)**2) +2160*(QTB(K,L)**4)
     /   -4032.0D0*(QTB(K,L)**6) +2304.0D0*(QTB(K,L)**8)))*DQDR

          ELSE

        SPPS=0.0D0

         ENDIF

C   SPPPI

            IF (R(K,L).LT.6.4433341605186D0) THEN

      SPPP=(D32 + D33*4.0D0*QTB(K,L)
     /   +D34*(-3.0D0 + 12.0D0*(QTB(K,L)**2))
     /   + D35*(-16.0D0*QTB(K,L) + 32.0D0*(QTB(K,L)**3)) +D36*(5.0D0 -60.0D0*(QTB(K,L)**2)
     /   + 80.0D0*(QTB(K,L)**4)) +D37*(36.0D0*QTB(K,L) - 192.0D0*(QTB(K,L)**3) +192.0D0*(QTB(K,L)**5))
     /   +D38*(-7.0D0 +168.0D0*(QTB(K,L)**2) - 560.0D0*(QTB(K,L)**4) +448.0D0*(QTB(K,L)**6))
     /   +D39*(-64.0D0*QTB(K,L) +640.0D0*(QTB(K,L)**3) -1536.0D0*(QTB(K,L)**5) +1024.0D0*(QTB(K,L)**7))
     /   +D40*(9.0D0 -360.0D0*(QTB(K,L)**2) +2160*(QTB(K,L)**4)
     /   -4032.0D0*(QTB(K,L)**6) +2304.0D0*(QTB(K,L)**8)))*DQDR


          ELSE

        SPPP=0.0D0

          ENDIF

C   IF (R(K,L).GT.B3) THEN
C          SSSS=0.0D0
C          SSPS=0.0D0
C          SPPS=0.0D0
C          SPPP=0.0D0
C         ENDIF

      RETURN
      END
C   
C  SUBROUTINE TO EXPAND THE POLYNOMIAL SUM FOR THE OVERLAP MATRIX ELEMENTS
C  THIS IS BETWEEN SAME ELEMENT....SAME ELEMENT/DIFF ELEMENT WILL BE MORE
C   

      SUBROUTINE DAMCCA(N,K,L,SSSS,SSPS,SPPS,SPPP,R)
      IMPLICIT NONE
      INTEGER  K,L,N
      DOUBLE PRECISION R(N,N), QTB(N,N)

      DOUBLE PRECISION SSSS,SSPS,SPPS,SPPP,DQDR,
     /     G1,G2,G3,
     7     G4,G5,G6,G7,G8,G9,G10,G11,G12,G13,G14,G15,G16,G17,G18,G19,G20,
     8     G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G33,G34,G35,G36,
     9     G37,G38,G39,G40,A2,B2

       PARAMETER ( G1= -0.4546540000 ,G2=  0.3501960000 ,G3= -0.1513000000 ,G4=  0.0159980000
     / ,G5=  0.0247918000 ,G6= -0.0192764000 ,G7=  0.0071180300 ,G8= -0.0002604590
     / ,G9= -0.0014905100,G10=  0.0013685600,

     /  G11=  0.3813740000 ,G12= -0.2675544000 ,G13=  0.0587541000 ,G14=  0.0551394000
     / ,G15= -0.0624710000 ,G16=  0.0366550000 ,G17= -0.0161735000 ,G18=  0.0047799300
     / ,G19= -0.0000637944,G20= -0.0010983800,

     /  G21=  0.2788480000 ,G22=-0.1669651D0,
C OLD PARAM: G22= -0.1770288000 ,
     /  G23=  0.0113421000 ,G24=  0.0677288000
     / ,G25= -0.0683438000 ,G26=  0.0436374000 ,G27= -0.0211787000 ,G28=  0.0074277200
     / ,G29= -0.0013746800,G30= -0.0004145400,

     /  G31= -0.3851400000 ,G32=  0.3337080000 ,G33= -0.2141850000 ,G34=  0.1061410000
     / ,G35= -0.0414461000 ,G36=  0.0121444000 ,G37= -0.0017954400 ,G38= -0.0007822330
     / ,G39=  0.0008151550,G40= -0.0004982710)

       A2=1.0D0
       B2=7.0D0
       QTB(K,L)=(R(K,L)-((B2+A2)/2.0D0))/((B2-A2)/2.0D0)

C      PRINT*,'R IN DERHAM IS',R(K,L)

      DQDR=1.0D0/((B2-A2)/2.0D0)

C  SSSSIG

       IF (R(K,L).LT.6.501645139158383D0) THEN

       SSSS=G2*DQDR + G3*4.0D0*QTB(K,L)*DQDR
     /   +G4*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + G5*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +G6*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +G7*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +G8*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +G9*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +G10*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)

       ELSE
 
       SSSS=0.0D0

       ENDIF


C   SSPSIG

       IF (R(K,L).LT.6.514708000907687D0) THEN

      SSPS=G12*DQDR + G13*4.0D0*QTB(K,L)*DQDR
     /   +G14*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + G15*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +G16*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +G17*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +G18*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +G19*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +G20*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)

       ELSE
 
      SSPS=0.0D0

       ENDIF


C SWAPPED THESE TWO, DUE TO FUCKUP IN PRB

C SPPSIG

       IF (R(K,L).LT.6.699591659971658D0) THEN

      SPPS=G22*DQDR + G23*4.0D0*QTB(K,L)*DQDR
     /   +G24*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + G25*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +G26*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +G27*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +G28*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +G29*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +G30*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)

       ELSE

      SPPS=0.0D0

        ENDIF


C   SPPPI

       IF (R(K,L).LT.6.841936337171249D0) THEN


      SPPP=G32*DQDR + G33*4.0D0*QTB(K,L)*DQDR
     /   +G34*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + G35*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +G36*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +G37*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +G38*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +G39*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +G40*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)

         ELSE

            SPPP=0.0D0

         ENDIF

C         IF (R(K,L).GT.B2) THEN
C          SSSS=0.0D0
C          SSPS=0.0D0
C          SPPS=0.0D0
C          SPPP=0.0D0
C         ENDIF


      RETURN
      END
C   
C  SUBROUTINE TO EXPAND THE POLYNOMIAL SUM FOR THE OVERLAP MATRIX ELEMENTS
C  THIS IS BETWEEN SAME ELEMENT....SAME ELEMENT/DIFF ELEMENT WILL BE MORE
C   


      SUBROUTINE DAMCCB(N,XS,K,L,SSSS,SSPS,SPPS,SPPP,R, DIRCOS, DIAGA, DIAGB)
      IMPLICIT NONE
      INTEGER  K,L,N
      DOUBLE PRECISION R(N,N),
     1                 DIRCOS(N,N,3),
     3                 QTB(N,N),
     6                 DIAGA(4*N),DIAGB(4*N)

C     COMMON /RDIST/ R, DIRCOS, DIAGA, DIAGB

      DOUBLE PRECISION SSSS,SSPS,SPPS,SPPP,DQDR,
     /     G1,G2,G3,XS(3*N),
     7     G4,G5,G6,G7,G8,G9,G10,G11,G12,G13,G14,G15,G16,G17,G18,G19,G20,
     8     G21,G22,G23,G24,G25,G26,G27,G28,G29,G30,G31,G32,G33,G34,G35,G36,
     9     G37,G38,G39,G40,A2,B2

       PARAMETER (  G1= -0.3789880000 ,G2=0.287963,
C OLD PARAM; G2=  0.2886558000 ,
     /  G3= -0.1201660000 ,G4=  0.0100538000
     / ,G5=  0.0203983000 ,G6= -0.0149822000 ,G7=  0.0056378700 ,G8= -0.0006071250
     / ,G9= -0.0008101620,G10=  0.0006987440,

     /  G11=  0.2956740000 ,G12= -0.2010048000 ,G13=  0.0327500000 ,G14=  0.0514607000
     / ,G15= -0.0508434000 ,G16=  0.0288404000 ,G17= -0.0133668000 ,G18=  0.0046855100
     / ,G19=  0.0006011540,G20= -0.0000060000,

     /  G21=  0.2314380000 ,G22= -0.1469886000 ,G23=  0.0151875000 ,G24=  0.0440803000
     / ,G25= -0.0458782000 ,G26=  0.0312287000 ,G27= -0.0171949000 ,G28=  0.0079412400
     / ,G29= -0.0028890500,G30=  0.0012923000,

     /  G31= -0.3325740000 ,G32=  0.2847522000 ,G33= -0.1816530000 ,G34=  0.0901204000
     / ,G35= -0.0360385000 ,G36=  0.0113274000 ,G37= -0.0021334300 ,G38= -0.0006478810
     / ,G39=  0.0009400840,G40= -0.0009030410)

       A2=1.0D0
       B2=7.0D0
       QTB(K,L)=(R(K,L)-((B2+A2)/2.0D0))/((B2-A2)/2.0D0)

C      PRINT*,'R IN DERHAM IS',R(K,L)

      DQDR=1.0D0/((B2-A2)/2.0D0)

C  SSSSIG

       IF (R(K,L).LT.6.695259436126274D0) THEN

       SSSS=G2*DQDR + G3*4.0D0*QTB(K,L)*DQDR
     /   +G4*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + G5*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +G6*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +G7*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +G8*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +G9*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +G10*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)


      ELSE

      SSSS=0.0D0

      ENDIF

C   SSPSIG

       IF (R(K,L).LT.6.796735011037814D0) THEN


      SSPS=G12*DQDR + G13*4.0D0*QTB(K,L)*DQDR
     /   +G14*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + G15*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +G16*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +G17*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +G18*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +G19*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +G20*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)

         ELSE

        SSPS=0.0D0

         ENDIF



C SWAPPED THESE TWO, DUE TO FUCKUP IN PRB

C SPPSIG

       IF (R(K,L).LT.6.880535598840217D0) THEN

      SPPS=G22*DQDR + G23*4.0D0*QTB(K,L)*DQDR
     /   +G24*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + G25*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +G26*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +G27*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +G28*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +G29*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +G30*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)

         ELSE

         SPPS=0.0D0

         ENDIF



C   SPPPI

       IF (R(K,L).LT.5.944816716454667D0) THEN


      SPPP=G32*DQDR + G33*4.0D0*QTB(K,L)*DQDR
     /   +G34*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + G35*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +G36*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +G37*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +G38*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +G39*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     /   +G40*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)

        ELSE

          SPPP=0.0D0

        ENDIF


C         IF (R(K,L).GT.B2) THEN
C          SSSS=0.0D0
C          SSPS=0.0D0
C          SPPS=0.0D0
C          SPPP=0.0D0
C         ENDIF

      RETURN
      END
C   
C  SUBROUTINE TO EXPAND THE POLYNOMIAL SUM FOR THE OVERLAP MATRIX ELEMENTS
C  THIS IS BETWEEN SAME ELEMENT....SAME ELEMENT/DIFF ELEMENT WILL BE MORE
C   

      SUBROUTINE DREPCC(N,K,L,REP,R)
      IMPLICIT NONE
      INTEGER  K,L,N
      DOUBLE PRECISION R(N,N), QTB(N,N)

C     COMMON /RDIST/ R, DIRCOS, DIAGA, DIAGB

      DOUBLE PRECISION REP,
     /     C1,C2,C3,
     7     C4,C5,C6,C7,C8,C9,C10,
     9     A2,B2,DQDR

       PARAMETER (   C1=  2.5911600000 ,C2= -2.0924020000 ,C3=  1.1228900000 ,C4= -0.4302620000
     / ,C5=  0.1257390000 ,C6= -0.0215445000 ,C7=  0.0000000000 ,C8=  0.0000000000
     / ,C9=  0.0000000000,C10=  0.0000000000, A2=1.0D0, B2=3.3D0)

C      A2=1.0D0
C      B2=3.3D0

C         IF (R(K,L).GT.B2) REP=0.0D0

         IF (R(K,L).GT.3.251838574097556D0) THEN
            REP=0.0D0
         ELSE
C  SSSSIG
       QTB(K,L)=(R(K,L)-((B2+A2)/2.0D0))/((B2-A2)/2.0D0)
       DQDR=1.0D0/((B2-A2)/2.0D0)
      REP=C2*DQDR + C3*4.0D0*QTB(K,L)*DQDR
     /   +C4*(-3.0D0*DQDR + 12.0D0*(QTB(K,L)**2)*DQDR)
     /   + C5*(-16.0D0*QTB(K,L)*DQDR + 32.0D0*(QTB(K,L)**3)*DQDR) +C6*(5.0D0*DQDR -60.0D0*(QTB(K,L)**2)*DQDR
     /   + 80.0D0*(QTB(K,L)**4)*DQDR) +C7*(36.0D0*QTB(K,L)*DQDR - 192.0D0*(QTB(K,L)**3)*DQDR +192.0D0*(QTB(K,L)**5)*DQDR)
     /   +C8*(-7.0D0*DQDR +168.0D0*(QTB(K,L)**2)*DQDR - 560.0D0*(QTB(K,L)**4)*DQDR +448.0D0*(QTB(K,L)**6)*DQDR)
     /   +C9*(-64.0D0*QTB(K,L)*DQDR +640.0D0*(QTB(K,L)**3)*DQDR -1536.0D0*(QTB(K,L)**5)*DQDR +1024.0D0*(QTB(K,L)**7)*DQDR)
     / +C10*(9.0D0*DQDR -360.0D0*(QTB(K,L)**2)*DQDR +2160*(QTB(K,L)**4)*DQDR
     /   -4032.0D0*(QTB(K,L)**6)*DQDR +2304.0D0*(QTB(K,L)**8)*DQDR)
C           REP=REP+0.00002383611355998103D0
         ENDIF


C       PRINT*,'IN DREPCC, REP IS',REP
      RETURN
      END
C
C**************************************************************************
C
C  SUBROUTINE DIFF FORMS THE CARTESIAN SECOND DERIVATIVE MATRIX USING
C  NUMERICAL DIFFERENTIATION.
C
C**************************************************************************
C
      SUBROUTINE SECDFTB(N,X,VNEW,XMULREAL)
      USE MODHESS
      IMPLICIT NONE
      INTEGER N, J1, J2
      DOUBLE PRECISION X(3*N), 
     1                 DIF, FG1(3*N),V1,VNEW(3*N),XMULREAL

      DIF=1.0D-6

      DO J1=1,3*N
         X(J1)=X(J1)+DIF
         CALL DFTB(N,X,FG1,V1,.TRUE.,XMULREAL)
         X(J1)=X(J1)-DIF
         DO J2=J1,3*N
            HESS(J2,J1)=(FG1(J2)-VNEW(J2))/DIF
            HESS(J1,J2)=HESS(J2,J1)
         ENDDO
      ENDDO

      RETURN
      END

