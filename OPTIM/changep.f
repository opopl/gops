C   OPTIM: A PROGRAM FOR OPTIMIZING GEOMETRIES AND CALCULATING REACTION PATHWAYS
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
      SUBROUTINE CHANGEP
      USE COMMONS
      USE KEY
      USE MODTWOEND
      USE MODAMBER
      USE MODNEB
      USE PORFUNCS
      IMPLICIT NONE

      INTEGER ITEM, NITEMS, LOC, LINE, NCR, NERROR, IR, LAST, NTYPEA
      COMMON /BUFINF/ ITEM, NITEMS, LOC(132), LINE, SKIPBL, CLEAR, NCR,
     &                NERROR, IR, ECHO, LAST, CAT
      DOUBLE PRECISION EPSAB, EPSBB, SIGAB, SIGBB
      LOGICAL END, SKIPBL, CLEAR, ECHO, CAT, YESNO
      CHARACTER WORD*16, WW*20, FNAME*19
      COMMON /BIN/ EPSAB, EPSBB, SIGAB, SIGBB, NTYPEA
      INTEGER MP, LP,  XMP, XLP, ISTAT
      DOUBLE PRECISION GTOL,BSTPMIN,BSTPMAX, XGTOL,XBSTPMIN,XBSTPMAX
      COMMON /LB3/MP,LP,GTOL,BSTPMIN,BSTPMAX
      COMMON /XLB3/XMP,XLP,XGTOL,XBSTPMIN,XBSTPMAX

C     PRINT*,'IN CHANGEP'
      IF (FILTH.EQ.0) THEN
         WRITE(FNAME,'(A12)') 'CHANGEPARAMS'
      ELSE 
         WRITE(FNAME,'(A)') 'CHANGEPARAMS.'//TRIM(ADJUSTL(FILTHSTR))
      ENDIF

      INQUIRE(FILE=FNAME,EXIST=YESNO)
C     PRINT*,'EXIST=',YESNO
      IF (YESNO) THEN
C
C  UNIT 5 SEEMS TO GET LEFT OPEN IN SOME PATHS THROUGH THE PROGRAM. IT SHOULD
C  BE CLOSED IN FETCHZ?
C
         CLOSE(5)
         OPEN (5,FILE=FNAME,STATUS='OLD')
      ELSE
         RETURN
      ENDIF

190   CALL INPUT(END)
C     PRINT*,'END=',END
      IF (.NOT. END) THEN
         CALL READU(WORD)
C        PRINT*,'WORD=',WORD
      ENDIF
C
C  POINTS - KEYWORD AT THE END OF THE LIST OF OPTIONS AFTER WHICH
C           THE CARTESIAN COORDINATES FOLLOW. MUST BE PRESENT UNLESS VARIABLES, AMBER, 
C           CASTEP, ONETEP, CP2K, CHARMM OR CPMD 
C           IS PRESENT INSTEAD.
C
      IF (END) THEN
        CLOSE(5)
        CALL SYSTEM(' MV CHANGEPARAMS CHANGEPARAMS.READ ')
C       PRINT*,'MV CHANGEPARAMS CHANGEPARAMS.READ '
        RETURN
      ENDIF

      IF (WORD.EQ.'    ' .OR.WORD.EQ.'NOTE'.OR.WORD.EQ.'COMMENT'
     &                          .OR. WORD .EQ. '\\') THEN 
         GOTO 190
C
C  SEARCH SPECIFIES THE VALUE OF INR, I.E. THE SEARCH TYPE.     - DEFAULT N=0
C
      ELSE IF (WORD.EQ.'SEARCH') THEN
         CALL READI(INR)
         WRITE(*,'(A,I3)') '*** CHANGING SEARCH TYPE TO ',INR
C
C  TURN ON LBFGS GRADIENT MINIMIZATION. GMAX IS THE CONVERGENCE
C  CRITERION FOR THE RMS GRADIENT, DEFAULT 0.001.
C  FOR BFGSTS NEVL AND NEVS ARE THE MAXIMUM ITERATIONS ALLOWED IN THE SEARCHES FOR 
C  THE LARGEST AND SMALLEST EIGENVECTORS, RESPECTIVELY AND NBFGSMAX1 IS THE LARGEST
C  NUMBER OF BFGS STEPS ALLOWED IN THE SUBSEQUENT RESTRICTED MINIMIZATION.
C  IF THE NEGATIVE EIGENVALUE APPEARS TO HAVE CONVERGED THEN NBFGSMAX2 STEPS
C  ARE ALLOWED IN THE TANGENT SPACE.
C  CONVU IS USED TO DETERMINE CONVERGENCE IN SUCH RUNS AND BFGSCONV CAN BE USED
C  TO SET GMAX, THE CONVERGENCE CRITERIA FOR THE SUBSPACE OPTIMIZATION.
C
C  IF REOPT IS TRUE THE SMALLEST HESSIAN EIGENVECTOR IS REDETERMINED AFTER THE
C  EF STEP BEFORE THE TANGENT SPACE MINIMISATION.
C
      ELSE IF (WORD.EQ.'BFGSCONV') THEN
         IF (NITEMS.GT.1) THEN
            CALL READF(GMAX)
         ENDIF
         WRITE(*,'(A,F15.5)') '*** CHANGING LBFGS RMS CONVERGENCE CRITERION TO ',GMAX
      ELSE IF (WORD.EQ.'BFGSTS') THEN
         BFGSTST=.TRUE.
         INR=2
         IF (NITEMS.GT.1) THEN
            CALL READI(NEVS)
         ENDIF
         IF (NITEMS.GT.2) THEN
            CALL READI(NBFGSMAX1)
         ENDIF
         IF (NITEMS.GT.3) THEN
            CALL READI(NBFGSMAX2)
         ENDIF
         IF (NITEMS.GT.4) THEN
            CALL READF(CEIG)
         ENDIF
         IF (NITEMS.GT.5) THEN
            CALL READI(NEVL)
         ENDIF
         WRITE(*,'(A)') '*** CHANGING PARAMETERS FOR BFGSTS ACCORDING TO FILE CHANGEPARAMS'
      ELSE IF (WORD.EQ.'REOPT') THEN
         REOPT=.TRUE.
         WRITE(*,'(A)') '*** TURNING ON EIGENVECTOR REOPTIMISATION AFTER EF STEP'
C
C  IF CHECKINDEX IS .TRUE. AND THE BFGSTS ROUTINE CONVERGES AN ATTEMPT IS
C  MADE TO COUNT THE NUMBER OF NEGATIVE HESSIAN EIGENVALUES USING PROJECTION,
C  ORTHOGONALIZATION AND ITERATION. WE ALSO NEED THE OPPORTUNITY TO CHANGE THE
C  PARAMETERS NEVL AND NEVS WITHIN BFGSTS IF BFGSTS ISN T TRUE.
C  CHECKINDEX CAN ALSO BE USED WITH BFGSMIN AND SHOULD UNDERSTAND NOHESS TOO.
C
      ELSE IF (WORD.EQ.'CHECKINDEX') THEN
         CHECKINDEX=.TRUE.
         IF (NITEMS.GT.1) THEN
            CALL READI(NEVS)
         ENDIF
         IF (NITEMS.GT.2) THEN
            CALL READF(CEIG)
         ENDIF
         IF (NITEMS.GT.3) THEN
            CALL READI(NEVL)
         ENDIF
         WRITE(*,'(A)') '*** TURNING ON HESSIAN INDEX CHECK'
C
C  IF THE INDEX FOUND BY CHECKINDEX DOES NOT CORRESPOND TO BFGSMIN OR BFGSTS THEN
C  CHECKCONT CAUSES A PUSHOFF ALONG THE EIGENVECTOR CORREPSONDING TO THE SOFTEST
C  UNDESIRED NEGATIVE EIGENVALUE. 
C
      ELSE IF (WORD.EQ.'CHECKCONT') THEN
         CHECKCONT=.TRUE.
         WRITE(*,'(A)') '*** WILL CONTINUE AFTER HESSIAN INDEX CHECK'
C
C  MAXBFGS X1 X2 X3 X4\/}: {\IT X\/} SPECIFIES THE MAXIMUM ALLOWED STEP LENGTH IN LBFGS
C  MINIMISATIONS, {\IT X1\/} FOR  NORMAL MINIMISATIONS, {\IT X2\/} FOR RAYLEIGH-RITZ RATIO
C  MINIMISATION, {\IT X3\/} FOR PUTTING STRUCTURES IN CLOSEST COINCIDENCE WITH
C  {\BF MIND} (NO LONGER USED!!), AND {\IT X4\/} FOR NEB MINIMISATIONS. DEFAULT VALUES ALL 0.2.
C
      ELSE IF (WORD.EQ.'MAXBFGS') THEN
         CALL READF(MAXBFGS)
         IF (NITEMS.GT.2) CALL READF(MAXXBFGS)
         IF (NITEMS.GT.3) CALL READF(MAXMBFGS)
         IF (NITEMS.GT.4) CALL READF(MAXNEBBFGS)
C
C  PRESSURE TELLS THE PROGRAM TO PERFORM A CONSTANT PRESSURE OPTIMISATION
C           FOR SC, ME AND P6 WITH PERIODIC BOUNDARY CONDITIONS - DEFAULT OFF
C
      ELSE IF (WORD.EQ.'PRESSURE') THEN
         PRESSURE=.TRUE.
         WRITE(*,'(A)') '*** TURNING ON CONSTANT PRESSURE OPTIMISATION'
C
C  NZERO IS THE NUMBER OF ZERO EIGENVALUES, DEFAULT 0.
C
      ELSE IF (WORD.EQ.'ZEROS') THEN
         CALL READI(NZERO)
         WRITE(*,'(A,I4)') '*** NUMBER OF ZERO HESSIAN EIGENVALUES RESET TO ',NZERO
      ELSE IF (WORD.EQ.'EVCUT') THEN
         CALL READF(EVCUT)
         WRITE(*,'(A,F15.5)') '*** CUTOFF FOR ZERO HESSIAN EIGENVALUES RESET TO ',EVCUT
      ELSE IF (WORD.EQ.'PARALLEL') THEN
         PARALLEL=.TRUE.
         CALL READA(NPROC)
         WRITE(*,'(A,A)') '*** NUMBER OF PARALLEL JOBS RESET TO ',NPROC
C
C  DOUBLE ENDED TS SEARCH.
C
      ELSE IF (WORD.EQ.'TWOENDS') THEN
         TWOENDS=.TRUE.
         IF (NITEMS.GT.1) CALL READF(FSTART)
         IF (NITEMS.GT.2) CALL READF(FINC)
         IF (NITEMS.GT.3) CALL READI(NTWO)
         IF (NITEMS.GT.4) CALL READF(RMSTWO)
         IF (NITEMS.GT.5) CALL READI(NTWOITER)
         IF (NITEMS.GT.6) CALL READF(TWOEVAL)
          WRITE(*,'(A,2F15.5,I4,F15.5,I4,F15.5)') '*** TWOENDS PARAMETERS RESET TO ',FSTART,FINC,NTWO,RMSTWO,NTWOITER,TWOEVAL
C
C  SCALE N SETS THE VALUE OF ISTCRT                             - DEFAULT N=10
C
      ELSE IF (WORD.EQ.'SCALE') THEN
         CALL READI(ISTCRT)
         WRITE(*,'(A,I4)') '*** STEP SCALING CRITERION RESET TO ',ISTCRT
C
C  PRINT N SETS THE VALUE OF IPRNT                              - DEFAULT N=0
C
      ELSE IF (WORD.EQ.'PRINT') THEN
         CALL READI(IPRNT)
         WRITE(*,'(A,I4)') '*** PRINT LEVEL RESET TO ',IPRNT
C
C  MODE N  SPECIFIES THE EIGENVECTOR TO FOLLOW                  - DEFAULT N=0
C
      ELSE IF (WORD.EQ.'MODE') THEN
         CALL READI(IVEC)
         IF (NITEMS.GT.2) THEN
            CALL READI(IVEC2)
         ELSE
C           IVEC2=IVEC
         ENDIF
         WRITE(*,'(A,2I4)') '*** INITIAL AND SUBSEQUENT EIGENVECTORS FOLLOWED RESET TO ',IVEC,IVEC2
C
C  MAXSTEP N SPECIFIES THE MAXIMUM STEP SIZE IN REAL UNITS      - DEFAULT N=0.2
C
      ELSE IF (WORD.EQ.'MAXSTEP') THEN
         CALL READF(MXSTP)
         WRITE(*,'(A,F15.5)') '*** MAXIMUM STEP SIZE RESET TO ',MXSTP
      ELSE IF (WORD.EQ.'MAXMAX') THEN
         CALL READF(MAXMAX)
         WRITE(*,'(A,F15.5)') '*** MAXIMUM VALUE OF THE MAXIMUM ALLOWED STEP SIZE RESET TO ',MAXMAX
      ELSE IF (WORD.EQ.'MINMAX') THEN
         CALL READF(MINMAX)
         WRITE(*,'(A,F15.5)') '*** MINIMUM VALUE OF THE MAXIMUM ALLOWED STEP SIZE RESET TO ',MINMAX
C
C  VALUES N PRINT THE HESSIAN EIGENVALUES EVERY N CYCLES        - DEFAULT N=20     
C
      ELSE IF (WORD .EQ. 'VALUES') THEN
         CALL READI(NVALUES)
         WRITE(*,'(A,F15.5)') '*** HESSIAN EIGENVALUE PRINT FREQUENCY RESET TO ',MINMAX
C
C  EFSTEPS N PRINT THE UNSCALED STEPS CALCULATED FOR EACH MODE
C          EVERY N CYCLES                                       - DEFAULT OFF
C
      ELSE IF (WORD .EQ. 'EFSTEPS') THEN
         EFSTEPST=.TRUE.
         CALL READI(EFSTEPS)
         WRITE(*,'(A,F15.5)') '*** UNSCALED STEP PRINT FREQUENCY RESET TO ',EFSTEPS
C
C  STEPS N SETS THE NUMBER OF OPTIMISATION STEPS TO PERFORM
C          PER CALL TO OPTIM                                    - DEFAULT N=1     
C
      ELSE IF (WORD .EQ. 'STEPS') THEN
         CALL READI(NSTEPS)
         WRITE(*,'(A,I5)') '*** TOTAL NUMBER OF STEPS RESET TO ',NSTEPS
C
C  DUMPVECTOR SWITCHES ON DUMPING OF EIGENVECTORS TO FILE 
C              VECTORS.DUMP                                     - DEFAULT OFF
C  ALLSTEPS DUMPS THE VECTOR(S) AT EACH STEP. ALLVECTORS DUMPS ALL THE VECTORS.
C  THE DEFAULTS ARE FOR ONLY THE VECTOR CORRESPONDING TO THE SOFTEST NON-ZERO
C  EIGENVALUE TO BE DUMPED FOR THE LAST STEP.
C
      ELSE IF (WORD .EQ. 'DUMPVECTOR') THEN
         DUMPV=.TRUE.
         IF (NITEMS.GT.1) THEN
            CALL READU(WORD)
            IF (WORD.EQ.'ALLSTEPS') ALLSTEPS=.TRUE.
            IF (WORD.EQ.'ALLVECTORS') ALLVECTORS=.TRUE.
         ENDIF
         IF (NITEMS.GT.2) THEN
            CALL READU(WORD)
            IF (WORD.EQ.'ALLSTEPS') ALLSTEPS=.TRUE.
            IF (WORD.EQ.'ALLVECTORS') ALLVECTORS=.TRUE.
         ENDIF
         WRITE(*,'(A,F15.5)') '*** HESSIAN EIGENVECTOR DUMPING RESET ACCORING TO CHANGEPARAMS FILE '
C
C
C  GRADIENT N PRINTS THE GRADIENTS ALONG THE HESSIAN EIGENDIRECTIONS
C             EVERY N CYCLES                                    - DEFAULT OFF
C
      ELSE IF (WORD .EQ. 'GRADIENTS') THEN
        PGRAD=.TRUE.
        CALL READI(NGRADIENTS)
         WRITE(*,'(A,F15.5)') '*** GRADIENT PRINTING RESET ACCORDING TO CHANGEPARAMS FILE '
C
C  VECTORS N PRINTS THE EIGENVECTORS EVERY N CYCLES             - DEFAULT OFF
C
      ELSE IF (WORD .EQ. 'VECTORS') THEN
         VECTORST=.TRUE.
         CALL READI(NVECTORS)
         WRITE(*,'(A,F15.5)') '*** HESSIAN EIGENVECTOR PRINTING RESET ACCORING TO CHANGEPARAMS FILE '
C
C  SUMMARY N PRINT A SUMMARY OF THE STEPS TAKEN EVERY N CYCLES  - DEFAULT N=20   
C
      ELSE IF (WORD .EQ. 'SUMMARY') THEN
         IF (NITEMS.GT.1) CALL READI(NSUMMARY)
         WRITE(*,'(A,F15.5)') '*** SUMMARY PRINT FREQUENCY RESET ACCORING TO CHANGEPARAMS FILE '
C
C  ADM [OFF | ON N] PRINTS THE ATOMIC DISTANCE MATRIX EVERY N 
C                   IF SWITCHED ON                 CYCLES       - DEFAULT N=20      
C
      ELSE IF (WORD .EQ. 'ADM') THEN
         ADMT=.TRUE.
         CALL READI(NADM)
         WRITE(*,'(A,F15.5)') '*** ATOMIC DISTANCE MATRIX PRINT FREQUENCY RESET ACCORING TO CHANGEPARAMS FILE '
C
C  CONVERGE N M INDEX/NOINDEX SETS THE CONVERGENCE CRITERIA FOR THE MAXIMUM 
C               UNSCALED STEP AND RMS FORCE                     - DEFAULT N=0.0001, M=0.000001
C                                                           OR M < 0.00001 .AND. N < M*100000  
C               IF NOINDEX IS SET THE HESSIAN INDEX ISN T CHECKED - THE DEFAULT IS
C               INDEX.
C
      ELSE IF (WORD .EQ. 'CONVERGE') THEN
         CALL READF(CONVU)
         IF (NITEMS.GT.2) THEN
            CALL READF(CONVR)
         ENDIF
         IF (NITEMS.GT.3) THEN
            CALL READU(WORD)
            IF (WORD.EQ.'NOINDEX') INDEXT=.FALSE.
         ENDIF
         WRITE(*,'(A,2F15.5)') '*** EF CONVERGENCE CRITERIA RESET TO ',CONVU,CONVR
C
C  SYMCUT N RMS FORCE BELOW WHICH SYMMETRY SUBROUTINE IS CALLED - DEFAULT 0.001
C
      ELSE IF (WORD .EQ. 'SYMCUT') THEN
         CALL READF(SYMCUT)
         WRITE(*,'(A,2F15.5)') '*** RMS FORCE BELOW WHICH SYMMETRY IS CALLED RESET TO ',SYMCUT
C
C  TOLD N INITIAL DISTANCE TOLERANCE IN SYMMETRY SUBROUTINE     - DEFAULT 0.0001
C
      ELSE IF (WORD .EQ. 'TOLD') THEN
         CALL READF(TOLD)
         WRITE(*,'(A,2F15.5)') '*** INITIAL DISTANCE TOLERANCE IN SYMMETRY RESET TO ',TOLD
C
C  TOLE N INITIAL TOLERANCE FOR THE DIFFERENCE IN PRINCIPAL MOMENTS 
C         OF INERTIA DIVIDED BY THE SUM OF THE PRINCIPAL MOMENTS 
C         IN SYMMETRY SUBROUTINE                                - DEFAULT 0.0001
C
      ELSE IF (WORD .EQ. 'TOLE') THEN
         CALL READF(TOLE)
         WRITE(*,'(A,2F15.5)') '*** INITIAL MOMENT OF INERTIA TOLERANCE IN SYMMETRY RESET TO ',TOLE
      ELSE IF (WORD .EQ. 'AXIS') THEN
         CALL READI(NHCHECK)
         WRITE(*,'(A,I3)') '*** HIGHEST ROTATION AXIS CHECKED IN SYMMETRY RESET TO ',NHCHECK
C
C  TRAD N SETS THE TRUST RADIUS TO N                            - DEFAULT N=4       
C
      ELSE IF (WORD .EQ. 'TRAD') THEN
         CALL READF(TRAD)
         WRITE(*,'(A,F15.5)') '*** TRUST RADIUS RESET TO ',TRAD
C
C  NUDGED ELASTIC BAND CALCULATION USING A MAXIMUM OF NSTEPNEB STEPS WITH
C  NIMAGE IMAGES AND RMS CONVERGENCE CRITERION RMSNEB.
C
      ELSE IF (WORD.EQ.'NEB') THEN
         NEBT=.TRUE.
         IF (NITEMS.GT.1) CALL READI(NSTEPNEB)
         IF (NITEMS.GT.2) CALL READI(NIMAGE)
         IF (NITEMS.GT.3) CALL READF(RMSNEB)
         WRITE(*,'(A,2I5,F15.5)') '*** READ NEW PARAMETERS FOR OLD NEB ',NSTEPNEB,NIMAGE,RMSNEB

C
C  PUSHOFF X SETS THE MAGNITUDE OF THE STEP AWAY FROM A STATIONARY POINT OF THE
C            WRONG INDEX - DEFAULT X=0.01
C
      ELSE IF (WORD .EQ. 'PUSHOFF') THEN
         CALL READF(PUSHOFF)
         WRITE(*,'(A,F15.5)') '*** PUSHOFF RESET TO ',PUSHOFF
C
C  NSTEPMIN SETS THE MINIMUM NUMBER OF STEPS ALLOWED BEFORE CONVERGENCE.
C 
      ELSE IF (WORD .EQ. 'STEPMIN') THEN
         CALL READI(NSTEPMIN)
         WRITE(*,'(A,I4)') '*** MINIMUM NUMBER OF STEPS ALLOWED BEFORE CONVERGENCE RESET TO ',NSTEPMIN
C
C  PUSHCUT SETS THE THRESHOLD FOR WHEN A PUSHOFF WILL BE APPLIED, I.E.
C  THE RMS FORCE MUST BE LESS THAN PUSHCUT.
C
      ELSE IF (WORD .EQ. 'PUSHCUT') THEN
         CALL READF(PUSHCUT)
         WRITE(*,'(A,F15.5)') '*** CUTOFF BELOW WHICH PUSHOFFS MAY BE APPLIED RESET TO ',PUSHCUT
C
C  NUMBER OF BFGS UPDATES BEFORE RESETTING, DEFAULT=4
C
      ELSE IF (WORD.EQ.'UPDATES') THEN
         CALL READI(MUPDATE)
         IF (NITEMS.GT.2) CALL READI(XMUPDATE)
         WRITE(*,'(A,2I4)') '*** NUMBER OF LBFGS STEPS SAVED RESET TO ',MUPDATE,XMUPDATE
C
C  DEBUG ON/OFF SETS N=1 FOR EFSTEPS, VALUES, SUMMARY ABOVE     - DEFAULT OFF 
C
      ELSE IF (WORD .EQ. 'DEBUG') THEN
         CALL READU(WW)
         IF (WW .EQ. 'ON' .OR. WW .EQ. ' ') THEN
           EFSTEPST=.TRUE.
           PGRAD=.TRUE.
           NGRADIENTS=1
           EFSTEPS=1
           NSUMMARY=1 
           NVALUES=1
         ENDIF
         WRITE(*,'(A,2I4)') '*** DEBUG PRINTING TURNED ON '
C
C  EIGENVALUE SHIFT PARAMETER.
C
      ELSE IF (WORD .EQ. 'SHIFT') THEN
         CALL READF(SHIFTV)
         WRITE(*,'(A,2I4)') '*** EIGENVALUE SHIFT PARAMETER CHANGED TO ',SHIFTV
C
C  WHETHER TO PUT PERIODIC IMAGES BACK IN THE PRIMARY SUPERCELL.
C
      ELSE IF (WORD .EQ. 'NORESET') THEN
         NORESET=.TRUE.
         WRITE(*,'(A,2I4)') '*** PERIODIC IMAGES WILL NOT BE PUT BACK INTO THE PRIMARY SUPERCELL '
      ELSE IF (WORD.EQ.'NOIT') THEN
         NOIT=.TRUE.
         WRITE(*,'(A,2I4)') '*** NOIT HAS BEEN SET TO .TRUE.'
C
C  LINE MINIMISATION OF GRADIENT ALONG EF DIRECTION
C
      ELSE IF (WORD.EQ.'LINEMIN') THEN
         LINEMIN=.TRUE.
         WRITE(*,'(A)') '*** LINE MINIMISATION FOR EF STEP TURNED ON'
C
C  STEPS N SETS THE NUMBER OF OPTIMISATION STEPS TO PERFORM
C          PER CALL TO OPTIM                                    - DEFAULT N=1
C
      ELSE IF (WORD .EQ. 'BFGSSTEPS') THEN
        CALL READI(BFGSSTEPS)
         WRITE(*,'(A,I6)') '*** MAXIMUM NUMBER OF BFGS STEPS CHANGED TO ',BFGSSTEPS
      ELSE IF (WORD.EQ.'MAXERISE') THEN
         CALL READF(MAXERISE)
         IF (NITEMS.GT.1) CALL READF(XMAXERISE)
         WRITE(*,'(A,2G20.10)') '*** MAXIMUM ENERGY/EV RISE CHANGED TO ',MAXERISE,XMAXERISE
      ELSE IF (WORD .EQ. 'STOP') THEN
         WRITE(*,'(A)') '*** STOP DIRECTIVE READ FROM CHANGEPARAMS'
         CALL SYSTEM(' MV CHANGEPARAMS CHANGEPARAMS.READ ')
         STOP
      ELSE
        CALL REPORT('UNRECOGNIZED COMMAND '//WORD,.TRUE.)
      ENDIF

      CALL FLUSH(6,ISTAT)
      GOTO 190

      RETURN
      END
