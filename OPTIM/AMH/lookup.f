
C     --------------------- LOOKUP ----------------------

      SUBROUTINE LOOKUP(MAXR,CRDIXN,VPOTNT,FORSE,PRO_CORD,F_CORD,
     *                  TRGENG,NUMLNG,NMRES,RINCINV,RINCSQ,
     *                  IGOMB,NGOMB,TEMPAV,MAXTAB,ILONG,
     *                  E,IBIASGAUSS,BIAS_AV,BIAS_VAR,
     *                  BIAS_PREFACTOR,IBIASPOLY,NBIASPOLY,
     *                  BIASPOLY,I_QBIAS_A,I_QBIAS_B,CCEV_DIST,PEXCLD)

C     ---------------------------------------------------

C     LOOKP  PERFORMS LOOKUP OF POTNTLIAL OR FORCE
C            FOR INTERACTING SITES GIVEN THE DISTANCES
C            BETWEEN THEM

C     ARGUMENTS:

C        TEMPAV- IF TRUE, THEN FIND POTNTLIAL ENERGY
C
C        I_IXN   COUNTER WHICH RANGES OVER ALL OF THE INTERACTIONS.  THE 
C                ACTUAL NUMBER DEPENDS ON IF NEAREST NEIGHBOR INTERACTIONS ARE
C                INCLUDED OR NOT, BUT IS APROX.  N(N-1)/2
C
C     ---------------------------------------------------

      USE AMHGLOBALS,  ONLY:MAXCNT,AMHMAXSIZ,I_RG_BIAS,IEXCLD,MINMR,MAXMR,
     *      IEXCLD_GAMMA,MAXCRD,SO
      USE AMH_INTERFACES, ONLY:GOMB,ADDITIVE_EV,RG_BIAS,EV_GAMMA,
     *                      Q_BIAS_SEG_A,Q_BIAS_SEG_B
      
      IMPLICIT NONE
      
      INTEGER, INTENT(IN):: MAXR,MAXTAB
      INTEGER, INTENT(IN):: CRDIXN(MAXTAB,2),
     *  NUMLNG(0:AMHMAXSIZ,MAXTAB),NMRES,ILONG(MAXCNT,2,MAXTAB),
     *  NBIASPOLY
       DOUBLE PRECISION, INTENT(IN):: VPOTNT(0:MAXR+1,MAXCNT,MAXTAB),
     *  FORSE(0:MAXR+1,MAXCNT,MAXTAB),PRO_CORD(AMHMAXSIZ,3,MAXCRD),
     *  RINCINV(MAXCNT,MAXTAB),
     *  RINCSQ(MAXCNT,MAXTAB),NGOMB,BIAS_AV,BIAS_VAR,BIAS_PREFACTOR,
     *  BIASPOLY(1:100),CCEV_DIST(MAXCNT,MAXTAB),PEXCLD
       DOUBLE PRECISION, INTENT(OUT):: F_CORD(AMHMAXSIZ,3,MAXCRD),
     *  E(:,:),TRGENG(MAXTAB,3)
      LOGICAL, INTENT(IN):: IGOMB,TEMPAV,IBIASGAUSS,IBIASPOLY,
     *           I_QBIAS_A,I_QBIAS_B


         INTEGER INDEX(MAXCNT,MAXTAB),ISIT1,ISIT2,TAB


         DOUBLE PRECISION DISTNE(MAXCNT,MAXTAB),TFORCE(MAXCNT,MAXTAB),
     *        POTNTL(MAXCNT),F_CORD_TEMP(AMHMAXSIZ,3,MAXCRD),
     *        ETA(MAXCNT,MAXTAB),A_TO_NMO(1:AMHMAXSIZ,1:2),
     *        XDIFF(MAXCNT,MAXTAB),YDIFF(MAXCNT,MAXTAB),
     *        ZDIFF(MAXCNT,MAXTAB),E_TEMP(SIZE(E,1),SIZE(E,2)),BIAS_F


C     INTERNAL VARIABLES:

         INTEGER I_IXN,IA,IB,I515,INDX 

          DOUBLE PRECISION M,C,ETA_PRIME

C -COMMENT BACK IN IF WANT TO USE THESE VARIABLES
C        DOUBLE PRECISION FORSEGO1,FORSEGO2,ARSETOT,DELTAV,
C    *         OLDAMHE,OLDDIST(MAXCNT,MAXTAB),ARSETOT2,
C    *         DELTADIST(MAXCNT,MAXTAB),DELTAVBIAS,
C    *         OLDBIASE,
C    *         OLDTFORCE(MAXCNT,MAXTAB),OLDBIAS_F,
C        DOUBLE PRECISION V240,V240OLD,DELTAV240
C        DOUBLE PRECISION F_CORD_OLD(AMHMAXSIZ,3,MAXCRD)
C        INTEGER I1,I2

C     --------------------- BEGIN -----------------------

!     ZERO FORCE AND ENERGY

      F_CORD=0.0D0
      E(:,:)=0.0D0


C        FIND (X_I-X_J), (Y_I-Y_J), (Z_I-Z_J) FOR
C        EACH PAIR OF INTERACTING SITES I AND J

         DO 1001 TAB=1,MAXTAB
         DO 501 I_IXN=1,NUMLNG(NMRES,TAB)

            ISIT1=ILONG(I_IXN,1,TAB)
            ISIT2=ILONG(I_IXN,2,TAB)

            XDIFF(I_IXN,TAB)=PRO_CORD(ISIT1,1,CRDIXN(TAB,1)) -
     *                  PRO_CORD(ISIT2,1,CRDIXN(TAB,2))

            YDIFF(I_IXN,TAB)=PRO_CORD(ISIT1,2,CRDIXN(TAB,1)) -
     *                  PRO_CORD(ISIT2,2,CRDIXN(TAB,2))

            ZDIFF(I_IXN,TAB)=PRO_CORD(ISIT1,3,CRDIXN(TAB,1)) -
     *                  PRO_CORD(ISIT2,3,CRDIXN(TAB,2))

            DISTNE(I_IXN,TAB)=DSQRT(XDIFF(I_IXN,TAB)**2 +
     *                        YDIFF(I_IXN,TAB)**2 +
     *                        ZDIFF(I_IXN,TAB)**2)

C     FIND POTNTLIAL INDEX; DISTANCES SHOULD BE IN ARRAY DISTNE

         INDEX(I_IXN,TAB)=INT( DISTNE(I_IXN,TAB)*RINCINV(I_IXN,TAB) )
         ETA(I_IXN,TAB)=DISTNE(I_IXN,TAB)*RINCINV(I_IXN,TAB)
     *          -REAL(INDEX(I_IXN,TAB))
         TFORCE(I_IXN,TAB)=0.0D0

501    CONTINUE
1001   CONTINUE

!         WRITE(6,*)'I_QBIAS'
C        IF (I_QBIAS) THEN
C           CALL Q_BIAS(DISTNE,F_CORD_TEMP,NMRES,E_TEMP,
C    *                 NUMLNG,ILONG,
C    *                 XDIFF,YDIFF,ZDIFF)
C          F_CORD=F_CORD+F_CORD_TEMP
C          E=E+E_TEMP
C       ENDIF

        IF (I_QBIAS_A) THEN
           CALL Q_BIAS_SEG_A(DISTNE,F_CORD_TEMP,NMRES,E_TEMP,XDIFF,YDIFF,ZDIFF)
           F_CORD=F_CORD+F_CORD_TEMP
           E=E+E_TEMP
        ENDIF

        IF (I_QBIAS_B) THEN
           CALL Q_BIAS_SEG_B(DISTNE,F_CORD_TEMP,NMRES,E_TEMP,XDIFF,YDIFF,ZDIFF)
           F_CORD=F_CORD+F_CORD_TEMP
           E=E+E_TEMP
        ENDIF

        IF (I_RG_BIAS) THEN
           CALL RG_BIAS(PRO_CORD,F_CORD_TEMP,E_TEMP,TEMPAV)
           F_CORD=F_CORD+F_CORD_TEMP
           E=E+E_TEMP
        ENDIF

        IF (IEXCLD) THEN
            CALL ADDITIVE_EV(DISTNE,F_CORD_TEMP,NMRES,E_TEMP,
     *                 NUMLNG,ILONG,TEMPAV,CRDIXN,
     *                 XDIFF,YDIFF,ZDIFF,CCEV_DIST,PEXCLD)
           F_CORD=F_CORD+F_CORD_TEMP
           E=E+E_TEMP
        ENDIF

        IF (IEXCLD_GAMMA) THEN
           CALL EV_GAMMA(PRO_CORD,F_CORD_TEMP,E_TEMP,TEMPAV)
           F_CORD=F_CORD+F_CORD_TEMP
           E=E+E_TEMP
        ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     FIND POTNTLIAL FOR EACH OF THE INTERACTING SITES
C     NOTE THAT INTERPOLATION USED IS TO ENSURE THAT 
C     ENERGY = INTEGRATED FORCE (THAT'S WHY DON'T 
C     LINEARLY INTERPOLATE FOR ENERGY LIKE WE DO FOR
C     F(R)/R
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        IF( TEMPAV.AND.(.NOT.IGOMB) )THEN
             DO 606 TAB=1,MAXTAB

             TRGENG(TAB,1)=0.0D0
             TRGENG(TAB,2)=0.0D0
             TRGENG(TAB,3)=0.0D0

             DO 505 I_IXN=1,NUMLNG(NMRES,TAB)
               ISIT1=ILONG(I_IXN,1,TAB)
               ISIT2=ILONG(I_IXN,2,TAB)

               INDX=INDEX(I_IXN,TAB)
               IF (INDX.GT.MAXR) CYCLE !OUTSIDE RANGE OF FORCE TABLE
         
               M=(FORSE(INDX+1,I_IXN,TAB)-
     *                       FORSE(INDX,I_IXN,TAB))
C NOTE THAT M IS THEREFORE WHAT I HAD IN MY NOTES TIMES RINC
C `C', ON THE OTHER HAND IS THE SAME:  C=FORSE(INDX)-M*FLOAT(INDX)
C WHICH SIMPLIFIES TO ...

         C=FORSE(INDX,I_IXN,TAB)*FLOAT(INDX+1)
     *           -FORSE(INDX+1,I_IXN,TAB)*FLOAT(INDX)

           ETA_PRIME=1.0D0-ETA(I_IXN,TAB) 

C THE FOLLOWING FORMULA IS IN MY NOTES (REMEMBER M HERE
C NOT QUITE IDENTICAL TO THERE (SEE ABOVE)

               POTNTL(I_IXN)=VPOTNT(INDX+1,I_IXN,TAB)+
     *      RINCSQ(I_IXN,TAB)*
     *      ETA_PRIME* (M* 
     *      (FLOAT(INDX+1)*(FLOAT(INDX+1)-ETA_PRIME)+
     *       ETA_PRIME*ETA_PRIME/3.0D0)  +
     *      C* (FLOAT(INDX+1)-0.5D0*ETA_PRIME)  )
               

C    CALC CONTRIBUTION TO ENERGY DUE TO 1ST MEM
C    AND THAT DUE TO MEMS WITHOUT EXCLUDED VOL
C    THIS IS ROUGH IN THAT PROPER INTERPOLATION
C    AS ABOVE IS NOT USED. THUS WILL APPARENTLY  GET SMALL
C    RESIDUAL EXCLUDED VOLUME CONTRIBUTION.


C              IF (I_IXN.EQ.240.AND.TAB.EQ.1)  THEN
C                      V240=POTNTL(I_IXN)
C              ENDIF


               E(1,5) = E(1,5) + POTNTL(I_IXN)

C THESE LINES WERE USED TO CHECK OUT CONTRIBUTIONS FROM A
C PARTICULAR GAMMA VALUE (WE ZEROED OUT ALL OTHER GAMMA
C VALUES IN GAMMA.DAT
C              IF (ABS(POTNTL(I_IXN)).GT.0.001) THEN
C                 WRITE(SO,*) '****************************'
C                 WRITE(SO,*) 'LOOKUP REPORTS:'
C                 WRITE(SO,*) 'TAB=',TAB
C                 WRITE(SO,*) 'ISIT1,ISIT2,R,CONTRIB==',ISIT1,ISIT2,
C    *                DISTNE(I_IXN,TAB),POTNTL(I_IXN)
C                 WRITE(SO,*) 'R INCREMENT=',1.0/RINCINV(I_IXN,TAB)
C                 WRITE(SO,*) 'GRID POINTS =',
C    *                  REAL(INDX)*(1.0/RINCINV(I_IXN,TAB)),
C    *                  REAL(INDX+1)*(1.0/RINCINV(I_IXN,TAB))
C              ENDIF 

               IF ((ISIT2-ISIT1) .LT. MINMR) THEN
                    E(1,7) = E(1,7) + POTNTL(I_IXN)
                    TRGENG(TAB,1)=TRGENG(TAB,1)+POTNTL(I_IXN)
               ELSEIF ((ISIT2-ISIT1) .GT. MAXMR) THEN
                    E(1,8) = E(1,8) + POTNTL(I_IXN)
                    TRGENG(TAB,3)=TRGENG(TAB,3)+POTNTL(I_IXN)
               ELSE
                    E(1,13) = E(1,13) + POTNTL(I_IXN)
                    TRGENG(TAB,2)=TRGENG(TAB,2)+POTNTL(I_IXN)
               ENDIF
  505        CONTINUE
  606        CONTINUE
              
        ENDIF                        ! END OF     IF ( TEMPAV AND (NOT IGOMB)  )

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C     FIND FORCE FOR EACH OF THE INTERACTING SITES
          
         IF (.NOT.IGOMB) THEN
           DO 1595 TAB=1,4
           DO 595 I_IXN=1,NUMLNG(NMRES,TAB)
            ISIT1=ILONG(I_IXN,1,TAB)
            ISIT2=ILONG(I_IXN,2,TAB)
            INDX=INDEX(I_IXN,TAB)
            IF (INDX.GT.MAXR) CYCLE !OUTSIDE RANGE OF FORCE TABLE
            TFORCE(I_IXN,TAB)=
     *            (1.0D0-ETA(I_IXN,TAB))*FORSE(INDX,I_IXN,TAB)
     *             +ETA(I_IXN,TAB)*FORSE(INDX+1,I_IXN,TAB)

  595     CONTINUE
 1595     CONTINUE

         ELSE
           CALL GOMB(   ETA,INDEX,TEMPAV,NGOMB,A_TO_NMO,E_TEMP,IBIASGAUSS,BIAS_AV,
     *                  BIAS_VAR,BIAS_PREFACTOR,BIAS_F,IBIASPOLY,NBIASPOLY,BIASPOLY)
           E=E+E_TEMP

          DO 777 TAB=1,MAXTAB
          IF (TAB.EQ.1.OR.TAB.EQ.2) THEN
            IA=1
          ELSE
            IA=2
          ENDIF
          IF (TAB.EQ.1.OR.TAB.EQ.3) THEN
            IB=1
          ELSE
            IB=2
          ENDIF
          DO 506 I_IXN=1,NUMLNG(NMRES,TAB)
            ISIT1=ILONG(I_IXN,1,TAB)
            ISIT2=ILONG(I_IXN,2,TAB)
            INDX=INDEX(I_IXN,TAB)
            IF (INDX.GT.MAXR) CYCLE !OUTSIDE RANGE OF FORCE TABLE


            TFORCE(I_IXN,TAB)=
     *       ((1.0D0-ETA(I_IXN,TAB))*FORSE(INDX,I_IXN,TAB)
     *        +ETA(I_IXN,TAB)*FORSE(INDX+1,I_IXN,TAB)  )
     *         *0.5D0*NGOMB*(A_TO_NMO(ISIT1,IA)+A_TO_NMO(ISIT2,IB))
 
            TFORCE(I_IXN,TAB)=TFORCE(I_IXN,TAB)*(1.0D0+BIAS_F)

  506     CONTINUE
  777     CONTINUE

         ENDIF



CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C        THE BELOW LINES MAY BE (SELECTIVELY) UNCOMMENTED TO 
C        CHECK THAT ENERGY CORRESPONDS
C        TO THE INTEGRATED FORCE. ALSO UNCOMMENT THE
C        'V240' LINE IN E-CAL ABOVE IF REQUIRED.
C      
C        
C        OPEN(77,FILE='TEMP.DAT',STATUS='OLD')
C        READ(77,*) OLDAMHE
C        IF (OLDAMHE.EQ.99.0) GOTO 123
C        READ(77,*) OLDBIASE
C        READ(77,*) V240OLD
C        READ(77,*) OLDBIAS_F
C        DELTAV=E(1,5)-OLDAMHE
C        DELTAVBIAS=E(1,10)-OLDBIASE
C        DELTAV240=V240-V240OLD
C        ARSETOT=0D0
C        ARSETOT2=0D0
C        DO TAB=1,MAXTAB
C        DO  I_IXN=1,NUMLNG(NMRES,TAB)
C          READ(77,*) OLDDIST(I_IXN,TAB)
C          READ(77,*) OLDTFORCE(I_IXN,TAB)
C          DELTADIST(I_IXN,TAB)=DISTNE(I_IXN,TAB)-OLDDIST(I_IXN,TAB)
C          ARSETOT=ARSETOT+0.5*
C    +         (   TFORCE(I_IXN,TAB)*DISTNE(I_IXN,TAB)/(1.0+BIAS_F)
C    +      +OLDTFORCE(I_IXN,TAB)*OLDDIST(I_IXN,TAB)/(1.0+OLDBIAS_F) ) 
C    +                   *DELTADIST(I_IXN,TAB)
C          ARSETOT2=ARSETOT2+0.5*
C    +         (   TFORCE(I_IXN,TAB)*DISTNE(I_IXN,TAB)
C    +                                     *BIAS_F/(1.0+BIAS_F)
C    +      +OLDTFORCE(I_IXN,TAB)*OLDDIST(I_IXN,TAB)
C    +                             *OLDBIAS_F/(1.0+OLDBIAS_F)  )
C    +                   *DELTADIST(I_IXN,TAB)
C        ENDDO
C        ENDDO
C        WRITE(SO,*) 'AMHE (INC EXCLD V)',E(1,5)
C        WRITE(SO,*) 'SUM OF -FXDELTA_R,AND DELTA_V',-ARSETOT,DELTAV
C        WRITE(SO,*)  'RATIO',-ARSETOT/DELTAV
C        WRITE(SO,*) 'BIAS SUM OF -FXDELTA_R,AND DELTA_V',
C    +                                  -ARSETOT2,DELTAVBIAS
C        WRITE(SO,*) 'BIAS_F,OLDBIAS_F',BIAS_F,OLDBIAS_F
C123      CLOSE(77)

C        OPEN(77,FILE='TEMP.DAT',STATUS='UNKNOWN')
C        WRITE(77,*) E(1,5)
C        WRITE(77,*) E(1,10)
C        WRITE(77,*) V240
C        WRITE(77,*) BIAS_F
C        DO TAB=1,MAXTAB
C        DO  I_IXN=1,NUMLNG(NMRES,TAB)
C          WRITE(77,*) DISTNE(I_IXN,TAB)
C          WRITE(77,*) TFORCE(I_IXN,TAB)
C        ENDDO
C        ENDDO
C        CLOSE(77)

C         WRITE(SO,*) '240 F, FOLD, FAV',
C    +                TFORCE(240,1)*DISTNE(240,1)/(1.0+BIAS_F),
C    +             OLDTFORCE(240,1)*OLDDIST(240,1)/(1.0+OLDBIAS_F),
C    +             0.5*(TFORCE(240,1)*DISTNE(240,1)/(1.0+BIAS_F)+
C    +             OLDTFORCE(240,1)*OLDDIST(240,1)/(1.0+OLDBIAS_F))          
C         WRITE(SO,*) ' 240 R, ROLD, DELR',DISTNE(240,1),OLDDIST(240,1),
C    +                       DELTADIST(240,1)
C         WRITE(SO,*) '240 V, VOLD, DELV',V240,V240OLD,V240-V240OLD
C         WRITE(SO,*) '240  -F*DELTA_DIST ',-DELTADIST(240,1)*
C    +             0.5*(TFORCE(240,1)*DISTNE(240,1)/(1.0+BIAS_F)+
C    +             OLDTFORCE(240,1)*OLDDIST(240,1)/(1.0+OLDBIAS_F))
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


*         IF (TEMPAV) WRITE(SO,*) TAB,E(1,5)


C        FIND FORCE FOR EACH INTERACTION

         DO 616 TAB=1,MAXTAB
         DO 515 I515=1,NUMLNG(NMRES,TAB)
            XDIFF(I515,TAB)=TFORCE(I515,TAB)*XDIFF(I515,TAB)
            YDIFF(I515,TAB)=TFORCE(I515,TAB)*YDIFF(I515,TAB)
            ZDIFF(I515,TAB)=TFORCE(I515,TAB)*ZDIFF(I515,TAB)
  515    CONTINUE
  616    CONTINUE

         DO 613 TAB=1,MAXTAB

         DO I_IXN=1,NUMLNG(NMRES,TAB)
            ISIT1=ILONG(I_IXN,1,TAB)
            ISIT2=ILONG(I_IXN,2,TAB)
            
               F_CORD(ISIT1,1,CRDIXN(TAB,1))=
     *        F_CORD(ISIT1,1,CRDIXN(TAB,1)) + XDIFF(I_IXN,TAB)

               F_CORD(ISIT1,2,CRDIXN(TAB,1))=
     *        F_CORD(ISIT1,2,CRDIXN(TAB,1)) + YDIFF(I_IXN,TAB)

               F_CORD(ISIT1,3,CRDIXN(TAB,1))=
     *        F_CORD(ISIT1,3,CRDIXN(TAB,1)) + ZDIFF(I_IXN,TAB)

               F_CORD(ISIT2,1,CRDIXN(TAB,2))=
     *        F_CORD(ISIT2,1,CRDIXN(TAB,2)) - XDIFF(I_IXN,TAB)

               F_CORD(ISIT2,2,CRDIXN(TAB,2))=
     *        F_CORD(ISIT2,2,CRDIXN(TAB,2)) - YDIFF(I_IXN,TAB)


               F_CORD(ISIT2,3,CRDIXN(TAB,2))=
     *        F_CORD(ISIT2,3,CRDIXN(TAB,2)) - ZDIFF(I_IXN,TAB)

           ENDDO

  613      CONTINUE 

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     ---------------------- DONE -----------------------

      RETURN
      END
