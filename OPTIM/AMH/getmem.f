
C     --------------------- GETMEM ----------------------

      SUBROUTINE GETMEM(PROTNM,NMRSS,MAXRES,IRES,IMEMRI,
     *                  NUMCRD,YWORK,SECSEQ,
     *                  OARCHV,SA,
     *                  IWORK,PASSI, 
     *                  I_MEM)

C     ---------------------------------------------------

C     GETMEM GETS THE COORDINATES FOR THE NEXT MEMORY
C            PROTEIN AND SETS THE HYDROPHOBICITY FILE

C     ARGUMENTS:

C 	 PROTNM - NAME OF PROTEIN IN PDB CODE (I)
C        NMRSS - LENGTH OF INPUT PROTEIN (O)
C        MAXRES- MAXIMUM DATABASE PROTEIN LENGTH (I)
C        IRES  - CODED AMINO ACID SEQUENCE (O)
C        IMEMRI- TAPE NUMBER FOR COORDINATE FILE (I)
C        NUMCRD- NUMBER OF COORDINATE TYPES (I)
C        YWORK - COORDINATES (O)
C        SECSEQ - SECONDARY STRUCTURE FROM PROTEIN FILE (O)
C        OARCHV- OUTPUT/DIAGNOSTIC FILE NUMBER (I)

C     ---------------------------------------------------
CERROR 355 : IN PROGRAM UNIT GETMEM VARIABLE TARFL HAS NOT BEEN GIVEN A TYPE

      USE AMHGLOBALS,  ONLY: KNOWN,IMEM_CONS,MEM_CONS

      IMPLICIT NONE


C     SET REQUIRED PARAMETERS

C     IF ECHO, THEN ECHO INPUT

      LOGICAL ECHO
      PARAMETER(ECHO=.FALSE.)

C     REWRITE DATABASE EXCLUDING 'BAD' PROTEINS

      LOGICAL SORTPB
      PARAMETER(SORTPB=.FALSE.)

C     ARGUMENT DECLARATIONS:
C1234567890123456789012345678901234567890123456789012345678901234567890
      CHARACTER PROTNM*5,CONFILE*41

         LOGICAL PASSI

         INTEGER NMRSS,MAXRES, IRES(MAXRES), IMEMRI,
     *           OARCHV,NUMCRD, SECSEQ(MAXRES), SA(MAXRES),
     *           IWORK(MAXRES), I_MEM, NMRSSTEMP,
     *           IRESTEMP(MAXRES)

         INTEGER NUM_COORD_TO_READ,OPEN_STATUS

         DOUBLE PRECISION YWORK(MAXRES,3,NUMCRD)

C     INTERNAL VARIABLES:


         INTEGER ITRACK

C        --- DO LOOP INDICES ---

         INTEGER I_COORD,I_RES,I_AXIS

C        --- IMPLIED DO LOOP INDICES ---

         INTEGER I1,I517

C------------------- BEGIN -----------------------
C      WRITE(6,*)'MEM_CONS IMEM_CONS',MEM_CONS, IMEM_CONS 

      IF(( .NOT. MEM_CONS) .OR. ( I_MEM.EQ.0 ))THEN
C      WRITE(6,*)'MEM_CONS FALSE READ NATIVE SEQ '
      READ(IMEMRI,*)
      READ(IMEMRI,101)NMRSS
  101 FORMAT(I5)

      IF( ECHO )WRITE(OARCHV,101)NMRSS

C     CHECK ENOUGH STORAGE HAS BEEN RESERVED
      IF( NMRSS.GT.MAXRES )THEN
         WRITE(OARCHV,110)PROTNM,NMRSS,MAXRES
  110    FORMAT('GETMEM: PROTEIN ',A5,' TOO LARGE ',I4,
     *          ' RESERVED SPACE ',I4)
         PRINT '(A,2I8)',' AMH/GETMEM> ERROR *** NMRSS > MAXRES, VALUES ',NMRSS,MAXRES
         STOP
      ENDIF

      READ(IMEMRI,103)(IRES(I1),I1=1,NMRSS)
  103 FORMAT(25(I2,1X))
C     WRITE(6,103)(IRES(I1),I1=1,NMRSS)
      IF( ECHO )WRITE(OARCHV,103)(IRES(I1),I1=1,NMRSS)

      ENDIF
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C  READ IN CONSENSUS SEQUENCES
      IF((MEM_CONS) .AND.  (I_MEM.NE.0))THEN

        CONFILE ='/HOME/MPRENTIS/AMH/MD_INPUT/MEMCONS/'//PROTNM

C         WRITE(6,*)'MEM_CONS DIRECTORY = ' , CONFILE
         OPEN(IMEM_CONS,FILE=CONFILE,STATUS='OLD',IOSTAT=OPEN_STATUS)
               IF (OPEN_STATUS.NE.0) THEN
                 WRITE(6,*) 'FAILURE TO OPEN FILE ',CONFILE
                 WRITE(6,*) 'ERROR NUMBER ',OPEN_STATUS
                 STOP
               ENDIF

        READ(IMEM_CONS,*)
        READ(IMEM_CONS,101)NMRSS
      
       IF( ECHO )WRITE(OARCHV,101)NMRSS
C     CHECK ENOUGH STORAGE HAS BEEN RESERVED
                                                                                
      IF( NMRSS.GT.MAXRES )THEN
         WRITE(OARCHV,110)PROTNM,NMRSS,MAXRES
         PRINT '(A,2I8)',' AMH/GETMEM> ERROR *** NMRSS > MAXRES, VALUES ',NMRSS,MAXRES
         STOP
      ENDIF
                                                                                
      READ(IMEM_CONS,103)(IRES(I1),I1=1,NMRSS)
      IF( ECHO )WRITE(OARCHV,103)(IRES(I1),I1=1,NMRSS)
      CLOSE(IMEM_CONS)

      ENDIF 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     CHECK THAT RESIDUES FALL WITHIN CORRECT RANGE

      IF( PASSI )THEN
         ITRACK=0
C        DO 517 I517=1,NMRSS
C            IF( (IRES(I517).LT.1).OR.(IRES(I517).GT.20) )THEN
C               ITRACK=ITRACK + 1
C               IWORK(ITRACK)=I517
C            ENDIF
C  517    CONTINUE
 
C        PRINT MESSAGE IF THERE IS 'BAD' RESIDUE

         IF( ITRACK.GT.0  )THEN
            WRITE(OARCHV,322)PROTNM
  322       FORMAT(/'GETMEM: WARNING ',A5,' HAS INVALID',
     *             ' RESIDUE TYPE')
            WRITE(OARCHV,355)(IWORK(I1),I1=1,ITRACK)
  355       FORMAT(20(I3,1X))
         ELSEIF( SORTPB )THEN

            WRITE(42,150)PROTNM
  150       FORMAT(A5,' ZZZ')
            WRITE(42,151)NMRSS
  151       FORMAT(I5,' XXX')
            WRITE(42,103)(IRES(I1),I1=1,NMRSS)
         ENDIF
      ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     READ IN PROTEIN COORDINATES 

        IF (I_MEM .NE. 0 .OR.  KNOWN ) THEN
              NUM_COORD_TO_READ = 3

C  READ BUT IGNORE

      IF((MEM_CONS) .AND. (I_MEM .NE. 0))THEN

      READ(IMEMRI,*)
      READ(IMEMRI,901)NMRSSTEMP
901     FORMAT(I5)
      READ(IMEMRI,903)(IRESTEMP(I1),I1=1,NMRSS)
903     FORMAT(25(I2,1X))

      ENDIF

      DO 500 I_COORD=1, NUM_COORD_TO_READ 
        DO 501 I_AXIS=1,3

          READ(IMEMRI,104)(YWORK(I_RES,I_AXIS,I_COORD),I_RES=1,NMRSS)

               IF( SORTPB.AND.(ITRACK.EQ.0) )
     *    WRITE(42,104)(YWORK(I_RES,I_AXIS,I_COORD),I_RES=1,NMRSS)
  104          FORMAT(8(F8.3,1X))

  501    CONTINUE
  500  CONTINUE

       READ(IMEMRI,103)(SA(I1),I1=1,NMRSS)
       DO 600 I1=1,NMRSS
          SA(I1)=2-SA(I1)
600    CONTINUE
       READ(IMEMRI,103)(SECSEQ(I1),I1=1,NMRSS)

        ENDIF

C     ---------------------- DONE -----------------------

      RETURN
      END
