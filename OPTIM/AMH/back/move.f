
C     --------------------- MOVE  ----------------------

      SUBROUTINE MOVE(JSTRT,JFINS,
     *                ISHKIT,NMDIFV,I_QUENCH)
 
C     --------------------------------------------------

C     MOVE   IS THE DRIVING SUBROUTINE FOR CARRYING OUT
C            THE MOLECULAR DYNAMICS: ANNEALING SCHEDULE,
C            VERLET ALGORITHM, AND OBSERVABLE STATISTICS

C     ARGUMENTS:

C        JSTRT - FIRST MODIFIED SITE
C        JFINS - LAST MODIFIES SITE
C        ISHKIT- USED TO TRACK NUMBER OF SHAKE 
C                ITERATIONS
C        NMDIFV- NUMBER OF INTERMEDIATE STRUCTURES SAVED
C                ON MOVIE TAPE
C     ---------------------------------------------------

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                               FILTRATION
C        I_PRO                        INDEX OVER PROTEINS
C        I_STEP                        INDEX OVER TIME STEPS PER TEMPERATURE
C        I_TEMP                        INDEX OVER TEMPERATURES
C        ITCNT                        INCREMENT T (TEMPERATURE) COUNTER

C     NMSTEP IS THE NUMBER OF TIME STEPS PER TEMPERATURE

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      USE GLOBALS, ONLY:SO, I513,NUMPRO,I1,AVEP,NMRES,PRCORD,QRCORD,
     *  SRCORD,TRCORD,ZRCORD,VELOCP,BONDLN,TEMTUR,TOLSHK,MAXSHK,
     *  TIMSTP,NUMCRD,OARCHV,WORK1,WORK3,WORK4,ISEED_AMH,IRES,NMTEMP,
     *  MOVANAL,INCMOV,OMOVI,OMOVISEG,NMSTEP,OPE_NO_BIAS,OKE,
     *  OHDRGN,ORAMA,OOXY,OCHIRAL,OAMH,OAMHSR,OREP,OPE_WITH_BIAS,
     *  OCCEV,OOEV,I526,I525,I527,I528,I514,NMDIF,OAMHLR,
     *  OAMHMR,OBIAS_RG,OHDRGN_S,OHDRGN_M,OHDRGN_L,OHDRGN_SEQ,
     *  ONONADD,OCON_P_AP,I_ETIM_STEP,OPE_PLUS_KE,
     *  I_ETIM,QUENCH,NQUENCH,N_Q_ANNEAL_A,N_Q_ANNEAL_B,
     *  Q0_A,Q0_B,Q0_INC_A,Q0_INC_B,QVALUE_A,QVALUE_B,
     *  MAXPRO,OOBIASSEGA,OOBIASSEGB,Q0_SAFE_A, Q0_SAFE_B,
     *  ITGRD,TEMTUR_QUENCH

      USE AMH_INTERFACES, ONLY:E_WRITE
      USE GLOBALS_ALT, ONLY:DO_SEND_OUTPUT,COUNT_ALT,T_ALT

      IMPLICIT NONE


C     PASSED ARGUMENT DECLARATIONS:

         INTEGER JSTRT,JFINS,ISHKIT,I_QUENCH,I504,I501


C     INTERNAL VARIABLES:

         LOGICAL TEMPAV,BDSHAK

         INTEGER ITCNT,
     *           NMDIFV,IBEGN,IDUMMY,
     *           NMOVIES,I
         REAL TEMPH,TOTKE(MAXPRO)

        INTEGER I_PRO, I_STEP, I_TEMP, I_GRID_NUM

C     REQUIRED SUBROUTINES

         EXTERNAL MDCTRL,YNORM,OBINITV

        NMDIFV = 0
        TEMPH = 0.0

C     --------------------- BEGIN -----------------------


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     INITIALIZE ARCHIVE ARRAYS

         DO 516 I_PRO=1,NUMPRO
            DO 100 I1=1,50
              AVEP(I_PRO,1,I1)=0.0
              AVEP(I_PRO,2,I1)=0.0
100            CONTINUE
  516    CONTINUE

C     ISHKIT TRACKS THE NUMBER OF SHAKE ITERATIONS

      ISHKIT=0

C     IF BDSHAK IS TRUE, THEN SHAKE FAILED

      BDSHAK=.FALSE.

C    NEW ANNEALLING SCHEDULE FOR QUENCHING   
C    MOVE TEMTUR_QUENCH INTO TEMTUR FROM RESTRT.F
     
         IF (QUENCH) THEN
          DO 504 I504=1, NQUENCH
C           DO 540 I_GRID_NUM=1,4
            IF( ITGRD(1).GT.0 )THEN
             DO 501 I501=1,ITGRD(1)
              TEMTUR(I501)=TEMTUR_QUENCH(I501,I_QUENCH)
C          WRITE(6,*)'IN MOVE TEMTUR_QUENCH STEPS STRUCTURE',
C     * TEMTUR(I501),TEMTUR_QUENCH(I501,I504),I_GRID_NUM,I501,I_QUENCH

501          CONTINUE
            ENDIF  !  ITGRD(GRID_NUM)
C540        CONTINUE
504       CONTINUE
         ENDIF

C     IF NO HEATBATH, THEN SET INITIAL VELOCITIES

C################# START OF NORMAL RUN #################

         CALL INITV(PRCORD,QRCORD,SRCORD,
     *              TRCORD,ZRCORD,VELOCP,BONDLN,TEMTUR(1),
     *              JSTRT,JFINS,TOLSHK,MAXSHK,BDSHAK,
     *              TIMSTP,NUMPRO,ISHKIT,
     *              NUMCRD,OARCHV,WORK1,
     *              WORK3,WORK4,ISEED_AMH,IRES)
         IBEGN=1


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


C     SET COUNTER FOR T AVERAGES
      ITCNT=1


C     WRITE HEADER FOR MOVIE FILE
      IF( .NOT.MOVANAL )THEN
         NMDIFV=INT( FLOAT(NMTEMP)/FLOAT(INCMOV) )

         IF ( .NOT.QUENCH ) THEN
         WRITE(OMOVI,334)NMRES,NUMCRD,NUMPRO,NMDIFV
         WRITE(OMOVISEG,334)NMRES,NUMCRD,NUMPRO,NMDIFV
         ELSEIF (I_QUENCH.EQ.1) THEN
         WRITE(OMOVI,334)NMRES,NUMCRD,NUMPRO,NQUENCH
         ENDIF
  334    FORMAT(4(I8,1X),' NMRES NMCRD NUMPRO NMSNAP')
      ENDIF


C     SET COUNTER FOR NUMBER OF SAVED STRUCTURES FOR
C     EVALUATING |R|

      NMDIFV=0

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC



C!!!!!!!!!!!!!!!  START OF LOOP OVER TEMPERATURES  !!!!!!!!!!!!!!!!!!!!!!
C     PERFORM NMTEMP TIMESTEPS FOR EACH PROTEIN


      IF (MOVANAL) THEN
        WRITE(SO,*) 'OPENING MOVIE FILE'
        OPEN(11,FILE='MOVIE_IN',STATUS='OLD')

          READ(11,1040) NMOVIES
          NMTEMP=NMOVIES
          INCMOV=1
1040        FORMAT(31X,I4)
      ENDIF





      DO 509 I_TEMP=IBEGN,NMTEMP
        IF (I_TEMP.LT.N_Q_ANNEAL_A) THEN
C  TEMP FIX DIVIDING BY 0 !!!!!
         Q0_A = Q0_SAFE_A + 
     *           Q0_INC_A*REAL(N_Q_ANNEAL_A-I_TEMP)/REAL(N_Q_ANNEAL_A)
         Q0_B = Q0_SAFE_B + 
     *           Q0_INC_B*REAL(N_Q_ANNEAL_B-I_TEMP)/REAL(N_Q_ANNEAL_B)
        ELSE
          Q0_A=Q0_SAFE_A
          Q0_B=Q0_SAFE_B
        ENDIF

C      WRITE(SO,474)I_QUENCH,I_TEMP,TEMTUR(I_TEMP),QVALUE_A,QVALUE_B
C474    FORMAT('I_QUENCH,ITEMP,TEMP,QA,QB',
C     *                              I1,1X,I5,1X,F4.2,1X,F6.4,1X,F6.4)

      WRITE(SO,474)I_TEMP,TEMTUR(I_TEMP),QVALUE_A,QVALUE_B
474    FORMAT('ITEMP,TEMP,QA,QB',
     *                              1X,I5,1X,F4.2,1X,F6.4,1X,F6.4)




        IF (I_TEMP.EQ.NMTEMP) THEN
            WRITE(SO,*) 'SIMULATION COMPLETED'
        ENDIF

        IF (MOVANAL) THEN
          READ(11,1041) IDUMMY,IDUMMY,IDUMMY,TEMTUR(I_TEMP),IDUMMY
          WRITE(SO,*) 'TEMPERATURE IS',TEMTUR(I_TEMP)
1041      FORMAT(3(I6,1X),F8.4,1X,I5)
          DO 10175 I=1,NMRES
               READ(11,1020) PRCORD(I,1,1,1),
     *          PRCORD(I,2,1,1),PRCORD(I,3,1,1),
     *          PRCORD(I,1,1,2),
     *          PRCORD(I,2,1,2),PRCORD(I,3,1,2),
     *          PRCORD(I,1,1,3),
     *          PRCORD(I,2,1,3),PRCORD(I,3,1,3)
1020            FORMAT(4X,3(F8.3,1X),4X,
     *           3(F8.3,1X),4X,3(F8.3,1X))

10175     CONTINUE
        ENDIF

C        SET RMS VELOCITY FOR CURRENT T

         TEMPH=SQRT(TEMTUR(I_TEMP))

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

C        DETERMINE WHETHER AVERAGES SHOULD BE CARRIED
C        AT THIS T

         IF (QUENCH) THEN
           IF (I_TEMP.EQ.NMTEMP) THEN !IF QUENCH ONLY PRINT INFO AT END
              TEMPAV=.TRUE.
           ELSE
             TEMPAV=.FALSE.
           ENDIF
         ELSE
           IF( MOD(I_TEMP,INCMOV).EQ.0 )THEN !IN NORMAL CASE PRINT INFO EVERY INCMOV STEPS
              TEMPAV=.TRUE.
           ELSE
              TEMPAV=.FALSE.
           ENDIF
         ENDIF


C%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C        PERFORM NMSTEP TIMESTEPS FOR THE CURRENT TEMPERATURE

         IF (MOVANAL) NMSTEP=1
 
         DO 510 I_STEP=1,NMSTEP
            COUNT_ALT=I_TEMP/INCMOV                                   ! START FOR ALTPOT
            T_ALT=TEMTUR(I_TEMP)                                      !
            DO_SEND_OUTPUT=.FALSE.                                    !
            IF( (TEMPAV .AND. I_STEP.EQ.NMSTEP)                       !
     *        .OR. (I_ETIM .AND. MOD(I_STEP,I_ETIM_STEP).EQ.0) )THEN  ! 
              DO_SEND_OUTPUT=.TRUE.                                   !
            ENDIF                                                     ! END FOR ALTPOT



CCCCCCCCCCCCCCCCCCCCCCC
C           WRITE(6,*) 'CALLING MDCTRL'
C  (OHDRGN)  =  HBOND POTENTIAL
C  (OHDRGN_S) = HBOND SHORT RANGE
C  (OHDRGN_M) = HBOND MEDIUM RANGE
C  (OHDRGN_L) = HBOND LONG RANGE
C  (ORAMA) = RAMA POTENTIAL
C  (OOXY) =  OXYGEN POTENTIAL
C  (OCHIRAL) CHIRALITY POTENTIAL
C  (OPE) TOTALP.PLOT = (TEMP, TOTAL POTENTIAL + KE,NUMBER)
C  (OKE) KE.PLOT  =  TEMP, TOTAL KINETIC , NUMBER
C  (OAMH) = AMH.PLOT = AMH TOTAL POTENTIAL ENERGY
C  (OAMHSR) AMHSR.PLOT= TEMP, AMH SHORT RANGE POTENTIAL ENERGY, NUMBER
C  (OAMHLR) AMHLR.PLOT= TEMP,AMH LONG RANGE POTENTIAL ENERGY , NUMBER
C  (OAMHMR) AMHMR.PLOT= TEMP,AMH MEDIUM  RANGE POTENTIAL ENERGY, NUMBER
C  (OCCEV) CCEV.PLOT =  POTENTIAL DUE TO CARBON (A/B) EXCLUDED VOLUME
C  (OOEV) OOEV.PLOT  =  OXYGEN EXCULDED
C  (OBIAS) BIAS.PLOT  =  Q BIASING POTENTIAL
C  (OBIAS_RG) = RADIUS OF GYRATION BIAS
C  (OTOTAL) TOTAL.PLOT = (TEMP,TOTAL POTENTIAL,NUMBER,WITHOUT BIASING)

C  AVEP(1,1,1,ITCNT)  = HYDROGEN BOND POTENTIAL
C  AVEP(1,1,2,ITCNT)  = RAMA POTENTIAL
C  AVEP(1,1,3,ITCNT)  = OXYGEN EXCULDED
C  AVEP(1,1,4,ITCNT)  = CHIRALITY POTENTIAL
C  AVEP(1,1,5,ITCNT)  = TOTAL AMH SHORT + MEDIUM + LONG
C  AVEP(1,1,6,ITCNT)  = ------
C  AVEP(1,1,7,ITCNT)  = AMH SHORT RANGE
C  AVEP(1,1,8,ITCNT)  = AMH LONG RANGE
C  AVEP(1,1,9,ITCNT)  = POTENTIAL DUE TO CARBON (A/B) EXCLUDED VOLUME
C  AVEP(1,1,10,ITCNT) =  Q BIASING POTENTAL
C  AVEP(1,1,11,ITCNT) = OXY POTENTIAL
C  AVEP(1,1,12,ITCNT) =  RADIUS OF GYRATION BIAS
C  AVEP(1,1,13,ITCNT) = AMH MEDIUM RANGE
C  AVEP(1,1,14,ITCNT) = HYDROGEN BONDS SHORT RANGE
C  AVEP(1,1,15,ITCNT) = HYDROGEN BONDS MEDIUM RANGE
C  AVEP(1,1,16,ITCNT) = HYDROGEN BONDS LONG RANGE
C  AVEP(1,1,17,ITCNT) = NONADDATIVE
C  AVEP(1,1,18,ITCNT) = Q BIASING POTENTAL SEG




            CALL MDCTRL(JSTRT,JFINS,TEMPAV,ISHKIT,BDSHAK,ITCNT,TOTKE)
            IF( (TEMPAV .AND. I_STEP.EQ.NMSTEP)
     *        .OR. (I_ETIM .AND. MOD(I_STEP,I_ETIM_STEP).EQ.0) )THEN
              CALL E_WRITE(AVEP(:,:,:),TOTKE,TEMTUR(I_TEMP),
     *                                  NUMPRO,I_TEMP,INCMOV)
            ENDIF

CCCCCCCCCCCCCCCCCCCCCCC
C           SHAKE WAS UNSUCCESSFUL, RETURN AND PERFORM FINAL
C           ANALYSIS

            IF( BDSHAK )THEN
               WRITE(OARCHV,144)I_TEMP,TEMTUR(I_TEMP),I_STEP
  144          FORMAT(/'SORRY BUCKY -- SHAKE MISFIRE ',
     *                I6,' T ',1PE10.3,' T ',I5)

               GO TO 300

            ENDIF


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C        SAVE STRUCTURE FOR LATER MOVIE ANALYSIS, IF THE TIME IS RIGHT
         IF( MOD(I_TEMP,INCMOV).EQ.0 .AND. (.NOT.MOVANAL) 
     *        .AND. (I_STEP.EQ.NMSTEP-1.OR.NMSTEP.EQ.1)) THEN
C        IF( 
C    *        MOD(I_STEP,20).EQ.0) THEN

C           SAVE THE CURENT STRUCTURE

            NMDIFV=NMDIFV + 1

            DO 526 I526=1,NUMPRO
                IF (.NOT. QUENCH) THEN
              WRITE(OMOVI,683)I526,NMDIFV,I_STEP-1,TEMTUR(I_TEMP),I_TEMP
 683          FORMAT(3(I6,1X),F8.4,1X,I5,' STUCT SNAP T T TID')
              DO 525 I525=1,NMRES
                  WRITE(OMOVI,332)
     *            (PRCORD(I525,I1,I526,1),I1=1,3),
     *            (PRCORD(I525,I1,I526,2),I1=1,3),
     *            (PRCORD(I525,I1,I526,3),I1=1,3)

332     FORMAT('CA: ',3(F8.3,1X),'CB: ',3(F8.3,1X),'OX: ', 3(F8.3,1X))
  525         CONTINUE
                ENDIF   ! QUENCH

  526       CONTINUE


            IF (I_TEMP.EQ.NMTEMP) THEN
            DO 527 I527=1,NUMPRO
                IF (QUENCH) THEN
                WRITE(OMOVI,683)I527,NQUENCH,I_QUENCH,
     *                                   TEMTUR(I_TEMP),I_TEMP
                ELSE
                WRITE(OMOVISEG,683)I527,NMDIFV,I_STEP-1,
     *                                   TEMTUR(I_TEMP),I_TEMP
                ENDIF
                DO 528 I528=1,NMRES
                    IF (QUENCH) THEN
                     WRITE(OMOVI,332)
     *              (PRCORD(I528,I1,I527,1),I1=1,3),
     *              (PRCORD(I528,I1,I527,2),I1=1,3),
     *              (PRCORD(I528,I1,I527,3),I1=1,3)
                    ELSE
                    WRITE(OMOVISEG,332)
     *              (PRCORD(I528,I1,I527,1),I1=1,3),
     *              (PRCORD(I528,I1,I527,2),I1=1,3),
     *              (PRCORD(I528,I1,I527,3),I1=1,3)
                    ENDIF
  528           CONTINUE
  527         CONTINUE
            ENDIF

         ENDIF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC




  510    CONTINUE
C%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

C        INCREMENT COUNTER FOR OBSERVABLES AS 
C        FUNCTION OF T

         IF( TEMPAV )ITCNT=ITCNT + 1

C        PERFORM COLLISIONS FOR NEXT T

         CALL INITV(PRCORD,QRCORD,SRCORD,
     *              TRCORD,ZRCORD,VELOCP,BONDLN,
     *              TEMTUR(I_TEMP),JSTRT,JFINS,TOLSHK,
     *              MAXSHK,BDSHAK,TIMSTP,NUMPRO,
     *              ISHKIT,NUMCRD,
     *              OARCHV,WORK1,WORK3,
     *              WORK4,ISEED_AMH,IRES)

  509 CONTINUE

        IF (I_QUENCH.EQ.NQUENCH) THEN
        CLOSE(OHDRGN)
        CLOSE(OHDRGN_S)
        CLOSE(OHDRGN_M)
        CLOSE(OHDRGN_L)
        CLOSE(OHDRGN_SEQ)
        CLOSE(ORAMA)
        CLOSE(OOXY)
        CLOSE(OCHIRAL)
        CLOSE(OPE_NO_BIAS)
        CLOSE(OPE_WITH_BIAS)
        CLOSE(OPE_PLUS_KE)
        CLOSE(OKE)
        CLOSE(OAMH)
        CLOSE(OAMHSR)
        CLOSE(OAMHLR)
        CLOSE(OAMHMR)
        CLOSE(OREP)
        CLOSE(OCON_P_AP)
        CLOSE(ONONADD)
        CLOSE(OCCEV)
        CLOSE(OOEV)
C        CLOSE(OBIAS)
        CLOSE(OBIAS_RG)
        CLOSE(OOBIASSEGA)
        CLOSE(OOBIASSEGB)

        ENDIF

C       WRITE(6,*)' MOVE '
C       WRITE(6,*)'OARCHV 30 ',OARCHV
C       WRITE(6,*)'OMOVI 55 ',OMOVI
C       WRITE(6,*)'OHDRGN  ',OHDRGN
C       WRITE(6,*)'OHDRGN_S 81 ',OHDRGN_S
C       WRITE(6,*)'OHDRGN_M 82',OHDRGN_M
C       WRITE(6,*)'OHDRGN_L 83',OHDRGN_L
C       WRITE(6,*)'OHDRGN_SEQ 85',OHDRGN_SEQ
C       WRITE(6,*)'ORAMA 61 ',ORAMA
C       WRITE(6,*)'OOXY 62',OOXY
C       WRITE(6,*)'OCHIRAL 63 ',OCHIRAL
C       WRITE(6,*)'OAMH  64',OAMH
C       WRITE(6,*)'OTOTAL 65 ',OTOTAL
C       WRITE(6,*)'OAMHSR 66 ',OAMHSR
C       WRITE(6,*)'OPE 67 ',OPE
C       WRITE(6,*)'OKE  73',OKE
C       WRITE(6,*)'OAMHLR 68 ',OAMHLR
C       WRITE(6,*)'OAMHMR 78 ',OAMHMR
C       WRITE(6,*)'ONONADD 84 ',ONONADD
C       WRITE(6,*)'OAMHLR 68 ',OAMHLR
C       WRITE(6,*)'OAMHMR 78 ',OAMHMR
C       WRITE(6,*)'ONONADD  84',ONONADD
C       WRITE(6,*)'OCON_P_AP 86',OCON_P_AP
C       WRITE(6,*)'OBIAS_RG 77',OBIAS_RG
C       WRITE(6,*)'OMOVISEG 75',OMOVISEG
C       WRITE(6,*)'OOBIASSEGA 87 ',OOBIASSEGA
C       WRITE(6,*)'OOBIASSEGB 88',OOBIASSEGB


C!!!!!!!!!!!!!!!!!!!   END OF LOOP OVER TEMPERATURES !!!!!!!!!!!!!!!!!!!!!!!!

  300 CONTINUE

C     PREPARE 'OBSERVABLES' FOR PRINTING AS A 
C     FUNCTION OF T

C     SET NORMALIZATION FACTORS

      ITCNT=ITCNT - 1

      TEMPH=1.0/FLOAT(NMSTEP)



C        NORMALIZE 1ST MOMENTS

      DO 514 I514=1,ITCNT
         CALL YNORM(NUMPRO,1,NUMPRO,AVEP(1,1,5),
     *              TEMPH)
  514 CONTINUE


C     ---------------------- DONE -----------------------

      RETURN
      END
