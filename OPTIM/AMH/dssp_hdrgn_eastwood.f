
C     --------------------- DSSP_HDRGN.F ----------------------
       SUBROUTINE DSSP_HDRGN_EASTWOOD(PRO_CORD,F_CORD,TEMPAV,E)
C     --------------------------------------------------

C     HDRGN FINDS THE  POTENTIAL DUE TO HYDROGEN BONDS 
C     BETWEEN N AND O     

C     ---------------------------------------------------

      USE AMHGLOBALS,  ONLY: AMHMAXSIZ,HBSCL,NMRES,PRCORD,HO_ZERO,NO_ZERO,
     *                  SIGMA_NO,SIGMA_H,PARA_HB,ANTI_HB,
     *                  ANTI_NHB,PARA_ONE,ANTI_ONE,MAXCRD,
     *                  NUMSEQ_HB,TGSEQUENCES_HB,AVE_SEQ_HB,IRES
      IMPLICIT NONE

      DOUBLE PRECISION, INTENT(IN):: PRO_CORD(AMHMAXSIZ,3,MAXCRD)
      DOUBLE PRECISION, INTENT(OUT):: F_CORD(AMHMAXSIZ,3,MAXCRD),E(:,:)
      LOGICAL, INTENT(IN)::  TEMPAV
                                                 
C     ARGUMENT DECLARATIONS:

      DOUBLE PRECISION THETA(5), H_CORD(AMHMAXSIZ,3)

C     INTERNAL VARIABLES:

      INTEGER ISIT1,ISIT2,I,HB_CLASS,ISEQ,I_RES,ITER_TGSEQ
      LOGICAL I_REPULSIVE,I_P,I_AP

C        --- DO LOOP INDICES ---

      DOUBLE PRECISION  RNO(5), DISTANCES(AMHMAXSIZ,AMHMAXSIZ,2),
     *         HPOT_TOT,BETA_SCALING,NITCORD(AMHMAXSIZ,3),
     *         RHO(5),LAMBDA(4),SIGMA(3,2),THETA_SEQ_ANTI_HB(2),
     *         THETA_SEQ_ANTI_NHB(2),THETA_SEQ_PARA_HB(2),
     *         HVAL1,HVAL2,HVAL3,NVAL1,NVAL2,NVAL3

       EXTERNAL DSSP_HFORCE

C     --------------------- BEGIN -----------------------

C     ZERO FORCE AND ENERGY
                                                                  
      F_CORD=0.0D0
      E=0.0D0
      THETA_SEQ_ANTI_NHB=0.0D0 
      THETA_SEQ_PARA_HB=0.0D0
      THETA_SEQ_ANTI_HB=0.0D0

      BETA_SCALING=1.0D0

      NVAL1=0.483D0
      NVAL2=0.703D0
      NVAL3=0.186D0

      HVAL1=0.8409657D0 
      HVAL2=0.8929599D0 
      HVAL3=0.7339256D0

C      WRITE(6,*)'BETA_SCALING FOR HBONDS =  ',BETA_SCALING 

C      DO ISEQ = 1,NUMSEQ_HB
C         WRITE(6,*)'SEQ IN HBONDS'
C         WRITE(6,999)(TGSEQUENCES_HB(ID3,ISEQ),ID3=1,NMRES)
C999      FORMAT(25(I2,1X))
C      ENDDO

C     CALCULATE NITROGEN AND HYDROGEN COORDINATES
C     FOR RESIDUES 2 TO N (WE IGNORE TERMINAL N)

        IF (AVE_SEQ_HB)THEN
             ITER_TGSEQ = NUMSEQ_HB
        ELSE
             ITER_TGSEQ = 1
        ENDIF

C          WRITE(6,*)'DSSP NUMSEQ_HB ', NUMSEQ_HB
C          WRITE(6,*)'DSSP AVE_SEQ_HB ',AVE_SEQ_HB
C          WRITE(6,*)'ITER_TGSEQ ', ITER_TGSEQ

	  DO  I_RES=2,NMRES

        NITCORD(I_RES,1)=NVAL1*PRCORD(I_RES-1,1,1,1)
     *                   +NVAL2*PRCORD(I_RES,1,1,1)
     *                   -NVAL3*PRCORD(I_RES-1,1,1,3)

        NITCORD(I_RES,2)=NVAL1*PRCORD(I_RES-1,2,1,1)
     *                   +NVAL2*PRCORD(I_RES,2,1,1)
     *                   -NVAL3*PRCORD(I_RES-1,2,1,3)

        NITCORD(I_RES,3)=NVAL1*PRCORD(I_RES-1,3,1,1)
     *                   +NVAL2*PRCORD(I_RES,3,1,1)
     *                   -NVAL3*PRCORD(I_RES-1,3,1,3)


        H_CORD(I_RES,1) = HVAL1*PRCORD(I_RES-1,1,1,1) 
     *                    +HVAL2*PRCORD(I_RES,1,1,1) 
     *                    -HVAL3*PRCORD(I_RES-1,1,1,3)
        H_CORD(I_RES,2) = HVAL1*PRCORD(I_RES-1,2,1,1) 
     *                    +HVAL2*PRCORD(I_RES,2,1,1) 
     *                    -HVAL3*PRCORD(I_RES-1,2,1,3)
        H_CORD(I_RES,3) = HVAL1*PRCORD(I_RES-1,3,1,1) 
     *                    +HVAL2*PRCORD(I_RES,3,1,1) 
     *                    -HVAL3*PRCORD(I_RES-1,3,1,3)

	ENDDO

! CALCULATE R_IJ (FROM O ON I [ISIT1] TO N AND H ON J [ISIT2])
! WE IGNORE TERMINAL OXYGEN (I POSITION N) AND TERMINAL NITROGEN (J POSITION 1)

	DO ISIT1 = 1,NMRES-1
        DO ISIT2 = 2,NMRES

        DISTANCES(ISIT1,ISIT2,1) = DSQRT (
     *  (PRCORD(ISIT1,1,1,3)-NITCORD(ISIT2,1))**2 +
     *  (PRCORD(ISIT1,2,1,3)-NITCORD(ISIT2,2))**2 +
     *  (PRCORD(ISIT1,3,1,3)-NITCORD(ISIT2,3))**2 )

        DISTANCES(ISIT1,ISIT2,2) = DSQRT(
     *  (PRCORD(ISIT1,1,1,3)-H_CORD(ISIT2,1))**2 +
     *  (PRCORD(ISIT1,2,1,3)-H_CORD(ISIT2,2))**2 +
     *  (PRCORD(ISIT1,3,1,3)-H_CORD(ISIT2,3))**2 )

        ENDDO
        ENDDO

! REMINDER ABOUT THE H-BOND WEIGHTS HBSCL
! HBSCL(1) SHORT RANGE ADDITIVE
! HBSCL(2) SHORT RANGE REPULSIVE
! HBSCL(3) MED RANGE ADDITIVE
! HBSCL(4) MED RANGE REPULSIVE
! HBSCL(5) MED RANGE ANTI-PARALLEL NON-ADD
! HBSCL(6) MED RANGE PARALLEL NON-ADD
! HBSCL(7) LONG RANGE ADDITIVE
! HBSCL(8) LONG RANGE REPULSIVE
! HBSCL(9) LONG RANGE ANTI-PARALLEL NON-ADD
! HBSCL(10) LONG RANGE PARALLEL NON-ADD
!   SEQ-DEP TERMS (THAT DEPEND NON-ADDITIVELY ON IDENTITIES OF RESIDUES IN H-BOND PAIR)
! HBSCL(11) MED RANGE SEQ-DEP ANTI-P FOR H BONDED PAIR
! HBSCL(12) MED RANGE SEQ-DEP ANTI-P FOR NON-H BONDED PAIR
! HBSCL(13) LONG RANGE SEQ-DEP ANTI-P FOR H BONDED PAIR
! HBSCL(14) LONG RANGE SEQ-DEP ANTI-P FOR NON-H BONDED PAIR
! HBSCL(15) LONG RANGE SEQ-DEP PARALLEL (ALL CROSS STRAND PAIRS SAME FOR PARALLEL)
!   SEQ-DEP TERMS (THAT DEPEND *ADDITIVELY* ON IDENTITIES OF RESIDUES IN H-BOND PAIR)
! HBSCL(16) SEQ-DEP ANTI-P WEIGHT  
! HBSCL(17) SEQ-DEP PARALLEL WEIGHT
 
        DO  ISIT1=1,NMRES-1
        DO  ISIT2=2,NMRES
C          REASONS TO INCREMENT LOOP
C          IF (IRES(ISIT2).EQ.15) CYCLE !PROLINE DOEN'T HAVE N-H

      LAMBDA(1) = 0.0D0
	  LAMBDA(2) = 0.0D0
	  LAMBDA(3) = 0.0D0
	  LAMBDA(4) = 0.0D0

           IF (IRES(ISIT2).EQ.15) CYCLE !PROLINE DOEN'T HAVE N-H
	   IF (ABS(ISIT2-ISIT1) .LE. 2)  CYCLE
	   IF (DISTANCES(ISIT1,ISIT2,1) .GT. 7.0D0) CYCLE

C DISCONTUNITY ATTEMPT

	   IF ((DISTANCES(ISIT1,ISIT2,1) .GT. 6.8D0) .AND. 
     *	         (DISTANCES(ISIT1,ISIT2,1) .LT. 7.0D0)) BETA_SCALING=0.1D0

	   IF  ((DISTANCES(ISIT1,ISIT2,1) .GT. 6.6D0) .AND. 
     *	         (DISTANCES(ISIT1,ISIT2,1) .LT. 6.8D0)) BETA_SCALING=0.3D0

	   IF ((DISTANCES(ISIT1,ISIT2,1) .GT. 6.4D0) .AND. 
     *	         (DISTANCES(ISIT1,ISIT2,1) .LT. 6.6D0)) BETA_SCALING=0.5D0

	   IF ((DISTANCES(ISIT1,ISIT2,1) .GT. 6.2D0) .AND. 
     *	         (DISTANCES(ISIT1,ISIT2,1) .LT. 6.4D0)) BETA_SCALING=0.7D0

	   IF ((DISTANCES(ISIT1,ISIT2,1) .GT. 6.0D0) .AND. 
     *	         (DISTANCES(ISIT1,ISIT2,1) .LT. 6.2D0)) BETA_SCALING=0.9D0

!          TERMS INVOLVING A SECOND H-BOND (IN ADDITION TO I->J)
!          THAT SHOULD BE CUT-OFF BECAUSE THEY INVOLVE OUT-OF-RANGE ATOMS
!          OR PROLINE N-H

           I_REPULSIVE=.TRUE.
           I_AP=.TRUE.
           I_P=.TRUE.

      IF (ISIT2.EQ.NMRES.OR.IRES(ISIT2+1).EQ.15) I_REPULSIVE=.FALSE.

      IF (ISIT1.EQ.1 .OR. ISIT2.EQ.NMRES .OR. IRES(ISIT1).EQ.15) I_AP=.FALSE.
      IF (ISIT1.EQ.NMRES-1 .OR. ISIT2.EQ.NMRES .OR.IRES(ISIT1+2).EQ.15) I_P=.FALSE.

!   ALTHOUGH NOT CURRENTLY BEING USED, WE HAVE THE ABILITY TO SET
!   SEPERATE GAUSSION PARAMETERS FOR ALPHA,ANTI-PARALLEL BETA AND PARALLEL BETA
!      HYDROGEN BONDS
          
            SIGMA(1,1) = SIGMA_NO
            SIGMA(1,2) = SIGMA_H
            SIGMA(2,1) = SIGMA_NO
            SIGMA(2,2) = SIGMA_H
            SIGMA(3,1) = SIGMA_NO
            SIGMA(3,2) = SIGMA_H

! FIRST WORK OUT SEQUENCE-IDENTITY WEIGHTS
! NOTE AN ANTI-P HBOND (IE FROM I->J AND J->I SIMULTANEOUSLY)
! BRINGS MAKE I AND J AN ANTI PARALLEL H-BONDED PAIR
! AND PROBABLY MAKES BOTH J-1,I+1 AND J+1,I-1 ANTI-PAR NON H-BONDED PAIRS
!
! WHILE A PARALLEL H-BOND FROM (IE FROM I->J AND J->I+2 SIMULTANEOUSLY)
! MAKES J AND I+1 A PARALLEL PAIR
 
       IF (I_AP) THEN

      DO ISEQ=1,ITER_TGSEQ

       THETA_SEQ_ANTI_HB(:)=  THETA_SEQ_ANTI_HB(:) +  0.5D0*
     * ANTI_HB(TGSEQUENCES_HB(ISIT1,ISEQ),TGSEQUENCES_HB(ISIT2,ISEQ),:)

      THETA_SEQ_ANTI_NHB(:)= THETA_SEQ_ANTI_NHB(:) + 0.25D0*(
     * ANTI_NHB(TGSEQUENCES_HB(ISIT1+1,ISEQ),TGSEQUENCES_HB(ISIT2-1,ISEQ),:) +
     * ANTI_NHB(TGSEQUENCES_HB(ISIT1-1,ISEQ),TGSEQUENCES_HB(ISIT2+1,ISEQ),:))

       ENDDO

      IF (AVE_SEQ_HB) THETA_SEQ_ANTI_HB(:) = THETA_SEQ_ANTI_HB(:)/DBLE(ITER_TGSEQ) 
      IF (AVE_SEQ_HB) THETA_SEQ_ANTI_NHB(:) = THETA_SEQ_ANTI_NHB(:)/DBLE(ITER_TGSEQ) 

       ENDIF !  IF (I_AP) THEN

       IF (I_P) THEN
         
       DO ISEQ=1,ITER_TGSEQ
        THETA_SEQ_PARA_HB(:)= THETA_SEQ_PARA_HB(:) + 
     *     PARA_HB(TGSEQUENCES_HB(ISIT1+1,ISEQ),TGSEQUENCES_HB(ISIT2,ISEQ),:)
       ENDDO

      IF(AVE_SEQ_HB)THETA_SEQ_PARA_HB(:)=THETA_SEQ_PARA_HB(:)/DBLE(ITER_TGSEQ) 

          ENDIF  !    IF (I_P) THEN

! NOTE THAT THE 0.5 AND 0.25 ARE CONVENTIONS, BUT MAKE SENSE, SINCE
! THE LOOP ISIT1 AND ISIT2 (IE I AND J) BOTH GOES OVER ALL SITES, SO
! WILL GET THE H_BONDED PAIR TWICE AND THE NON-H-BONDED PAIR [WHICH
! IS A NEIGHBOUR OF *TWO* H-BONDED PAIRS] FOUR TIMES. THE PARALLEL
! PAIRS ARE ONLY PICKED UP ONCE.

      LAMBDA(1) = -HBSCL(7)
	  LAMBDA(2) = -HBSCL(8)

       DO ISEQ=1,ITER_TGSEQ
          LAMBDA(3) =  LAMBDA(3) + (-HBSCL(9)
     *       -HBSCL(13)*THETA_SEQ_ANTI_HB(2)
     *       -HBSCL(14)*THETA_SEQ_ANTI_NHB(2)
     *       -HBSCL(16)*(ANTI_ONE(TGSEQUENCES_HB(ISIT1,ISEQ))+ 
     *                      ANTI_ONE(TGSEQUENCES_HB(ISIT2,ISEQ))))

	  LAMBDA(4) =  LAMBDA(4) + (-HBSCL(10) 
     *       -HBSCL(15)*THETA_SEQ_PARA_HB(2)
     *       -HBSCL(17)*(PARA_ONE(TGSEQUENCES_HB(ISIT1+1,ISEQ))+
     *                      PARA_ONE(TGSEQUENCES_HB(ISIT2,ISEQ))))
       ENDDO
 
         IF (AVE_SEQ_HB) LAMBDA(3) = LAMBDA(3)/DBLE(ITER_TGSEQ)
         IF (AVE_SEQ_HB) LAMBDA(4) = LAMBDA(4)/DBLE(ITER_TGSEQ)

          HB_CLASS=3
 
         IF (ABS(ISIT2-ISIT1) .LT. 20) THEN
           LAMBDA(1) = -HBSCL(3)
	       LAMBDA(2) = -HBSCL(4)

           DO ISEQ=1, ITER_TGSEQ 
             LAMBDA(3) =  LAMBDA(3) + (-HBSCL(5)
     *         -HBSCL(11)*THETA_SEQ_ANTI_HB(2)
     *         -HBSCL(12)*THETA_SEQ_ANTI_NHB(2)
     *         -HBSCL(16)*(ANTI_ONE(TGSEQUENCES_HB(ISIT1,ISEQ))+ 
     *                     ANTI_ONE(TGSEQUENCES_HB(ISIT2,ISEQ))))
           ENDDO

      IF (AVE_SEQ_HB) LAMBDA(3) = LAMBDA(3)/DBLE(ITER_TGSEQ)

	      LAMBDA(4) = -HBSCL(6)
              HB_CLASS=2

	  ENDIF

          IF (ABS(ISIT2-ISIT1) .LT. 5) THEN
          LAMBDA(1) = -HBSCL(1)
	  LAMBDA(2) = -HBSCL(2)
	  LAMBDA(3) = 0.0D0
	  LAMBDA(4) = 0.0D0
          HB_CLASS=1
	  ENDIF

	RNO(1)=DISTANCES(ISIT1,ISIT2,1)
	RHO(1)=DISTANCES(ISIT1,ISIT2,2)

	RNO(2)=DISTANCES(ISIT1,ISIT2+1,1)
        RHO(2)=DISTANCES(ISIT1,ISIT2+1,2)

	RNO(4)=DISTANCES(ISIT2,ISIT1,1)
        RHO(4)=DISTANCES(ISIT2,ISIT1,2)

	RNO(5)=DISTANCES(ISIT2,ISIT1+2,1)
        RHO(5)=DISTANCES(ISIT2,ISIT1+2,2)

	  HPOT_TOT = 0.0D0

	   DO I = 1,5   
             IF (I.EQ.3) CYCLE !NOTE I=3 REDUNDANT (ORIGINALLY PART OF REPULSIVE TERM)
      THETA(I)=EXP(-(RNO(I)-NO_ZERO)**2/(2.0D0*(SIGMA(HB_CLASS,1))**2) -
     *             (RHO(I)-HO_ZERO)**2 /(2.0D0*(SIGMA(HB_CLASS,2))**2) )

	   ENDDO

          LAMBDA(1) = LAMBDA(1) * BETA_SCALING 
          LAMBDA(2) = LAMBDA(2) * BETA_SCALING
          LAMBDA(3) = LAMBDA(3) * BETA_SCALING
          LAMBDA(4) = LAMBDA(4) * BETA_SCALING

! SOMETIMES NON-ADDITIVE TERMS SWITCHED OFF 
!      (BECAUSE INVOLVE OUT OF BOUNDS RESIDUES) AS DETERMINED ABOVE

          IF (.NOT.I_REPULSIVE) THETA(2)=0.0D0
          IF (.NOT.I_AP) THETA(4)=0.0D0
          IF (.NOT.I_P) THETA(5)=0.0D0
	   
	  HPOT_TOT= LAMBDA(1)*THETA(1) + 
     *    LAMBDA(2)*THETA(1)*THETA(2) +
     *    LAMBDA(3)*THETA(1)*THETA(4) +
     *    LAMBDA(4)*THETA(1)*THETA(5)

	IF (TEMPAV) THEN
           E(1,1)=E(1,1)+HPOT_TOT  !TOTAL H-BOND E
           E(1,13+HB_CLASS)=E(1,13+HB_CLASS)+HPOT_TOT !H-BOND E BY CLASS

C$$$  NOW CALCULATE FREQUENCIES FOR OPTIMISATION PROG (THESE ARE -E/GAMMA)
C$$$  NOTE THAT IF GAMMA VALUES IN INPUT FILE (IE HBSCL) ARE +VE (WHICH
C$$$  EXPECT EXCEPT FOR REPULSIVE HBSCL(2,6,10) THEN SINCE ALL THETA THINGS 
C$$$  CALCULATE HERE ARE POSITIVE THE H-BOND ENERGIES ARE MOSTLY NEGATIVE
C$$$  BUT THE THING STORED IN E (-E/GAMMA) ARE POSITIVE

       E(1,21+(HB_CLASS-1)*4)=E(1,21+(HB_CLASS-1)*4)+THETA(1) 
       E(1,22+(HB_CLASS-1)*4)=E(1,22+(HB_CLASS-1)*4)+THETA(1)*THETA(2)
       E(1,23+(HB_CLASS-1)*4)=E(1,23+(HB_CLASS-1)*4)+THETA(1)*THETA(4) 
       E(1,24+(HB_CLASS-1)*4)=E(1,24+(HB_CLASS-1)*4)+THETA(1)*THETA(5)

        IF (HB_CLASS.EQ.2) THEN
           E(1,33)=E(1,33)+THETA(1)*THETA(4)*THETA_SEQ_ANTI_HB(1)
           E(1,34)=E(1,34)+THETA(1)*THETA(4)*THETA_SEQ_ANTI_NHB(1)
           ELSEIF (HB_CLASS.EQ.3) THEN
           E(1,35)=E(1,35)+THETA(1)*THETA(5)*THETA_SEQ_ANTI_HB(2)
           E(1,36)=E(1,36)+THETA(1)*THETA(5)*THETA_SEQ_ANTI_NHB(2)
           E(1,37)=E(1,37)+THETA(1)*THETA(5)*THETA_SEQ_PARA_HB(2)
           ENDIF
 
        DO ISEQ=1,ITER_TGSEQ 
           E(1,38)=E(1,38)+ THETA(1)*THETA(4)*
     *          ( ANTI_ONE(TGSEQUENCES_HB(ISIT1,ISEQ)) + 
     *            ANTI_ONE(TGSEQUENCES_HB(ISIT2,ISEQ)))
       ENDDO

           IF (HB_CLASS.EQ.3) THEN
             DO ISEQ=1, ITER_TGSEQ  
               E(1,39)=E(1,39)+ THETA(1)*THETA(5)*
     *              ( PARA_ONE(TGSEQUENCES_HB(ISIT1,ISEQ)) + 
     *                PARA_ONE(TGSEQUENCES_HB(ISIT2,ISEQ)))
             ENDDO
           ENDIF

         ENDIF !TEMPAV

C     FIND FORCE DUE TO HBONDS

        CALL DSSP_HFORCE(H_CORD,NITCORD,ISIT1,ISIT2,
     *  RNO(1),RHO(1),THETA(1),1.0D0,LAMBDA(1),
     *  SIGMA(HB_CLASS,1),SIGMA(HB_CLASS,2),PRO_CORD,F_CORD)

        IF (I_REPULSIVE) THEN
        CALL DSSP_HFORCE(H_CORD,NITCORD,ISIT1,ISIT2,
     *  RNO(1),RHO(1),THETA(1),THETA(2),LAMBDA(2),
     *  SIGMA(HB_CLASS,1),SIGMA(HB_CLASS,2),PRO_CORD,F_CORD)


C    SUBROUTINE DSSP_HFORCE(H_CORD,NITCORD,IDX1,IDX2,R1,R2,POT,
C     * FACTOR,LAMBDA_HB,SIGMANO,SIGMAH,PRO_CORD,F_CORD)


        CALL DSSP_HFORCE(H_CORD,NITCORD,ISIT1,
     *  ISIT2+1,RNO(2),RHO(2),THETA(2),THETA(1),LAMBDA(2),
     *  SIGMA(HB_CLASS,1),SIGMA(HB_CLASS,2),PRO_CORD,F_CORD)
        ENDIF

        IF (I_AP) THEN
        CALL DSSP_HFORCE(H_CORD,NITCORD,ISIT1,ISIT2,
     *  RNO(1),RHO(1),THETA(1),THETA(4),LAMBDA(3),
     *  SIGMA(HB_CLASS,1),SIGMA(HB_CLASS,2),PRO_CORD,F_CORD)

        CALL DSSP_HFORCE(H_CORD,NITCORD,ISIT2,
     *  ISIT1,RNO(4),RHO(4),THETA(4),THETA(1),LAMBDA(3),
     *  SIGMA(HB_CLASS,1),SIGMA(HB_CLASS,2),PRO_CORD,F_CORD)
        ENDIF

        IF (I_P) THEN
        CALL DSSP_HFORCE(H_CORD,NITCORD,ISIT1,ISIT2,
     *  RNO(1),RHO(1),THETA(1),THETA(5),LAMBDA(4),
     *  SIGMA(HB_CLASS,1),SIGMA(HB_CLASS,2),PRO_CORD,F_CORD)

        CALL DSSP_HFORCE(H_CORD,NITCORD,ISIT2,
     *  ISIT1+2,RNO(5),RHO(5),THETA(5),THETA(1),LAMBDA(4),
     *  SIGMA(HB_CLASS,1),SIGMA(HB_CLASS,2),PRO_CORD,F_CORD)
        ENDIF

        ENDDO   ! ISIT2	
	ENDDO  ! ISIT1

         IF (AVE_SEQ_HB) E(1,38)=E(1,38)/DBLE(ITER_TGSEQ)
         IF (AVE_SEQ_HB) E(1,39)=E(1,39)/DBLE(ITER_TGSEQ)

C     ----------------------- DONE -----------------------

      RETURN
      END
