C
C   GPL LICENSE INFO {{{
C
C   OPTIM: A PROGRAM FOR OPTIMIZING GEOMETRIES AND CALCULATING REACTION PATHWAYS
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C }}}
C
      SUBROUTINE SYMMETRY(HORDER,PTEST,Q,IT)
! DOXYGEN {{{
C> \NAME SYMMETRY
C> \BRIEF PERFORMS SYMMETRY ANALYSIS AND PUTS MOLECULE IN AN ORIENTATION THAT AXES CAN DEAL WITH
C>
C> \PARAM HORDER
C> \PARAM PTEST LOGICAL
C> \PARAM Q
C> \PARAM IT
! }}}
C DECLARATIONS {{{
      USE COMMONS
      USE KEY
      USE SYMINF
      IMPLICIT NONE
C SUBROUTINE PARAMETERS {{{
      INTEGER HORDER
      LOGICAL PTEST
      DOUBLE PRECISION Q(*)
      DOUBLE PRECISION IT(3,3)
C }}}
! LOCAL PARAMETERS {{{
      INTEGER IBOT2,INDEX,LOOK,JJ,JPLANE,ICLIP,IAXORD,JX,IX,ISIGMV,IMNAX,ISTART,IK,IORBIT,
     1        NORBIT,IBOT,IDIR,IXX,J2,I,J,ISKIP,ICOMPX,JCOMP,JCOMPX,ISAXIS,IHIGHX,ICOMP2,
     2        NUMB,ISET,IERR,IIAX,ICOMPQ,ISINV,IDONE,ICOUNT,ICOMP,ILINEAR,IDGRP,IINV,MINORB,IBTOR,IREF,
     3        IROT,IDEGEN,IHIGH,J1,NORD(2*NATOMS+1),NORD2(2*NATOMS+1)
      DOUBLE PRECISION CM(3),IV(3,3),NEWQ(3*NATOMS),DOTOPT,ANGMAG
      DOUBLE PRECISION RM(3,3),QSORT(3*NATOMS),TATB(3), TEMP(3,3)
      DOUBLE PRECISION SCRATCH(9*NATOMS),MOLWT,QSAVE(3*NATOMS),LTOLE
      DOUBLE PRECISION DELX,DELY,DIST,BILEN,TEST,
     1                 DIP,ARGU,ANGLE2,ANGIAX,ANGMG,ANG,ZANG2,ZANGS,CMX,CMY,CMZ,RANG,
     2                 ATMP,XXX,X,Z,ZANG,DPROJ,ARG,ANGL,DTOR,ORDIS
      LOGICAL AGAIN
      CHARACTER(LEN=4) STRING, JNKSTR, SAVEGRP
      CHARACTER(LEN=87) ESTRING 
      CHARACTER(LEN=80) GPSTRING, NSTRING, FSTRING
      COMMON /STRINGS/ ESTRING, GPSTRING, NSTRING, FSTRING
! }}}
C }}}
C SOME INITIALIZATIONS {{{
      IBTOR(I,J)  = IOR(I,J)
C
      IPRNT=131
      IPRNT=0
      MINORB=1
      LTOLE=TOLE
      FPGRP='   '
      PGRP= '   '
      BPGRP='   '
      IF (BULKT) THEN
         HORDER=1
         RETURN
      ENDIF
      DTOR=DACOS(-1.D0)/180.D0
      AGAIN=.FALSE.
C }}}
C INITIALIZE MILLIONS OF VARIABLES THAT CFT77 SAYS AREN'T INITIALIZED. {{{
C

      DO 10 J1=1,3*NATOMS
         QSAVE(J1)=Q(J1)
10    CONTINUE
651   IHIGH=0
      IDEGEN=0
      IROT=0
      IREF=0
      IINV=0
      IDGRP=0
      ILINEAR=0
      ICOMP=0
      ICOUNT=0
      IDONE=0
      ISINV=0
      ICOMPQ=0
      IIAX=0
      ORDIS=0
      IERR=0
      ISET=0
      NUMB=0
      ICOMP2=0
      IHIGHX=0
      ISAXIS=0
      JCOMPX=0
      JCOMP=0
      ICOMPX=0
      ISKIP=0
C }}}
C TRANSLATE TO CENTER OF MASS {{{
C
      IF (IPRNT.GE.3) WRITE(*,20) (ATMASS(J),J = 1,NATOMS)
20    FORMAT(1X,F15.10)
      CMX=0.D0
      CMY=0.D0
      CMZ=0.D0
      MOLWT=0.D0
      ILOOP: DO I = 1,NATOMS
         IF (TAGT) THEN
            DO J1=1,NTAG
               IF (I.EQ.TAGNUM(J1)) THEN
                  CMX = ATMASS(I)*Q(3*I-2)*TAGFAC(J1)+CMX
                  CMY = ATMASS(I)*Q(3*I-1)*TAGFAC(J1)+CMY
                  CMZ = ATMASS(I)*Q(3*I)*TAGFAC(J1)+CMZ
                  MOLWT = MOLWT+ATMASS(I)*TAGFAC(J1)
                  CYCLE ILOOP
               ENDIF
            ENDDO
         ENDIF
         CMX = ATMASS(I)*Q(3*I-2)+CMX
         CMY = ATMASS(I)*Q(3*I-1)+CMY
         CMZ = ATMASS(I)*Q(3*I)+CMZ
         MOLWT = MOLWT+ATMASS(I)
      ENDDO ILOOP
      CM(1) = CMX/MOLWT
      CM(2) = CMY/MOLWT
      CM(3) = CMZ/MOLWT
      DO I = 1,NATOMS
         DO J = 0,2
            Q(3*I-J) = Q(3*I-J)-CM(3-J)
         ENDDO
      ENDDO
      IF (IPRNT .GE. 4)WRITE(*,*)
     1           'AFTER TRANSLATION TO CENTER OF MASS COORDINATES '
      IF (IPRNT .GE. 4)WRITE(*,50)(Q(I),I = 1,3*NATOMS)
50    FORMAT(3(2X,F12.6))
C }}}
C BUILD, PRINT OUT, AND THEN DIAGONALIZE INERTIA TENSOR {{{
C     BUILD INERTIA TENSOR
C
      CALL INERTIA(IT,Q)
C
C E/VECTORS FROM SMALLEST TO LARGEST.
C
      IF (IPRNT.GE.4) WRITE(*,*) 'INERTIA TENSOR'
      IF (IPRNT.GE.4) WRITE(*,50) ((IT(I,J),J = 1,3),I = 1,3)
C
C DIAGONALIZE INERTIA TENSOR. THE 0 FLAG REORDERS THE E/VALUES AND
C E/VECTORS FROM SMALLEST TO LARGEST.
C
      CALL EIG(IT,IV,3,3,0)
C }}}
C CHECK *NOW* FOR DEGENERACY OF EIGENVALUES {{{
C
C  CHECK *NOW* FOR DEGENERACY OF EIGENVALUES -- IF PRESENT, THEN SEE IF 
C  UNIQUE MOMENT OF INERTIA IS ALONG X.  IF SO, CHANGE THIS AXIS TO Z
C  BY ROTATING THE EIGENVECTOR MATRIX ABOUT Y.  THIS GUARANTEES THAT
C  THE UNIQUE AXIS WILL LIE ALONG Z.
C
C  THE MOMENTS COULD BE LARGE, SO THIS SHOULD BE A DIFFERENT TOLERANCE
C  TO THE DISTANCE CHECKING, I.E. A RELATIVE TOLERANCE.
C
      IF (DABS((IT(2,2)-IT(3,3))/(IT(1,1)+IT(2,2)+IT(3,3))).LT.LTOLE)THEN
         RANG=90.D0
         CALL ROTM(2,RANG,1,RM)
C        CALL MATMUL(TEMP,IV,RM,3,3,3,3,3,3)
         CALL MUL3(TEMP,IV,RM)
         DO 70 J1=1,3
            DO 60 J2=1,3
               IV(J2,J1)=TEMP(J2,J1)
60          CONTINUE
70       CONTINUE
         ATMP=IT(1,1)
         IT(1,1)=IT(3,3)
         IT(3,3)=ATMP
      ENDIF

      IF (IPRNT.GE.4) WRITE (*,*) ' POINTS BEFORE REORIENTATION'
      IF (IPRNT.GE.4) WRITE (*,50) (Q(I),I = 1,3*NATOMS)

      IF (IPRNT.GE.4) WRITE(*,*)' DIAGONALIZED INERTIA TENSOR '
      IF (IPRNT.GE.4) WRITE(*,50) ((IT(I,J),J = 1,3),I = 1,3)
C     WRITE(*,'(3F20.10)') IT(1,1), IT(2,2), IT(3,3)
      IF (IPRNT.GE.4) WRITE(*,*)' EIGENVECTORS OF INERTIA TENSOR ' 
      IF (IPRNT.GE.4) WRITE(*,50)((IV(I,J),J = 1,3),I = 1,3)
      CALL MATMULV(NEWQ,Q,IV,NATOMS,3,3)
      IF (IPRNT.GE.4) WRITE (*,*) ' PRINCIPAL AXIS ORIENTATION FOR MOLECULAR SYSTEM '
      IF (IPRNT.GE.4) WRITE (*,50) (NEWQ(I),I = 1,3*NATOMS)
C }}}
C  PRINT ROTATIONAL CONSTANTS; CHECK HANDEDNESS OF IN. AXES; GENERATE 
C  SORTED COORDINATE VECTOR 
C  {{{
C
C  PRINT OUT THE ROTATIONAL CONSTANTS FROM THE PRINCIPAL 
C  MOMENTS OF INERTIA.
C
      IF (.NOT.AGAIN) CALL ROTCON (IT, 1, IERR, PTEST)
      AGAIN=.TRUE.
C
C  CHECK HANDEDNESS OF INERTIAL AXES - THIS WAS WREAKING HAVOC WITH
C  DIHEDRAL ANGLES!!!  IF DOT PRODUCT IS NEGATIVE; SWITCH SIGN OF
C  Y AXIS (THE CHOICE OF AXIS TO CHANGE IS ARBITRARY)
C
      CALL CROSSOPT(IV(1,1),IV(1,2),TATB,1)
      XXX=DOTOPT(TATB,IV(1,3),3)
C     WRITE(*,*)' INERTIAL AXIS DOT PRODUCT IS ',XXX
      IF (XXX.LT.0.D0) THEN
         DO 80 I=2,3*NATOMS-1,3
            NEWQ(I)=-NEWQ(I)
80       CONTINUE
      ENDIF
C
C  WANT TRANSFORMATION MATRIX TO BE THE IDENTITY IN THIS CASE.
C  GENERATE WELL-DEFINED SORTED COORDINATE VECTOR NOW.  USED IN
C  SYMMETRY EVALUATION ROUTINES WHICH FOLLOW.
C
      IF (IPRNT.GE.4) WRITE(*,50) (NEWQ(J),J = 1,NATOMS*3)
      CALL SORTXYZ(NEWQ,QSORT,NORD,TOLD)
      IF (IPRNT.GE.4) WRITE(*,*) ' SORTED COORDINATE VECTOR'
      IF (IPRNT.GE.4) WRITE(*,50) (QSORT(J),J = 1,NATOMS*3)

C }}}
C
C CHECK IF POINT GROUP IS ABELIAN {{{
C 
C  CHECK TO SEE IF POINT GROUP IS ABELIAN - IF NOT, GO THROUGH THE
C  VERY HAIRY ROUTINE TO DETERMINE POINT GROUP AND PUT IN AN
C  ORIENTATION THAT ACES CAN DEAL WITH.
C
      X = -1.D0
      DO I = 1,3
         Z = IT(I,I)
         IF (DABS((Z-X)/(IT(1,1)+IT(2,2)+IT(3,3))).LT.LTOLE) 
     1                            IDEGEN=IDEGEN+1 
         X = Z
      ENDDO
      IF (IDEGEN.EQ.0) THEN
         IF (IPRNT .GE. 3)WRITE(*,100)
100      FORMAT(' THE MOLECULE BELONGS TO AN ABELIAN GROUP.')
         GOTO 630
      ENDIF
C }}}
C 
C  START OF THE BIG BLOCK FOR POINT GROUPS CONTAINING DEGENRATE IR'S   {{{
C
C
      IF (IDEGEN.EQ.1) THEN
C
C  IF DOUBLY DEGENERATE, CHECK TO MAKE SURE THAT THE PRINCIPAL AXES
C  ARE PARALLEL TO X,Y AND Z.  IF NOT, ROTATE ORIENTATION TO THIS POINT.
C
C  USE A DIFFERENT TOLERANCE FOR ZERO MOMENT OF INERTIA CHECKING. {{{
C
         FPGRP = '   '
         IF (IPRNT .GE. 3)WRITE(*,110)
110      FORMAT(' THE MOLECULE BELONGS TO A POINT GROUP WITH DOUBLY DEGENERATE REPRESENTATIONS.')
         DO 120 I=1,3
            IF (DABS(IT(I,I)).LT.5.0D-2) ILINEAR=1
120      CONTINUE
         IF (ILINEAR.EQ.1) THEN
            IF (IPRNT .GE. 3)WRITE(*,130)
130         FORMAT(' THE MOLECULE IS LINEAR.')
C           ILINEAR = 1
            GOTO 630
         ENDIF
C  }}}
C  DETERMINATION OF UNIQUE AXIS - CHECK FOR ROT. AXES FROM C2 TO NHCHECK {{{
C
         DO I = 2,NHCHECK
            ZANG = 360.D0/FLOAT(I)
            DO J = 1,3
               CALL ROTM(J,ZANG,1,RM)
               CALL MATMULV(SCRATCH,NEWQ,RM,NATOMS,3,3)
               CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP,TOLD)
               IF (IPRNT.GE.4) WRITE(*,*) ICOMP
               IF (TWOD.AND.(J.NE.3)) ICOMP=1
               IF (ICOMP.EQ.0) THEN
                  IHIGH = I
                  IHIGHX = J
C }}}
C  STUFF ORDERING INTO NORD2 {{{
C
                  DO 140 IXX = 1,2*NATOMS
                     NORD2(IXX) = NORD(IXX)
140               CONTINUE
               ENDIF
            ENDDO
         ENDDO

C }}}
C IHIGH=0: ACCIDENTAL DEGENERACY  {{{
C  CATCH PROBLEM IF IHIGH=0 BECAUSE TWO OF THE INERTIA TENSOR
C  E/VALUES JUST HAPPEN TO BE VERY CLOSE
C
            IF (IHIGH.EQ.0) THEN
               IF (PTEST) PRINT*,'ACCIDENTAL DEGENERACY DETECTED'
               LTOLE=LTOLE/10.0D0
               IF (LTOLE.GT.1.0D-7) THEN
                  GOTO 651
               ELSE
                IF (PTEST) WRITE(*,'(A)') ' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS UNDETERMINED'
                 WRITE(GPSTRING,653) 
     1              ' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS UNDETERMINED'
653              FORMAT(A80)
                 GOTO 652
               ENDIF
            ENDIF
C }}}

            IF (IPRNT .GE. 3)WRITE(*,160)IHIGH,IHIGHX
160         FORMAT(' SYMMETRY> THE HIGHEST ORDER ROTATIONAL AXIS IS C',I2,' ABOUT ',I2)
C
COP226 IF ((IHIGH.EQ.2).AND.(.NOT.TWOD)) THEN: HIGHEST ORDER AXIS=2 + TWOFOLD C DEG. {{{
C
C  IF HIGHEST ORDER AXIS IS 2, AND THERE IS TWOFOLD DEGENERACY, THE
C  GROUP MUST BE D2D.  PROCEED TO FIND THE S4 AXIS WHICH DETERMINES
C  THE UNIQUE ROTATIONAL AXIS.  THIS IS SUBSEQUENTLY USED TO ROTATE
C  MOLECULE TO A USEFUL ORIENTATION. (NORD2 NOW CONTAINS AN EFFECTIVE
C  PERMUTATION LIST).
C
            IF ((IHIGH.EQ.2).AND.(.NOT.TWOD)) THEN
               FPGRP = 'D2D'
               ZANG = 90.D0
               DO 180 IDIR = 1,3
                  CALL ROTM(IDIR,ZANG,1,RM)
                  CALL MATMULV(SCRATCH(NATOMS*3+1),NEWQ,RM,NATOMS,3,3)
                  CALL REFLECT(SCRATCH(NATOMS*3+1),SCRATCH,NATOMS,IDIR)
                  CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP,TOLD)
                  IF (ICOMP.EQ.0) THEN
                     IHIGHX = IDIR
                     DO 170 I = 1,2*NATOMS
                        NORD2(I) = NORD(I)
170                  CONTINUE
                  ENDIF
180            CONTINUE
               IF (IPRNT.GE.3)WRITE(*,190)IHIGHX
190            FORMAT(' THE UNIQUE ROTATIONAL AXIS IS ',I1,'.')
            ENDIF
COP226 }}}
C
!OP226 IF (MOD(IHIGH,2).EQ.1) THEN {{{
!
C  NOW, THE UNIQUE AXIS IS KNOWN, NO MATTER WHAT THE GROUP IS.
C  PROCEED TO ROTATE AROUND UNIQUE AXIS SUCH THAT THE PROJECTION
C  OF ONE OF THE ATOMS WHICH ARE EQUIVALENT UNDER THE ROTATION LIES
C  ALONG ONE OF THE OTHER TWO CARTESIAN AXES.
C
C  FIND AN ATOM WHICH IS PERMUTED UNDER THE ROTATION.
C  NEW PROBLEM - IN A LARGE MOLECULE IT IS POSSIBLE TO HAVE, SAY,
C  A 10-ORBIT, WITH A PRINCIPAL AXIS OF ORDER ONLY 5. IN THIS CASE
C  WE NEED TO FIND AN ATOM FROM AN ORBIT OF ORDER EQUAL TO THE
C  ORDER OF THE PRINCIPAL AXIS TO LOOK FOR VERTICAL MIRROR PLANES.
C  IF WE PUT AN ATOM FROM THE 10-ORBIT IN THE XZ OR YZ PLANE WE
C  HAVE NOT PUT A VERTICAL MIRROR PLANE COINCIDENT WITH THE AXIS!
C  I FIRST NOTICED THIS WITH AN LJ55 CLUSTER!
C  ON THE OTHER HAND, FOR D_{ND} GROUPS WITH ODD N WE ACTUALLY
C  MAY NOT HAVE AN ORBIT OF SIZE EQUAL TO THE ORDER OF THE PRINCIPAL
C  AXIS - THERE IS SURE TO BE ONE OF TWICE THE SIZE THOUGH. HERE
C  THE ORIGINAL ALGORITHM WOULD HAVE WORKED.
C  THE PRINCIPAL AXIS ORDER IS IHIGH - THIS IS ONLY NEEDED IF
C  IHIGH IS ODD.
C
            IF (MOD(IHIGH,2).EQ.1) THEN
               IF (IPRNT.GE.4) WRITE(*,*)' BEFORE ROTATION'
               IF (IPRNT.GE.4) WRITE(*,50) (NEWQ(J),J = 1,NATOMS*3)
               SCRATCH(1:3*NATOMS*3)=0.0D0
               DO J=1,NATOMS
                  NORD2(J)=J
                  IBOT=3*J-2
!                 IF (TAGT.AND.(J.EQ.TAGNUM)) THEN
                     SCRATCH(J)=ATMASS(J)*DSQRT(DOTOPT(NEWQ(IBOT),NEWQ(IBOT),3))*TAGFAC(J)
!                 ELSE
!                    SCRATCH(J)=ATMASS(J)*DSQRT(DOTOPT(NEWQ(IBOT),NEWQ(IBOT),3))
!                 ENDIF
               ENDDO
               CALL PIKSR2(NATOMS,SCRATCH,NORD2)
               IF (IPRNT.GE.3) WRITE(*,440)(SCRATCH(J),J=1,NATOMS)
               NORBIT=1
               IORBIT=1
               DO 210 J=2,NATOMS+1
                  IF (DABS(SCRATCH(J)-SCRATCH(J-1)).LT.TOLD) IORBIT=IORBIT+1
                  IF (DABS(SCRATCH(J)-SCRATCH(J-1)).GT.TOLD) THEN
                     NORD2(NATOMS+NORBIT)=IORBIT
                     IF (ATMASS(NORD2(J-1)).LT.0.1D0) THEN
                        SCRATCH(6*NATOMS+NORBIT)=0.0D0
                     ELSE
!                       IF (TAGT.AND.(NORD2(J-1).EQ.TAGNUM)) THEN
                           SCRATCH(6*NATOMS+NORBIT)=DABS(SCRATCH(J-1))/(ATMASS(NORD2(J-1))*TAGFAC(NORD2(J-1)))
!                       ELSE
!                          SCRATCH(6*NATOMS+NORBIT)=DABS(SCRATCH(J-1))/ATMASS(NORD2(J-1))
!                       ENDIF
                     ENDIF
                     IF (J.LE.NATOMS) THEN
                        NORBIT=NORBIT+1
                        IORBIT=1
                     ENDIF
                  ENDIF
210            CONTINUE
C
C  NORD2(NATOMS+I) CONTAINS THE SIZE OF ORBIT I. THE ATOM NUMBERS BELONGING TO 
C  EACH ORBIT ARE STORED IN ORDER IN NORD2 UP TO ELEMENT NORD2(NATOMS).
C
               IF (IPRNT.GE.130) THEN
                   WRITE(*,*)' SCRATCH VECTOR '
                   WRITE(*,*) (SCRATCH(IK),IK=1,NATOMS)
                   WRITE(*,*)' ORBIT DISTANCES: '
                   WRITE(*,*) (SCRATCH(6*NATOMS+IK),IK=1,NORBIT)
               ENDIF
               IF (IPRNT.GE.3) THEN
                  WRITE(*,470) NORBIT
                  NUMB=0
                  DO I=1,NORBIT
                     NUMB=NORD2(NATOMS+I)+NUMB
                     IREF=1+NUMB-NORD2(NATOMS+I)
C                    PRINT*,'I,NORBIT,IREF=',I,NORBIT,IREF
                     WRITE(*,220) I,NORD2(NATOMS+I),SCRATCH(6*NATOMS+I),(NORD2(IREF+J),J=0,NORD2(NATOMS+I)-1)
220                  FORMAT(2I3,F15.7,100I3)
                  ENDDO
               ENDIF
               NUMB=0
               IREF=0
               DO I=1,NORBIT
                  NUMB=NORD2(NATOMS+I)+NUMB
                  IF (NORD2(NATOMS+I).EQ.IHIGH) THEN
                     MINORB=NORD2(NATOMS+I)
                     IREF=1+NUMB-NORD2(NATOMS+I)
                     GOTO 250
                  ENDIF
               ENDDO
250            IF (IREF.NE.0) THEN
                  IF (IPRNT.GE.13) WRITE(*,260) MINORB, NORD2(IREF) 
260               FORMAT(' THE PRINCIPAL AXIS HAS ORDER ',I3,/,
     1            ' ATOM NUMBER ',I3,' BELONGS TO AN ORBIT OF THIS ORDER AND WILL BE USED AS A REFERENCE.')
                  IF (IPRNT.GE.13) WRITE(*,520) (NORD2(IREF+J),J=1,MINORB-1)
                  ICOUNT=NORD2(IREF)
               ELSE
                  NUMB=0
                  IREF=0
                  DO 245 I=1,NORBIT
                     NUMB=NORD2(NATOMS+I)+NUMB
                     IF (NORD2(NATOMS+I).EQ.2*IHIGH) THEN
                        MINORB=NORD2(NATOMS+I)
                        IREF=1+NUMB-NORD2(NATOMS+I)
                        GOTO 255
                     ENDIF
245               CONTINUE
255               IF (IREF.NE.0) THEN
                     IF (IPRNT.GE.13) WRITE(*,265) IHIGH, NORD2(IREF)
265                  FORMAT(' THE PRINCIPAL AXIS HAS ORDER ',I3,/,
     1              ' ATOM NUMBER ',I3,' BELONGS TO AN ORBIT OF TWICE THIS ORDER', 
     2              ' AND WILL BE USED AS A REFERENCE.')
                     IF (IPRNT.GE.13) WRITE(*,520) (NORD2(IREF+J),J=1,MINORB-1)
                     ICOUNT=NORD2(IREF)
                  ELSE
                     NUMB=0
                     IREF=0
                     DO 246 I=1,NORBIT
                        NUMB=NORD2(NATOMS+I)+NUMB
                        IF (NORD2(NATOMS+I).EQ.4*IHIGH) THEN
                           MINORB=NORD2(NATOMS+I)
                           IREF=1+NUMB-NORD2(NATOMS+I)
                           GOTO 256
                        ENDIF
246                  CONTINUE
256                  IF (IREF.EQ.0) THEN
                        IF (DEBUG) PRINT '(A,G20.10)','ORBIT SIZE INCONSISTENT WITH AXIS ORDER - TRY DECREASING TOLD TO ',
     &                             TOLD/10.0D0
                        TOLD=TOLD/10.0D0
                        IF (TOLD.GT.1.0D-7) THEN
                           GOTO 651
                        ELSE
                           IF (DEBUG) WRITE(*,'(A)') ' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS UNDETERMINED'
                           WRITE(GPSTRING,653) ' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS UNDETERMINED'
                           GOTO 652
                        ENDIF
                     ENDIF
                     IF (IPRNT.GE.13) WRITE(*,266) IHIGH, NORD2(IREF)
266                  FORMAT(' THE PRINCIPAL AXIS HAS ORDER ',I3,/,
     1                ' ATOM NUMBER ',I3,' BELONGS TO AN ORBIT OF FOUR TIMES THIS ORDER'
     2               ,' AND WILL BE USED AS A REFERENCE.')
                     IF (IPRNT.GE.13) WRITE(*,520)
     1                   (NORD2(IREF+J),J=1,MINORB-1)
                     ICOUNT=NORD2(IREF)
                  ENDIF
               ENDIF
            ELSE
               DO 270 I= NATOMS,1,-1
                  IF (NORD2(I).NE.NORD2(I+NATOMS)) ICOUNT=NORD2(I)
270            CONTINUE
            ENDIF
!OP226 }}}

C
C   CALCULATE ANGLE BETWEEN PROJECTION OF THIS VECTOR AND ONE OF THE CARTESIAN AXES {{{
C
            ISTART = 3*(ICOUNT-1)
            DPROJ = DSQRT(NEWQ(ISTART+1)**2+NEWQ(ISTART+2)**2+NEWQ(ISTART+3)**2 - NEWQ(ISTART+IHIGHX)**2)
C
C       }}}
C   FIND FIRST CARTESIAN AXIS WHICH IS NOT THE UNIQUE AXIS.                {{{
C   (HAS TO BE X OR Y)
C
            IMNAX = 2-IHIGHX/2
            ARG=NEWQ(ISTART+IMNAX)/DPROJ
            IF (DABS(ARG).GT.1.0D0) ARG=1.0D0*ARG/DABS(ARG)
            ANGL=DACOS(ARG)/DTOR
C                                                                       }}}
C
C   SKIP OUT OF LOOP IF ALIGNMENT ALREADY SATISFIED    {{{
C
            DO 280 I = 0,2
               X = ANGL-FLOAT(I*90)
               IF (DABS(X).LT.TOLD)ISKIP = 1
280         CONTINUE
            IF (ISKIP.EQ.1) GOTO 340
C       }}}
C
C   GET SIGN OF ANGLE NEEDED TO ROTATE MOLECULE INTO POSITION   {{{
C
C   I FOUND A CASE WHERE THIS DIDN'T WORK. THERE ARE ONLY TWO
C   POSSIBILITIES (+ AND -) SO IF ONE DOESN'T WORK, JUST USE 
C   THE OTHER!
C
C           Z0 = 1
C           DO 210 I = 1,3
C              IF (I.EQ.IHIGHX) GOTO 210
C              Z0 = Z0*NEWQ(ISTART+I)
C210         CONTINUE
C           IF (Z0.GT.0.D0) ANGL = -ANGL
C}}}
C   ROTATE MOLECULE INTO POSITION {{{
C
            SCRATCH(1:NATOMS*2*3)=0.0D0
            CALL VADD(SCRATCH(1),SCRATCH(NATOMS*3+1),NEWQ,NATOMS*3,1)
            CALL ROTM(IHIGHX,ANGL,1,RM)
            CALL MATMULV(NEWQ,SCRATCH,RM,NATOMS,3,3)
            IF (IPRNT .GE. 3)WRITE(*,310)ANGL,IHIGHX
310         FORMAT(' MOLECULE ROTATED THROUGH ',F20.10,' DEGREES ',
     1           'ABOUT THE ',I1,' AXIS.')
            IF (IPRNT.GE.4) WRITE(*,*)' AFTER ROTATION:'
            IF (IPRNT.GE.4) WRITE(*,50) (NEWQ(J),J = 1,NATOMS*3)

            DO 320 J1=1,3
               IF (J1.EQ.IHIGHX) GOTO 320
               IF (J1.EQ.IMNAX) GOTO 320
               IF (DABS(NEWQ(ISTART+J1)).GT.1.0D-6) THEN
                  ANGL=-2.0D0*ANGL
                  SCRATCH(1:NATOMS*2*3)=0.0D0
                  CALL VADD(SCRATCH(1),SCRATCH(NATOMS*3+1),NEWQ,NATOMS*3,1)
                  CALL ROTM(IHIGHX,ANGL,1,RM)
                  CALL MATMULV(NEWQ,SCRATCH,RM,NATOMS,3,3)
                  IF (IPRNT.GE.3) WRITE(*,310) ANGL,IHIGHX
                  IF (IPRNT.GE.4) WRITE(*,*)' AFTER ROTATION:'
                  IF (IPRNT.GE.4) WRITE(*,50) (NEWQ(J),J=1,NATOMS*3)  
               ENDIF
320         CONTINUE
C                                       }}}
C   NEW REFERENCE STRUCTURE, SO WE NEED TO GENERATE NEW SORTED VECTOR {{{
C
C
            CALL SORTXYZ(NEWQ,QSORT,NORD,TOLD)
            IF (IPRNT.GE.4) WRITE(*,*)' NEW SORTED COORDINATES'
            IF (IPRNT.GE.4) WRITE(*,50) (QSORT(J),J = 1,NATOMS*3)
C
C                                               }}}
C   CHECK FOR SIGMA(V) PLANES NOW.              {{{
C
            SCRATCH(1:NATOMS*3*2)=0.0D0
            ISIGMV=0
            DO 330 J=1,3
               IF (J.EQ.IHIGHX) GOTO 330
               CALL REFLECT(NEWQ,SCRATCH,NATOMS,J)
               CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMPX,TOLD)
               IF ((ICOMPX.EQ.0).AND.(.NOT.TWOD)) ISIGMV=1
330         CONTINUE
            IF (IPRNT.GT.4) PRINT*,'ISIGMV=',ISIGMV
C
C                                               }}}
C   CHECK FOR S(2N) AXIS                        {{{
C
340         ZANGS = 180.D0/FLOAT(IHIGH)
            CALL ROTM(IHIGHX,ZANGS,1,RM)
            CALL MATMULV(SCRATCH(NATOMS*3+1),NEWQ,RM,NATOMS,3,3)
            CALL REFLECT(SCRATCH(NATOMS*3+1),SCRATCH,NATOMS,IHIGHX)
            CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP,TOLD)
            IF ((ICOMP.EQ.0).AND.(.NOT.TWOD)) THEN
               ISAXIS = 1
               IF (IPRNT .GE. 3) THEN
                  WRITE(*,350) 2*IHIGH
350               FORMAT(' S',I3,' AXIS EXISTS.')
               ENDIF
            ENDIF
C }}}
C
C LOOK FOR PERPENDICULAR C2 AXES            {{{
C
C   LOOK FOR PERPENDICULAR C2 AXES - CHECK ALONG CARTESIAN AXES AND
C   ALONG ANGLE BISECTORS OF S2N OPERATIONS,
C
C   THIS ISN'T GOOD ENOUGH - IN DND THE C2 AXES NEED NOT BE IN EITHER
C   OF THE ABOVE ORIENTATIONS. TRY A ROTATION THAT PUTS THE REFERENCE
C   ATOM NORD2(IREF) AND THE NEXT ONE IN THE ORBIT NORD2(IREF+1)
C
C   FIRST ROTATE MOLECULE BY 1/2 S(2N) ANGLE AROUND IHIGH X AND PUT IN
C   SCRATCH(6*NATOMS+1)
C  {{{
C
C           PRINT*,'LOOKING FOR PERPENDICULAR C2 AXES'
            ZANG = 180.D0
            ZANG2 = 180.D0/(2.D0*IHIGH)
C           PRINT*,'IHIGHX,ZANG2=',IHIGHX,ZANG2
            CALL ROTM(IHIGHX,ZANG2,1,RM)
            !OP226       SCRATCH=NEWQ*RM 
            CALL MATMULV(SCRATCH(6*NATOMS+1),NEWQ,RM,NATOMS,3,3)
C           PRINT*,'REFERENCE GEOMETRY WITHOUT ROTATION AND WITHOUT SORTING '
C           WRITE(*,'(3F15.7)') (NEWQ,J1=1,3*NATOMS)
C           PRINT*,'REFERENCE GEOMETRY AFTER ROTATION THROUGH ',ZANG2,' BEFORE SORTING'
C           WRITE(*,'(3F15.7)') (SCRATCH(6*NATOMS+J1),J1=1,3*NATOMS)
C }}}
C}}}
C   SORT THE REFERENCE GEOMETRY {{{
C
            SCRATCH(3*NATOMS+1:3*NATOMS+3*NATOMS)=0.0D0
            CALL SORTXYZ(SCRATCH(6*NATOMS+1),SCRATCH(3*NATOMS+1),NORD,TOLD)
            DO 360 I = 1,3
               IF (I.EQ.IHIGHX) GOTO 360
C }}}
C   CHECKING CARTESIAN AXES FOR BOTH ROTATED AND UNROTATED MOLECULE             {{{
C
               CALL ROTM(I,ZANG,1,RM)
               IF (IPRNT.GE.5) WRITE(*,50) ((RM(IX,JX),JX = 1,3),IX = 1,3)
               CALL MATMULV(SCRATCH,NEWQ,RM,NATOMS,3,3)                 ! UNROTATED MOLECULE
               CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP,TOLD)        
               CALL MATMULV(SCRATCH,SCRATCH(6*NATOMS+1),RM,NATOMS,3,3)  ! ROTATED MOLECULE
               CALL COMPARE2(SCRATCH,SCRATCH(3*NATOMS+1),NORD,ICOMPX,TOLD)
               IF ((ICOMP.EQ.0).AND.(.NOT.TWOD)) JCOMP = JCOMP+1
               IF ((ICOMPX.EQ.0).AND.(.NOT.TWOD)) JCOMPX = JCOMPX+1
360         CONTINUE
            IF (JCOMP.GE.1) THEN
               IF (IPRNT .GE. 3) WRITE(*,370)
370            FORMAT(' ON-AXIS PERPENDICULAR C2 ELEMENTS FOUND.')
               IDGRP = 1
            ELSE IF (JCOMPX.GE.1) THEN
               IF (IPRNT .GE. 3) WRITE(*,380)
380            FORMAT(' OFF-AXIS PERPENDICULAR C2 ELEMENTS FOUND.')
               IDGRP = 1
            ENDIF
C                                                                       }}}
C  ANOTHER ATTEMPT WHICH ACTUALLY WORKS OUT WHERE THE PERPENDICULAR C2 AXIS SHOULD BE.{{{
C  ASSUMES IHIGHX=3 SO THAT THE PRINCIPAL AXIS IS THE Z AXIS.
C
            IF (IDGRP.NE.1) THEN
               DO J=1,MINORB-1
                  DELX=NEWQ(3*(NORD2(IREF+J)-1)+1)
                  DELY=NEWQ(3*(NORD2(IREF+J)-1)+2)
                  IF (DELX.NE.0.0D0) THEN
                     ZANG2=-ATAN(DELY/DELX)/2
                     ZANG2=ZANG2/DTOR
                     CALL ROTM(IHIGHX,ZANG2,1,RM)
                     CALL MATMULV(SCRATCH(6*NATOMS+1),NEWQ,RM,NATOMS,3,3)
C                    PRINT*,'REFERENCE GEOMETRY AFTER ROTATION THROUGH ',ZANG2,' BEFORE SORTING'
C                    WRITE(*,'(3F15.7)') (SCRATCH(6*NATOMS+J1),J1=1,3*NATOMS)
                     SCRATCH(3*NATOMS+1:3*NATOMS+3*NATOMS)=0.0D0
                     CALL SORTXYZ(SCRATCH(6*NATOMS+1),SCRATCH(3*NATOMS+1),NORD,TOLD)
                     CALL ROTM(1,ZANG,1,RM)
                     CALL MATMULV(SCRATCH,SCRATCH(6*NATOMS+1),RM,NATOMS,3,3)  ! ROTATED MOLECULE
                     CALL COMPARE2(SCRATCH,SCRATCH(3*NATOMS+1),NORD,ICOMPX,TOLD)
                     IF ((ICOMPX.EQ.0).AND.(.NOT.TWOD)) JCOMPX = JCOMPX+1
                     IF (JCOMPX.GE.1) THEN
                        IF (IPRNT .GE. 3) WRITE(*,380)
                        IDGRP=1
                     ELSE
                        IF (DELY.NE.0.0D0) ZANG2=ATAN(DELX/DELY)/DTOR
                     ENDIF
                  ENDIF 
               ENDDO
            ENDIF
C                                       }}}
C   CHECK FOR SIGMA(H)                  {{{
C
            IF (IDGRP.EQ.1) THEN
               CALL REFLECT(NEWQ,SCRATCH,NATOMS,IHIGHX)
               CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP2,TOLD)
               IF ((ICOMP2.EQ.0).AND.(.NOT.TWOD)) THEN
                  FPGRP = 'DNH'
                  IF (IPRNT .GE. 3)WRITE(*,390)
               ENDIF
            ELSE
               CALL REFLECT(NEWQ,SCRATCH,NATOMS,IHIGHX)
390            FORMAT(' HORIZONTAL PLANE OF SYMMETRY FOUND.')
               CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP2,TOLD)
               IF ((ICOMP2.EQ.0).AND.(.NOT.TWOD)) THEN
                  FPGRP = 'CNH'
                  IF (IPRNT .GE. 3)WRITE(*,390)
               ELSE
                  FPGRP = 'CN '
                  IF (ISAXIS.EQ.1) THEN
                     FPGRP = 'SN '
                     IHIGH = 2*IHIGH
                  ENDIF
                  DO J = 1,3
                     IF (J.EQ.IHIGHX) GOTO 400
                     CALL REFLECT(NEWQ,SCRATCH,NATOMS,J)
                     CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP2,TOLD)
400                  IF ((ICOMP2.EQ.0).AND.(.NOT.TWOD)) FPGRP = 'CNV'
                  ENDDO
               ENDIF
            ENDIF
         ENDIF
         IF (IDEGEN.EQ.2) THEN
            IF (IPRNT.GE.3) WRITE(*,*) ' IN TD OH LOOP '
            IF (IPRNT.GE.3) WRITE(*,410)
410         FORMAT(' THE MOLECULE BELONGS TO A POINT GROUP WITH DOUBLY', 
     1             ' AND TRIPLY DEGENERATE REPRESENTATIONS.')
C
C       }}}
C
C   NOW WE KNOW THAT THE POINT GROUP IS EITHER T, TD, O, OH, T, I, TH
C   OR IH.  FOR THESE GROUPS, HOWEVER, THE INERTIA TENSOR
C   IS ROTATIONALLY INVARIANT; THEREFORE DIFFERENT (AND SIGNIFICANTLY
C   MORE COMPLICATED) METHODS NEED TO BE USED.  THIS ONE SEEMS TO
C   BE PARTICULARLY EFFICIENT.
C
C   CHECK FOR INVERSION SYMMETRY. THIS WILL TELL US A GREAT DEAL. {{{
C   (IF INVERSION CENTER PRESENT, THEN GROUP IS EITHER OH,TH OR IH.
C
         DO 420 I = 1,NATOMS*3
            SCRATCH(I) = -NEWQ(I)
420      CONTINUE
         CALL COMPARE2(SCRATCH,QSORT,NORD,ISINV,TOLD)
C
C}}}
C   LOCATE ALL ORBITS (GROUPS OF EQUIVALENT ATOMS AT DISTANCE R) - {{{
C   DO THIS BY GENERATING AND THEN SORTING THE C.O.M-OUTER ATOM
C   DISTANCE MATRIX (MASS-WEIGHTED).  USE NORD2 TO KEEP TRACK OF
C   WHICH ATOMS ARE IN WHICH ORBIT.
C
         SCRATCH(1:3*NATOMS*3)=0.0D0
         DO 430 J=1,NATOMS
            NORD2(J)=J
            IBOT=3*J-2
!           IF (TAGT.AND.(J.EQ.TAGNUM)) THEN
               SCRATCH(J)=ATMASS(J)*DSQRT(DOTOPT(NEWQ(IBOT),NEWQ(IBOT),3))*TAGFAC(J)
!           ELSE
!              SCRATCH(J)=ATMASS(J)*DSQRT(DOTOPT(NEWQ(IBOT),NEWQ(IBOT),3))
!           ENDIF
430      CONTINUE
         CALL PIKSR2(NATOMS,SCRATCH,NORD2)
         IF (IPRNT.GE.3) WRITE(*,440)(SCRATCH(J),J=1,NATOMS)
440      FORMAT(' ORBIT MATRIX:',(F10.6,/))
C
C }}}
C   NOW COUNT NUMBER OF ORBITS; PLACE PERTINENT INFO (DISTANCES) IN TOP {{{
C   END OF SCRATCH ARRAY AND USE TOP END OF NORD2 TO HOLD NUMBER
C   OF CENTERS/ORBIT.  THIS BOOKKEEPING FACILITATES THINGS DOWN
C   THE ROAD.  DON'T COUNT DUMMY ATOMS!
C
         NORBIT=1
         IORBIT=1
C        CALL VADD(SCRATCH(NATOMS+1),SCRATCH(NATOMS+1),SCRATCH(1),NATOM
         DO 460 J=2,NATOMS+1
            IF (DABS(SCRATCH(J)-SCRATCH(J-1)).LT.TOLD) IORBIT=IORBIT+1
            IF (DABS(SCRATCH(J)-SCRATCH(J-1)).GT.TOLD) THEN
               NORD2(NATOMS+NORBIT)=IORBIT
               IF (ATMASS(NORD2(J-1)).LT.0.1D0) THEN
                  SCRATCH(6*NATOMS+NORBIT)=0.D0
               ELSE
!                 IF (TAGT.AND.(NORD2(J-1).EQ.TAGNUM)) THEN
                     SCRATCH(6*NATOMS+NORBIT)=DABS(SCRATCH(J-1))/(ATMASS(NORD2(J-1))*TAGFAC(NORD2(J-1)))
!                 ELSE
!                    SCRATCH(6*NATOMS+NORBIT)=DABS(SCRATCH(J-1))/ATMASS(NORD2(J-1))
!                 ENDIF
               ENDIF
               IF (J.LE.NATOMS) THEN
                  NORBIT=NORBIT+1
                  IORBIT=1
               ENDIF
            ENDIF
460      CONTINUE

         IF (IPRNT.GE.130) THEN
            WRITE(*,*)' SCRATCH VECTOR '
            WRITE(*,*)(SCRATCH(IK),IK=1,NATOMS)
            WRITE(*,*)' ORBIT DISTANCES: '
            WRITE(*,*)(SCRATCH(6*NATOMS+IK),IK=1,NORBIT)
         ENDIF
C        NORBIT=NORBIT-1
C
C }}}
C   DEBUG PRINT TO MAKE SURE WE'VE GOT ALL THE ORBITS CORRECT. {{{
C
         IF (IPRNT.GE.3) THEN
            WRITE(*,470) NORBIT
470         FORMAT(' NUMBER OF DISTINCT PLANETARY ORBITS: ',I3,/,  
     1             ' SUMMARY OF ORBIT SIZES:')
            DO 490 I=1,NORBIT
               WRITE(*,480) I, NORD2(NATOMS+I)
480            FORMAT(2I3)
490         CONTINUE
         ENDIF
C }}}
C
C FIND THE SMALLEST ORBIT OF NON-UNIT MAGNITUDE AND PROCEED {{{
C
C  THE PROGRAMMER THINKS THAT ONLY THE SMALLEST ORBIT OF NON-UNIT
C  MAGNITUDE WILL BE NEEDED TO IDENTIFY THE POINT GROUP UNIQUELY
C  BY THE FOLLOWING METHOD.  FIND THIS ORBIT AND PROCEED.  AGAIN,
C  BE WARY OF DUMMY ATOMS!
C
C  SCRATCH(6*NATOMS+ORBIT NUMBER) WILL BE THE RADIUS OF THE ORBIT.
C
         MINORB=NATOMS
         NUMB=0
         DO 500 I=1,NORBIT
            NUMB=NORD2(NATOMS+I)+NUMB
            IF (SCRATCH(6*NATOMS+I).LT.1.0D-8) GOTO 500
            IF (NORD2(NATOMS+I).LE.MINORB) THEN
               MINORB=NORD2(NATOMS+I)
               ORDIS=SCRATCH(6*NATOMS+I)
               IREF=1+NUMB-NORD2(NATOMS+I)
C              PRINT*,'I,NUMB,NORD2=',I,NUMB,NORD2(NATOMS+I)
            ENDIF
500      CONTINUE
         IF (IREF.EQ.0) THEN
            IF (DEBUG) PRINT*,'ACCIDENTAL DEGENERACY DETECTED'
            TOLE=TOLE/10.0D0
            IF (TOLE.GT.1.0D-7) THEN
               GOTO 651
            ELSE
               IF (DEBUG) WRITE(*,'(A)')' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS UNDETERMINED'
               WRITE(GPSTRING,653) ' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS UNDETERMINED'
               GOTO 652
            ENDIF
         ENDIF
         IF (IPRNT.GE.13) WRITE(*,510)MINORB,NORD2(IREF)
510      FORMAT(' THE SMALLEST ORBIT CONTAINS ',I3,' MEMBERS.',/,
     1    ' ATOM NUMBER ',I3,' BELONGS TO THIS ORBIT AND WILL BE',
     2    ' USED AS A REFERENCE.')
         IF (IPRNT.GE.13) WRITE(*,520)(NORD2(IREF+J),J=1,MINORB-1)  
520      FORMAT(' OTHER MEMBERS OF THIS ORBIT ARE: ',100I4)
C
C }}}
C
C   NOW USE REFERENCE ATOM FROM ORBIT AND LOOP OVER ALL OTHER ATOMS.
C   FIND HIGHEST ORDER ROTATIONAL AXIS WHICH PERMUTES THE TWO; THIS
C   UNIQUELY IDENTIFIES THE HIGHEST ORDER ROTATIONAL AXIS PRESENT IN
C   THE MOLECULE.  NO KIDDING.
C
         SCRATCH(1:9*NATOMS)=0.0D0
         IBOT=3*NORD2(IREF)-2
C
C   LOOP BELOW IS THE "BIG ONE". IT IS FULLY EXECUTED TWO TIMES
C   IF AND ONLY IF THE FPGRP IS OF THE T OR I VARIETY AND NO
C   C2 AXIS APPROPRIATE FOR ORIENTATION FUDGING WAS FOUND AFTER
C   IDENTIFICATION OF THE GROUP.
C
         IF (IPRNT.GE.13) WRITE(*,*)' JUST BEFORE BIG LOOP'
         IF (IPRNT.GE.13) WRITE(*,*)' MINORB SET TO ',MINORB
         DO 620 ICOUNT=1,2
            IF (IPRNT.GE.3)
     1         WRITE(*,*)' PASS ',ICOUNT,' THROUGH ROT. FINDER '
            DO 610 J=1,MINORB-1
               IF (IDONE.EQ.1) GOTO 610
               IF (IPRNT.GE.3)
     1         WRITE(*,*)' ATOMS ',NORD2(IREF),NORD2(IREF+J)
               IBOT2=3*NORD2(IREF+J)-2
C
C   FIRST ROTATE MOLECULE SO THAT THE INTERATOMIC DISTANCE VECTOR
C   IS PARALLEL TO THE Z-AXIS, WITH BISECTOR ALONG X-AXIS.
C   STRUCTURE NOW IN SCRATCH(1). HERE ONE HAS TO ALLOW FOR THE
C   POSSIBILITY THAT ATOMS I AND J ARE 180 DEGREES APART; IF THIS
C   IS THE CASE, LOOP THROUGH OTHER ATOMS IN ORBIT AND FIND ONE
C   THAT IS PERPENDICULAR (THERE HAS TO BE ONE FOR CUBIC GROUPS)
C   AND USE THIS VECTOR AS THE "BISECTOR". IF
C   IT ISN'T DONE THIS WAY, THE ORIENTATION FUDGING GETS FUDGED UP.
C
C              CALL CALCVEC(NEWQ(IBOT),NEWQ(IBOT2),SCRATCH(1),0)
               SCRATCH(1)=NEWQ(IBOT2)-NEWQ(IBOT)
               SCRATCH(2)=NEWQ(IBOT2+1)-NEWQ(IBOT+1)
               SCRATCH(3)=NEWQ(IBOT2+2)-NEWQ(IBOT+2)
               DIST=DSQRT(DOTOPT(SCRATCH(1),SCRATCH(1),3))
C
C  BUG DETECTED VIA GMIN 1/1/07 DJW
C
C              CALL VADD(SCRATCH(1),NEWQ(IBOT),NEWQ(IBOT2),3*NATOMS,1)
               CALL VADD(SCRATCH(1),NEWQ(IBOT),NEWQ(IBOT2),3,1)
C
C   DEAL WITH THE LINEAR PROBLEM RIGHT NOW. {{{
C
               BILEN=DOTOPT(SCRATCH(1),SCRATCH(1),3)
               IF (BILEN.LT.TOLD) THEN
                  ISET=0
                  DO 530 LOOK=1,MINORB-1
                     IF (ISET.EQ.1) GOTO 530
                     INDEX=3*NORD2(IREF+LOOK)-2
                     TEST=DOTOPT(NEWQ(IBOT),NEWQ(INDEX),3)
                     IF (IPRNT.GT.13) WRITE(*,*) TEST
                     IF (DABS(TEST).LT.TOLD) THEN
                        SCRATCH(1:3)=0.0D0
                        CALL VADD(SCRATCH(1),SCRATCH(1),NEWQ(INDEX),3,1) 
                        ISET=1
                     ENDIF
530               CONTINUE
               ENDIF
               CALL SIAZ(SCRATCH(1),RM,1)
               SCRATCH(1:3*NATOMS*3)=0.0D0
               CALL MATMULV(SCRATCH(3*NATOMS+1),NEWQ,RM,NATOMS,3,3)
C }}}
C   NOW YOU HAVE BISECTOR ALONG X. ROTATE ABOUT X TO BRING THE TWO
C   ATOMS INTO POSITION PARALLEL TO Z.
C
C{{{
               DIP=DSQRT(DOTOPT(SCRATCH(3*NATOMS+IBOT+1),SCRATCH
     1            (3*NATOMS+IBOT+1),2))
               ARGU=SCRATCH(3*NATOMS+IBOT+2)/DIP
               IF (DABS(ARGU).GT.1.D0)ARGU=ARGU/DABS(ARGU)
               ANGLE2=-DACOS(ARGU)/DTOR
               IF (SCRATCH(3*NATOMS+IBOT+1).GT.0.D0)ANGLE2=-ANGLE2
               CALL ROTM(1,ANGLE2,1,RM)
               CALL MATMULV(SCRATCH,SCRATCH(3*NATOMS+1),RM,NATOMS,3,3)
C
C }}}
C   NOW FIND NEW VECTOR WHICH BISECTS THE TWO ATOMS IN QUESTION - {{{
C   IT HAD BEST BE X! (UNLESS LINEAR CASE WHERE TATB IS FORCED.)
C
               CALL VADD(TATB,SCRATCH(IBOT),SCRATCH(IBOT2),3,1)
               IF (ISET.EQ.1) THEN
                  TATB(1:3)=0.0D0
                  TATB(1)=1.D0
               ENDIF
C }}}
C 1. TEST IF THE TWO ATOMS ARE CONNECTED BY SYMMETRY AXES, LOOPING OVER POSSIBLE OPTIONS {{{
C  (2,3,4 AND 5).
C
               DO 600 IAXORD=5,2,-1
                  IF (IPRNT.GE.13) WRITE(*,*)' IN BIG CUBIC LOOP'
                  ICLIP=0
                  ANGIAX=360.D0/FLOAT(IAXORD)
                  ANGMG=ANGMAG(ORDIS,DIST,IAXORD,IERR)
                  IF (IPRNT.GE.3) WRITE(*,540)ANGMG
540               FORMAT(' ANGMAG ANGLE IS ',F8.4)
                  IF (IPRNT.GE.13) WRITE(*,550) IERR,IAXORD
550               FORMAT(' IERR IS ',I2,' FOR ',I1)
                  IF (IERR.EQ.1) GOTO 600
                  IF (IPRNT.GE.13) THEN
                     WRITE(*,*)
     1                  ' IN ROTATIONAL LOOP, LOOKING FOR ORDER ',IAXORD  
                     WRITE(*,560)NORD2(IREF),NORD2(IREF+J)
560                  FORMAT(' PLAYING WITH ATOMS ',I3,' AND ',I3)
                        WRITE(*,*)' IBOT AND IBOT2 ARE ',IBOT,IBOT2
                     WRITE(*,*)' ORBIT DISTANCE IS ',ORDIS
                     WRITE(*,*)' INTERATOMIC DISTANCE IS ',DIST
                     WRITE(*,*)' MAGIC ANGLE IS ',ANGMG
                     WRITE(*,*)' MAGIC VECTOR IS ',(TATB(JJ),JJ=1,3)
                  ENDIF
570               CALL ROTM(3,ANGMG,1,RM)
                  IF (IPRNT.GE.13) 
     1               WRITE(*,50)(SCRATCH(JJ),JJ=1,3*NATOMS)
                  CALL MATMULV(SCRATCH(3*NATOMS+4),TATB,RM,1,3,3)

C                 IF (IPRNT.GE.13)WRITE(*,80)(SCRATCH(JJ),JJ=1,3*NATOMS)
C                 WRITE(*,*)' ROT. MAGIC VECTOR IS ',
C    1                        (SCRATCH(3*NATOMS+3+JJ),JJ=1,3)

                  CALL SIAZ(SCRATCH(3*NATOMS+4),RM,3)
                  SCRATCH(3*NATOMS+1:3*NATOMS+NATOMS*3*2)=0.0D0
                  CALL MATMULV(SCRATCH(3*NATOMS+1),SCRATCH,RM,NATOMS,3
     1                         ,3)  

C              IF (IPRNT.GE.13) WRITE(*,80) 
C    1             (SCRATCH(3*NATOMS+JJ),JJ=1,3*NATOMS)

                  CALL SORTXYZ(SCRATCH(3*NATOMS+1),QSORT,NORD,TOLD)
                  CALL ROTM(3,ANGIAX,1,RM)
                  CALL MATMULV(SCRATCH(6*NATOMS+1),SCRATCH(3*NATOMS+1),               
     1                         RM,NATOMS,3,3)
C
C }}}
C   POINT GROUP DETERMINATION HAPPENS HERE, AS WELL AS ORIENTATION {{{
C
                  CALL COMPARE2(SCRATCH(6*NATOMS+1),QSORT,NORD,IIAX,
     1                          TOLD) 
C }}}
C   POINT GROUP DETERMINATION HAPPENS HERE, AS WELL AS ORIENTATION FUDGING. {{{
C
                  IF (IIAX.EQ.0) THEN
                     IF (IPRNT.GE.3) WRITE(*,580) IAXORD
580                  FORMAT(' AXIS OF ORDER ',I1,' IDENTIFIED.')
                     IF (IAXORD.EQ.5) THEN
                        FPGRP='I  '
                        IF (ISINV.EQ.0)FPGRP='I H'
                     ENDIF
                     IF (IAXORD.EQ.4) THEN
                        FPGRP='O  '
                        IF (ISINV.EQ.0) FPGRP='O H'
C
C }}}
C   ORIENTATION IS GOOD.  PUT STRUCTURE INTO NEWQ AND LEAVE LOOP. {{{
C
                        NEWQ(1:3*NATOMS)=0.0D0
                        CALL VADD(NEWQ,NEWQ,SCRATCH(3*NATOMS+1),3*NATOMS
     1                                                               ,1)
                        CALL SORTXYZ(NEWQ,QSORT,NORD,TOLD)
                        IDONE=1
                        GOTO 610
                     ENDIF
                     IF (IAXORD.EQ.3) THEN
                        IF (FPGRP.EQ.'   ') THEN
                           FPGRP='T  '
                           IF (ISINV.EQ.0)FPGRP='T H'
                        ENDIF
                     ENDIF
                     IF (IAXORD.EQ.2) THEN
                        IF (FPGRP.NE.'   '.AND.FPGRP.NE.'O H'.AND.          
     1                              FPGRP.NE.'O  ') THEN
C }}}
C
C   HAVE A C2 AXIS FOR I OR T GROUP. THIS IS VERY GOOD. YOU WANT THIS
C   TO BE THE ORIENTATION FOR PITZER. TD AND T CAN BE DIFFERENTIATED
C   HERE.  DO THIS NOW IF APPROPRIATE. THEN PUT STRUCTURE INTO NEWQ AND
C   LEAVE LOOP IF IT IS AN I GROUP. OTHERWISE, NEED TO CONTINUE THROUGH
C   (SINCE THERE MIGHT BE A HIGHER ORDER AXIS DOWN THE LINE.) IF
C   PASS TWO, HOWEVER, THEN EXIT FOR T SINCE IT MUST BE THE CORRECT GROUP.
C
C {{{
                           IF (ICOUNT.EQ.2.AND.(FPGRP.EQ.'T  '.OR.FPGRP.EQ.'T H')) THEN
                              DO 590 JPLANE=1,3
                                 CALL REFLECT(SCRATCH(3*NATOMS+1),SCRATCH,NATOMS,JPLANE)
                                 CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMPQ,TOLD)
                                 IF (ICOMPQ.EQ.0.AND.ISINV.NE.0) FPGRP='T D'
                                 NEWQ(1:3*NATOMS)=0.0D0
                                 CALL VADD(NEWQ,NEWQ,SCRATCH(3*NATOMS+1),3*NATOMS,1)
                                 CALL SORTXYZ(NEWQ,QSORT,NORD,TOLD)
                                 IDONE=1
                                 GOTO 610
590                           CONTINUE
                           ENDIF
                        ENDIF
                     ENDIF
                  ENDIF
                  ANGMG=-ANGMG
                  IF (ICLIP.EQ.0) THEN
                     ICLIP=1
                     GOTO 570
                  ENDIF
600            CONTINUE
610         CONTINUE
620      CONTINUE
         IF (FPGRP.EQ.'   ') THEN
            IF (PTEST) PRINT*,'ACCIDENTAL DEGENERACY DETECTED'
            LTOLE=LTOLE/10.0D0
            IF (LTOLE.GT.1.0D-7) THEN
               GOTO 651
            ELSE
               IF (PTEST) WRITE(*,'(A)') ' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS UNDETERMINED'
               WRITE(GPSTRING,653) ' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS UNDETERMINED'
               GOTO 652
            ENDIF
         ENDIF
      ENDIF
C
C   CUBIC POINT GROUP NOW DETERMINED.
C }}}
C   *** THIS IS THE END OF THE NON-ABELIAN POINT GROUP BLOCK. ***
C
C   CHECK SYMMETRY OPERATIONS BELONGING TO ABELIAN GROUPS {{{
C
630   ANG = 180.D0
      IREF=0
      DO 660 I = 3,1,-1
         CALL REFLECT(NEWQ,SCRATCH,NATOMS,I)
         CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP,TOLD)
         IF ((ICOMP.EQ.0).AND.(.NOT.TWOD)) THEN
            IF (IPRNT.GE.3) WRITE(*,640) I
640         FORMAT(' REFLECTION IN PLANE ',I2,' IS A VALID ',
     1           ' SYMMETRY OPERATION.')
            IREF=IBTOR(IREF,2**I/2)
         ENDIF
         CALL ROTM(I,ANG,1,RM)
         IF (IPRNT.GE.5) WRITE(*,50) ((RM(IX,JX),JX = 1,3),IX = 1,3)
         CALL MATMULV(SCRATCH,NEWQ,RM,NATOMS,3,3)
         CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP,TOLD)
         IF (TWOD.AND.(I.NE.3)) ICOMP=1
         IF (ICOMP.EQ.0) THEN
            IF (IPRNT.GE.3) WRITE(*,650) I
650         FORMAT(' ROTATION ABOUT ',I2,' IS A VALID SYMMETRY OPERATION ')
            IROT = IBTOR(IROT,2**I/2)
         ENDIF
660   CONTINUE
      DO 670 I = 1,NATOMS*3
         SCRATCH(I)=-NEWQ(I)
670   CONTINUE
      CALL COMPARE2(SCRATCH,QSORT,NORD,ICOMP,TOLD)
C
C  EVEN DND DO NOT HAVE THE INVERSION OPERATION - BUG FIXED DJW 13/5/92
C
      IF ((ISAXIS.EQ.1).OR.(ICOMP.EQ.0)) THEN
         IF (IPRNT.GE.3) WRITE(*,680)
680      FORMAT(' THE MOLECULE POSSESSES AN INVERSION CENTER. ')
         IF (ILINEAR.EQ.1)FPGRP = 'DXH'
         IF (FPGRP.EQ.'   '.AND.IDGRP.EQ.1)FPGRP = 'DND'
         IINV=1
      ELSE
         IF (ILINEAR.EQ.1)FPGRP = 'CXV'
         IF (FPGRP.EQ.'   '.AND.IDGRP.EQ.1)FPGRP='DN '
      ENDIF
C
C   DETERMINE LARGEST ABELIAN SUBGROUP OF MOLECULE {{{
C
      IF (IROT.EQ.0.AND.IREF.EQ.0.AND.IINV.EQ.0) PGRP = 'C1 '
      IF (IROT.EQ.0.AND.IREF.EQ.0.AND.IINV.EQ.1) PGRP = 'C I'
      IF (IROT.EQ.0.AND.IREF.NE.0.AND.IINV.EQ.0) PGRP = 'C S'
      IF (IROT.NE.0.AND.IREF.EQ.0.AND.IINV.EQ.0) PGRP = 'C2 '
      IF (IROT.NE.0.AND.IREF.NE.0.AND.IINV.EQ.0) PGRP = 'C2V'
      IF (IROT.NE.0.AND.IREF.NE.0.AND.IINV.EQ.1) PGRP = 'C2H'
      IF (IROT.EQ.7.AND.IREF.EQ.0.AND.IINV.EQ.0) PGRP = 'D2 '
      IF (IROT.EQ.7.AND.IREF.EQ.7.AND.IINV.EQ.1) PGRP = 'D2H'
      IF (IPRNT.GE.4) WRITE(*,690) IREF,IROT,IINV
690   FORMAT ('SYMMETRY BITS: ',3(1X,I3))
C }}}
C }}}
C
C   ROTATE TO DEFAULT SYMMETRY FRAME IF NEEDED  {{{
C- COMPLETELY DONE BY
C   BRUTE FORCE. NO CUTE ALGORITHM USED HERE.
C
C   ACES CAN NOT DEAL WITH ALL ABELIAN POINT GROUPS AS SAD AS THIS
C   MAY SEEM. ALLOW FOR THIS NOW, AND HOPE THAT SOMEDAY THIS ISN'T
C   NECESSARY.
C
      BPGRP = PGRP
      SCRATCH(1:NATOMS*3)=0.0D0
      IF (PGRP.EQ.'C1 '.OR.PGRP.EQ.'C I'.OR.PGRP.EQ.'C2 '.OR.
     1     PGRP.EQ.'D2 '.OR.PGRP.EQ.'D2H') THEN
         IF (PGRP.NE.'D2H')PGRP = 'C1 '
         CALL VADD(Q,NEWQ,SCRATCH(1),NATOMS*3,1)
         GOTO 740
      ENDIF
      IF (PGRP.EQ.'C2H') THEN
         PGRP = 'C S'
         CONTINUE
      ENDIF
C }}}
C
C   C2V
C
      IF (PGRP.EQ.'C2V'.OR.PGRP.EQ.'C2H') THEN
C {{{
C
C   IF X IS ROTATION AXIS - SWITCH TO Z - AND PUT LARGEST MOMENT OF
C   INERTIA AROUND X - EIGENVECTORS RETURNED FROM EIG ARE SORTED
C   HIGHEST TO LOWEST FOR D2H, WE TAKE STANDARD ORIENTATION SUCH
C   THAT IX>IY>IZ
C
         IF (MOD(IROT,2).EQ.1) THEN
            DO J = 1,NATOMS
               Q(3*J) = NEWQ(3*J-2)
               Q(3*J-2) = NEWQ(3*J-1)
               Q(3*J-1) = NEWQ(3*J)
            ENDDO
         ELSE IF (MOD(IROT/2,2).EQ.1) THEN
            DO J = 1,NATOMS
               Q(3*J) = NEWQ(3*J-1)
               Q(3*J-1) = NEWQ(3*J-2)
               Q(3*J-2) = NEWQ(3*J)
            ENDDO
         ELSEIF (MOD(IROT/4,2).EQ.1) THEN
            CALL VADD(Q,NEWQ,SCRATCH(1),NATOMS*3,1)
         ENDIF
C }}}
      ELSE
C {{{
         IF (MOD(IREF,2).EQ.1) THEN
            DO J = 1,NATOMS
               Q(3*J) = NEWQ(3*J-2)
               Q(3*J-2) = NEWQ(3*J-1)
               Q(3*J-1) = NEWQ(3*J)
            ENDDO
         ELSEIF (MOD(IREF/2,2).EQ.1) THEN
            DO J = 1,NATOMS
               Q(3*J) = NEWQ(3*J-1)
               Q(3*J-1) = NEWQ(3*J-2)
               Q(3*J-2) = NEWQ(3*J)
            ENDDO
         ELSEIF (MOD(IREF/4,2).EQ.1) THEN
            CALL VADD(Q,NEWQ,SCRATCH(1),3*NATOMS,1)
         ENDIF
C }}}
      ENDIF
740   CONTINUE

C     IF (PTEST) WRITE(*,770)
770   FORMAT(80('*'))
C
C  THIS SHOULD COPE WITH ANYTHING WE ARE LIKELY TO COME UP AGAINST,
C  UNTIL MARK TRIES A RING WITH 100 ATOMS!
C
C {{{
      IF (IHIGH.EQ.0) THEN
         WRITE(JNKSTR,777) FPGRP(1:3)
777      FORMAT(A3)
      ELSE IF (IHIGH.LT.10) THEN
         WRITE(JNKSTR,775) FPGRP(1:1),IHIGH,FPGRP(3:3)
775      FORMAT(A1,I1,A1)
      ELSE
         WRITE(JNKSTR,776) FPGRP(1:1),IHIGH,FPGRP(3:3)
776      FORMAT(A1,I2,A1)
      ENDIF
      FPGRP = JNKSTR
      IF (IDEGEN.GT.0) THEN
         IF (PTEST) WRITE(*,750) FPGRP
750      FORMAT(' SYMMETRY> THE FULL MOLECULAR POINT GROUP IS ',A4,'.')
         WRITE(GPSTRING,750) FPGRP
         SAVEGRP=FPGRP
      ENDIF
      IF (IDEGEN.EQ.0) THEN
         IF (PTEST) WRITE(*,750) STRING(BPGRP,IHIGH)
         WRITE(GPSTRING,750) STRING(BPGRP,IHIGH)
         SAVEGRP=STRING(BPGRP,IHIGH)
      ENDIF
      IF (PTEST) WRITE(*,790) BPGRP
C     WRITE(*,712) PGRP
      IF (PTEST) WRITE(*,760) TOLD, LTOLE
760   FORMAT(' SYMMETRY> DISTANCE TOLERANCE=',F12.5,' INERTIA TOLERANCE=',F12.5)  
790   FORMAT(' SYMMETRY> THE LARGEST ABELIAN SUBGROUP OF THE FULL MOLECULAR POINT GROUP IS ',A4,'.')

C     CALL GEOMOUT
C     CALL ADM(Q)

652   CONTINUE
C
C }}}
C  TURN OFF REORIENTATION OF SYSTEM AFTER THE FIRST STEP FOR INR=5 {{{
C
      IF (INR.NE.5) THEN
         DO 800 J1=1,3*NATOMS
            Q(J1)=QSAVE(J1)
800      CONTINUE
      ELSE
         INR=INR-5
      ENDIF
! }}}

!IF (SAVEGRP(1:3).EQ. ...) HORDER=... {{{
      HORDER=1
      IF (SAVEGRP(1:3).EQ.'C I') HORDER=2
      IF (SAVEGRP(1:3).EQ.'C S') HORDER=2
      IF (SAVEGRP(1:3).EQ.'C2 ') HORDER=2
      IF (SAVEGRP(1:3).EQ.'C3 ') HORDER=3
      IF (SAVEGRP(1:3).EQ.'C4 ') HORDER=4
      IF (SAVEGRP(1:3).EQ.'C5 ') HORDER=5
      IF (SAVEGRP(1:3).EQ.'C6 ') HORDER=6
      IF (SAVEGRP(1:3).EQ.'C7 ') HORDER=7
      IF (SAVEGRP(1:3).EQ.'C8 ') HORDER=8
      IF (SAVEGRP(1:3).EQ.'D2 ') HORDER=4
      IF (SAVEGRP(1:3).EQ.'D3 ') HORDER=6
      IF (SAVEGRP(1:3).EQ.'D4 ') HORDER=8
      IF (SAVEGRP(1:3).EQ.'D5 ') HORDER=10
      IF (SAVEGRP(1:3).EQ.'D6 ') HORDER=12
      IF (SAVEGRP(1:3).EQ.'D7 ') HORDER=14
      IF (SAVEGRP(1:3).EQ.'D8 ') HORDER=16
      IF (SAVEGRP(1:3).EQ.'C2V') HORDER=4
      IF (SAVEGRP(1:3).EQ.'C3V') HORDER=6
      IF (SAVEGRP(1:3).EQ.'C4V') HORDER=8
      IF (SAVEGRP(1:3).EQ.'C5V') HORDER=10
      IF (SAVEGRP(1:3).EQ.'C6V') HORDER=12
      IF (SAVEGRP(1:3).EQ.'C7V') HORDER=14
      IF (SAVEGRP(1:3).EQ.'C8V') HORDER=16
      IF (SAVEGRP(1:3).EQ.'C2H') HORDER=4
      IF (SAVEGRP(1:3).EQ.'C3H') HORDER=6
      IF (SAVEGRP(1:3).EQ.'C4H') HORDER=8
      IF (SAVEGRP(1:3).EQ.'C5H') HORDER=10
      IF (SAVEGRP(1:3).EQ.'C6H') HORDER=12
      IF (SAVEGRP(1:3).EQ.'C7H') HORDER=14
      IF (SAVEGRP(1:3).EQ.'C8H') HORDER=16
      IF (SAVEGRP(1:3).EQ.'D2H') HORDER=8
      IF (SAVEGRP(1:3).EQ.'D3H') HORDER=12
      IF (SAVEGRP(1:3).EQ.'D4H') HORDER=16
      IF (SAVEGRP(1:3).EQ.'D5H') HORDER=20
      IF (SAVEGRP(1:3).EQ.'D6H') HORDER=24
      IF (SAVEGRP(1:3).EQ.'D7H') HORDER=28
      IF (SAVEGRP(1:3).EQ.'D8H') HORDER=32
      IF (SAVEGRP(1:3).EQ.'D2D') HORDER=8
      IF (SAVEGRP(1:3).EQ.'D3D') HORDER=12
      IF (SAVEGRP(1:3).EQ.'D4D') HORDER=16
      IF (SAVEGRP(1:3).EQ.'D5D') HORDER=20
      IF (SAVEGRP(1:3).EQ.'D6D') HORDER=24
      IF (SAVEGRP(1:3).EQ.'D7D') HORDER=28
      IF (SAVEGRP(1:3).EQ.'D8D') HORDER=32
      IF (SAVEGRP(1:3).EQ.'S4 ') HORDER=4
      IF (SAVEGRP(1:3).EQ.'S6 ') HORDER=6
      IF (SAVEGRP(1:3).EQ.'S8 ') HORDER=8
      IF (SAVEGRP(1:3).EQ.'T  ') HORDER=12
      IF (SAVEGRP(1:3).EQ.'T D') HORDER=24
      IF (SAVEGRP(1:3).EQ.'T H') HORDER=24
      IF (SAVEGRP(1:3).EQ.'O  ') HORDER=24
      IF (SAVEGRP(1:3).EQ.'O H') HORDER=48
      IF (SAVEGRP(1:3).EQ.'I  ') HORDER=60
      IF (SAVEGRP(1:3).EQ.'I H') HORDER=120
      IF (SAVEGRP(1:3).EQ.'DXH') HORDER=2
      IF (SAVEGRP(1:3).EQ.'CXV') HORDER=2
! }}}
      IF (PTEST) WRITE(*,'(A,I6)') ' SYMMETRY> ORDER OF FULL POINT GROUP=',HORDER
C     IF (PTEST) WRITE(*,770)

C }}}
      RETURN
      END
