C   OPTIM: A PROGRAM FOR OPTIMIZING GEOMETRIES AND CALCULATING REACTION PATHWAYS
C   COPYRIGHT (C) 1999-2006 DAVID J. WALES
C   THIS FILE IS PART OF OPTIM.
C
C   OPTIM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C   IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C   THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C   (AT YOUR OPTION) ANY LATER VERSION.
C
C   OPTIM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
C   BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  SEE THE
C   GNU GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C   YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C   ALONG WITH THIS PROGRAM; IF NOT, WRITE TO THE FREE SOFTWARE
C   FOUNDATION, INC., 59 TEMPLE PLACE, SUITE 330, BOSTON, MA  02111-1307  USA
C
C      SUBROUTINE FDIMER (R,B1,C1,B2,C2,A,VALUE,GRAD,ICALL)
       SUBROUTINE FDIMER (COORDS,VALUE,GRAD,ICALL)
       USE MODHESS
       USE COMMONS
       IMPLICIT NONE
       INTEGER J1,NPAR,ICALL,NP,I
       DOUBLE PRECISION BPAR(1000,5),GRAD(3*NATOMS),X(5),
     &           BFIT(1000,3),COORDS(3*NATOMS),VALUE,B,BB2,EOFF,R,B1,C1,B2,C2,A
       CHARACTER(LEN=10) INDEX(1000)
       COMMON /BS/B,BB2,X,EOFF,NPAR
       SAVE /BS/

       B1=COORDS(2)
       C1=COORDS(3)
       B2=COORDS(4)
       C2=COORDS(5)
       A=COORDS(6)
       WRITE(*,'(6F15.7)') (COORDS(J1),J1=1,6)

       IF ( ICALL .EQ. 1) THEN
          NP=1
          OPEN(UNIT=40,FILE='DIMER.DAT',STATUS='OLD')
          READ (40,'(6F10.5)') EOFF,(X(I),I=1,5)
110         READ (40,'(A10,5E25.17)',END=210) INDEX(NP),
     &                     (BPAR(NP,I),I=1,4)
            NP=NP+1
          GOTO 110
210       CONTINUE
          CLOSE(40)
          NPAR=NP-1
       ENDIF  
       DO I=1,NPAR
          BFIT(I,1)=BPAR(I,1)+BPAR(I,2)/R**6+BPAR(I,3)/R**8
     &             +BPAR(I,4)/R**5
          BFIT(I,2)=-6.D0*BPAR(I,2)/R**7 - 8.D0*BPAR(I,3)/R**9
     &             -5.D0*BPAR(I,4)/R**6
          BFIT(I,3)=42.D0*BPAR(I,2)/R**8 + 72.D0*BPAR(I,3)/R**10
     &             +30.D0*BPAR(I,4)/R**7
       END DO
       CALL DIMER (BFIT,B1,C1,B2,C2,A,INDEX,EOFF,NPAR,VALUE,GRAD)
       RETURN
       END
C
C   CALCULATION OF P.E. SURFACE
C
       SUBROUTINE DIMER (B,B1,C1,B2,C2,A,INDEX,EOFF,NPAR,VALUE,GRAD)
       USE MODHESS
       USE COMMONS
       IMPLICIT NONE
       DOUBLE PRECISION  B(1000,3),GRAD(3*NATOMS), WT(16),
     1                  B1,B2,C2,A,EOFF,VALUE,GRAD2D,GRADD,DVALUE,C1,
     2                  ANG,BDDC,BDDS,BDD1,BDD3,D1BDDC,D1BDDS,D1BDD1,D1BDD3,D2BDDC
       INTEGER NPAR,I,J,L1,K1,L2,K2,M,N,N1,NOTS
       CHARACTER(LEN=10) INDEX(*),SYMF(16)
 
 20    FORMAT (5I2)
       VALUE=0.
       DO I=1,6
          GRAD(I)=0.D0
          DO J=1,6
             HESS(I,J)=0.D0
          END DO
       END DO
       DO I=1,NPAR
          READ (INDEX(I),20) L1,K1,L2,K2,M
          DO N=1,8
             WT(N)=1.D0
             WT(N+8)=(-1.D0)**(L1+L2)
          END DO
          WRITE (SYMF(1),20) L1,K1,L2,K2,M
          WRITE (SYMF(2),20) L1,K1,L2,K2,-M
          WRITE (SYMF(3),20) L1,K1,L2,-K2,M
          WRITE (SYMF(4),20) L1,K1,L2,-K2,-M
          WRITE (SYMF(5),20) L1,-K1,L2,K2,M
          WRITE (SYMF(6),20) L1,-K1,L2,K2,-M
          WRITE (SYMF(7),20) L1,-K1,L2,-K2,M
          WRITE (SYMF(8),20) L1,-K1,L2,-K2,-M
          WRITE (SYMF(9),20) L2,K2,L1,K1,M
          WRITE (SYMF(10),20) L2,K2,L1,K1,-M
          WRITE (SYMF(11),20) L2,K2,L1,-K1,M
          WRITE (SYMF(12),20) L2,K2,L1,-K1,-M
          WRITE (SYMF(13),20) L2,-K2,L1,K1,M
          WRITE (SYMF(14),20) L2,-K2,L1,K1,-M
          WRITE (SYMF(15),20) L2,-K2,L1,-K1,M
          WRITE (SYMF(16),20) L2,-K2,L1,-K1,-M
          DO N = 2,16
             DO N1=1,N-1
                IF (SYMF(N).EQ.SYMF(N1)) WT(N)=0.D0
             END DO
          END DO
          NOTS=0
          DO N=1,16
             IF ( WT(N).NE.0.) THEN
                READ (SYMF(N),20) L1,K1,L2,K2,M

C
C
          ANG = K1*C1+K2*C2+M*A
          BDDC =WT(N)*B(I,1)*DVALUE(L1,M,K1,B1)*DVALUE(L2,-M,K2,B2)*
     &          COS(ANG)
          BDDS =WT(N)*B(I,1)*DVALUE(L1,M,K1,B1)*DVALUE(L2,-M,K2,B2)*
     &          SIN(ANG)
          BDD1 =WT(N)*B(I,1)*GRADD(L1,M,K1,B1)*DVALUE(L2,-M,K2,B2)
          BDD3 =WT(N)*B(I,1)*DVALUE(L1,M,K1,B1)*GRADD(L2,-M,K2,B2)
          D1BDDC =WT(N)*B(I,2)*DVALUE(L1,M,K1,B1)*DVALUE(L2,-M,K2,B2)*
     &          COS(ANG)
          D1BDDS =WT(N)*B(I,2)*DVALUE(L1,M,K1,B1)*DVALUE(L2,-M,K2,B2)*
     &          SIN(ANG)
          D1BDD1 =WT(N)*B(I,2)*GRADD(L1,M,K1,B1)*DVALUE(L2,-M,K2,B2)
          D1BDD3 =WT(N)*B(I,2)*DVALUE(L1,M,K1,B1)*GRADD(L2,-M,K2,B2)
          D2BDDC =WT(N)*B(I,3)*DVALUE(L1,M,K1,B1)*DVALUE(L2,-M,K2,B2)*
     &          COS(ANG)
          VALUE=VALUE+BDDC
          GRAD(1)=GRAD(1)+D1BDDC
          GRAD(2)=GRAD(2)+BDD1*COS(ANG)
          GRAD(3)=GRAD(3)-K1*BDDS
          GRAD(4)=GRAD(4)+BDD3*COS(ANG)
          GRAD(5)=GRAD(5)-K2*BDDS
          GRAD(6)=GRAD(6)-M*BDDS
          HESS(6,6)=HESS(6,6)-M*M*BDDC
          HESS(6,5)=HESS(6,5)-M*K2*BDDC
          HESS(6,4)=HESS(6,4)-M*BDD3*SIN(ANG)
          HESS(6,3)=HESS(6,3)-M*K1*BDDC
          HESS(6,2)=HESS(6,2)-M*BDD1*SIN(ANG)
          HESS(6,1)=HESS(6,1)-M*D1BDDS
          HESS(5,5)=HESS(5,5)-K2*K2*BDDC
          HESS(5,4)=HESS(5,4)-K2*BDD3*SIN(ANG)
          HESS(5,3)=HESS(5,3)-K2*K1*BDDC
          HESS(5,2)=HESS(5,2)-K2*BDD1*SIN(ANG)
          HESS(5,1)=HESS(5,1)-K2*D1BDDS
          HESS(4,4)=HESS(4,4)+COS(ANG)*B(I,1)*WT(N)*
     &              DVALUE(L1,M,K1,B1)*GRAD2D(L2,-M,K2,B2)
          HESS(4,3)=HESS(4,3)-K1*BDD3*SIN(ANG)
          HESS(4,2)=HESS(4,2)+COS(ANG)*B(I,1)*WT(N)*
     &              GRADD(L1,M,K1,B1)*GRADD(L2,-M,K2,B2)
          HESS(4,1)=HESS(4,1)+D1BDD3*COS(ANG)
          HESS(3,3)=HESS(3,3)-K1*K1*BDDC
          HESS(3,2)=HESS(3,2)-K1*BDD1*SIN(ANG)
          HESS(3,1)=HESS(3,1)-K1*D1BDDS
          HESS(2,2)=HESS(2,2)+COS(ANG)*B(I,1)*WT(N)*
     &              GRAD2D(L1,M,K1,B1)*DVALUE(L2,-M,K2,B2)
          HESS(2,1)=HESS(2,1)+D1BDD1*COS(ANG)
          HESS(1,1)=HESS(1,1)+D2BDDC
C
C
          END IF
         END DO
       END DO
       DO I=6,1,-1
          DO J=I,1,-1
             HESS(J,I)=HESS(I,J)
          END DO
       END DO
       VALUE=VALUE+EOFF
       RETURN
       END

       FUNCTION GRAD2D (J,M1,M,T)
       IMPLICIT NONE
       DOUBLE PRECISION FACTLOCAL,X2N,COEFF,VALUE,DENOM,T,T2,GRAD2D
       INTEGER M,MDIFF,N2,N1,I,IA,IB,J,M1

       COEFF=SQRT (FACTLOCAL(J+M)*FACTLOCAL(J-M)*FACTLOCAL(J+M1)*FACTLOCAL(J-M1))
       MDIFF=M1-M
       N2=MIN(J-M1,J+M)
       T2=T/2.
       VALUE=0.
       IF (MDIFF.LT.0) THEN
           N1=-MDIFF
       ELSE
           N1=0
       END IF
       DO I=N1,N2
       IA=2*J-MDIFF-2*I
       IB=MDIFF+2*I
          DENOM=FACTLOCAL(I)*FACTLOCAL(MDIFF+I)*FACTLOCAL(J+M-I)*FACTLOCAL(J-M1-I)*4
          VALUE=VALUE+(-1)**(MDIFF+I)*(
     &          IA*(IA-1.)*X2N(COS(T2),IA-2)*X2N(SIN(T2),IB+2)+
     &          IB*(IB-1)*X2N(COS(T2),IA+2)*X2N(SIN(T2),IB-2)-
     &          2*(IA*IB+J)*X2N(COS(T2),IA)*X2N(SIN(T2),IB))/DENOM
       END DO
       GRAD2D=COEFF*VALUE
       RETURN
       END

       FUNCTION GRADD (J,M1,M,T)
       IMPLICIT NONE
       DOUBLE PRECISION FACTLOCAL,X2N,COEFF,VALUE,DENOM,T,T2,GRADD
       INTEGER J,M1,M,MDIFF,N2,N1,I

       COEFF=SQRT (FACTLOCAL(J+M)*FACTLOCAL(J-M)*FACTLOCAL(J+M1)*FACTLOCAL(J-M1))
       MDIFF=M1-M
       N2=MIN(J-M1,J+M)
       T2=T/2.
       VALUE=0.
       IF (MDIFF.LT.0) THEN
           N1=-MDIFF
       ELSE
           N1=0
       END IF
       DO I=N1,N2
          DENOM=FACTLOCAL(I)*FACTLOCAL(MDIFF+I)*FACTLOCAL(J+M-I)*FACTLOCAL(J-M1-I)*2
          VALUE=VALUE+(-1)**(MDIFF+I)*(-1*
     &          (2*J-MDIFF-2*I)*X2N(COS(T2),2*J-MDIFF-2*I-1)*
     &          X2N(SIN(T2),MDIFF+2*I+1)+
     &          (MDIFF+2*I)*X2N(COS(T2),2*J-MDIFF-2*I+1)*
     &          X2N(SIN(T2),MDIFF+2*I-1))/DENOM
       END DO
       GRADD=COEFF*VALUE
       RETURN
       END

       FUNCTION DVALUE (J,M1,M,T)
       IMPLICIT NONE
       DOUBLE PRECISION FACTLOCAL,X2N,COEFF,VALUE,DENOM,T,DVALUE
       INTEGER J, M1, M, MDIFF, N2, N1, I

       COEFF=SQRT (FACTLOCAL(J+M)*FACTLOCAL(J-M)*FACTLOCAL(J+M1)*FACTLOCAL(J-M1))
       MDIFF=M1-M
       N2=MIN(J-M1,J+M)
       VALUE=0.
       IF (MDIFF.LT.0) THEN
           N1=-MDIFF
       ELSE
           N1=0
       END IF
       DO I=N1,N2
          DENOM=FACTLOCAL(I)*FACTLOCAL(MDIFF+I)*FACTLOCAL(J+M-I)*FACTLOCAL(J-M1-I)
          VALUE=VALUE+(-1)**(MDIFF+I)*X2N(COS(T/2.),(2*J-MDIFF-2*I))*
     &          X2N(SIN(T/2.),MDIFF+2*I)/DENOM
       END DO
       DVALUE=COEFF*VALUE
       RETURN
       END

       FUNCTION FACTLOCAL(N)
       IMPLICIT NONE
       INTEGER N, I
       DOUBLE PRECISION :: FACTLOCAL

       IF (N.EQ.0) THEN
           FACTLOCAL=1
       ELSE
           FACTLOCAL=1.
           DO I=2,N
              FACTLOCAL=FACTLOCAL*I
           END DO
       END IF
CC     WRITE (6,*) N,FACT
       RETURN
       END

       FUNCTION X2N(X,N)
       IMPLICIT NONE
       DOUBLE PRECISION X, X2N
       INTEGER N

       IF (X.EQ.0.) THEN
          IF (N .EQ. 0) THEN
              X2N=1.
          ELSE
              X2N=0.
          END IF
        ELSE
          X2N=X**N
        END IF
        RETURN
        END




