# default target gives GMIN.4.0
# make cgmin1 gives CGMIN.4.0.29
# make cgmin2 gives CGMIN.4.0.31
# NOTE lam mpi does NOT work with 32-bit Portland due to a bad lam 32-bit library!
# 32 builds of CGMIN.4.0.31 should work, 64 do not. The corresponding CHARMM
# library paths must be commented/uncommented appropriately. 
#
#  DONT FORGET - mpirun
#              - add MPI keyword to data to run with mpirun
#              - change CHARMM library to the appropriate version
#
#  Both 32 and 64 bit CGMIN openmpi executables work with BSPT LJ31. 
#  32 bit CGMIN openmpi executable runs for one node BSPT metenk.
#     For two nodes it hangs at completion, unless we compile with -C -g, then it works!
#     It also hangs if we link to the pgf90 compiled 32 bit CHARMM library
#  
#  Tried linking to CHARMM compiled with 64 bit openmpi. Reduced optimisation options.
#  BSPT metenk run works fine on one node and more than one node when linked to openmpi charmm build.
#  Also works when linked to 64 bit charmm library compiled with pgf90.
#
#  pgf90 7.1.6 works for 64 bit lam and openmpi
#  pgf90 7.1.6 works for 64 bit openmpi with CHARMM library /home/wales/c31a2-sat39.openmpi.64
#  pgf90 7.1.6 64 bit lam cannot be tested due to a dependency
#
#  openmpi works with ifort on mek-quake:
#  ifort_em64t/10.0.025 mpi/openmpi/64/intel10/1.2.6 icc_em64t/10.0.023
#
#  openmpi fails on clust with module:
#
# ifort/64/10.1/015 icc/64/10.1/015 mpi/openmpi/64/intel10/1.2.6
#
#

GPROG =	GMIN.4.0
CPROG1 = CGMIN.4.0.29
CPROG2 = CGMIN.4.0.31
AMHPROG = AMH_GMIN.4.0
AMBPROG = AMBGMIN.4.0

OBJS1 = commons.o countatoms.o modamb.o modcharmm.o modmxatms.o	modhess.o modamber9.o
OBJS2 =	porfuncs.o centre.o finalio.o modconsts_trans_97.o modconsts.o dist.o\
	io1.o keyword.o main.o mc.o mcruns.o morse.o \
	potential.o quench.o rad.o dprand.o saveit.o seed.o \
	sort.o sort2.o sort3.o sort4.o takestep.o mycpu_time.o trans.o \
	finalq.o symmetry.o symmetry2.o ptgrp.o eigsrt.o SiSW.o taboo.o reseed.o newinertia.o supermc.o \
	tosifumi.o ortho.o compress.o mylbfgs.o input.o ddfpmin.o dlnsrch.o cgmin.o linmin.o \
	brent.o mnbrak.o dbrent.o f1dim.o zwischen.o hsmove.o PachecoC60.o AT.o EAMLJ_sub.o \
	Pbglue.o wenzel.o odesd.o capsid.o rigidfuncs.o tip.o pah.o strand.o \
	SW.o qmod.o ljpbin.o fdm.o dftb.o ljpshift.o dzugutov.o \
	fd.o fedor.o welch.o BLJcluster.o stock.o Farkas.o getorbits.o \
	sc.o Zetterling.o MSorig.o MSorigc.o MStrans.97.o convert.o \
	frausi.o p46mer.o lj.o modperm.o modf1com.o mododesd.o amber.o EAMal.o Alglue.o Mgglue.o \
	Gupta.o orient.o Natb.o sticky.o enumerate.o minperm.o minpermdist.o LB2.o \
	dgetrf.o dgetri.o reorient.o thomson.o Q4.o basinsampling.o tether.o tetherfunc.o BLN.o \
	gauss.o newmindist.o centrecom.o qorderparam_blj.o qorderparam_lj.o bspt.o GMINdump.o quad.o \
	mysd.o qdtest.o qdtest2.o MB.o gbcalamitic.o gbdiscotic.o lwotp.o \
	msgayberne.o multisitepy.o pyg.o takestepmsgb.o takestepmspy.o gay-berne.o

OBJS = ${OBJS1} ${OBJS2}
GENF90FILES = porfuncs.f90
CHDUM = chdummy.o
AMHDUM = amhdummy.o
AMB9DUM = amber9dummy.o
VPATH = .:CHARMM
LDFLAGS = -L.
DEFS =
# CPP = /usr/bin/cpp
CPP = /lib/cpp
CPFLAGS = -traditional -P

#
# location of the source for the AMBER9 interface
#
##### AMBER9 #####################
AMB9SRC = /home/mp466/GMIN.4.0/source/AMBER
SANDERSRC = /home/mp466/GMIN.4.0/source/AMBER/src/sander

#
# If you are not building CGMIN.X.X.X comment everything inside CHARMM 29 and 31 blocks!
#
##### CHARMM 29
#  C29SRC = /home/wales/charmmcode29
#-- comment everything inside this block if building GMIN with C31
# CTYPE=C29
# BLAS_EXCLUDE_LIST = daxpy.o dcopy.o ddot.o
# PREFLX = $(C29SRC)/tool/prefx_gnu
# FCMDIR = $(C29SRC)/fcm
# PREFDIR = ${C29SRC}
# C31SRC = 
# SRC31 =
# EXTRAS = myblas.o mylapack.o
#-- end comment
#LIBDIR29 = $(C29SRC)/chlib/gnu
#CHLIBS29 = $(LIBDIR29)/adumb.a $(LIBDIR29)/cadint.a $(LIBDIR29)/cff.a $(LIBDIR29)/charmm.a $(LIBDIR29)/correl.a $(LIBDIR29)/dimb.a \
#           $(LIBDIR29)/dynamc.a $(LIBDIR29)/energy.a $(LIBDIR29)/gamint.a $(LIBDIR29)/gener.a $(LIBDIR29)/image.a $(LIBDIR29)/io.a \
#           $(LIBDIR29)/machdep.a $(LIBDIR29)/manip.a $(LIBDIR29)/mbond.a $(LIBDIR29)/mc.a $(LIBDIR29)/minmiz.a $(LIBDIR29)/misc.a \
#           $(LIBDIR29)/mmff.a $(LIBDIR29)/molvib.a $(LIBDIR29)/nbonds.a $(LIBDIR29)/pert.a $(LIBDIR29)/quantum.a \
#           $(LIBDIR29)/rxncor.a $(LIBDIR29)/shapes.a $(LIBDIR29)/solvation.a $(LIBDIR29)/util.a $(LIBDIR29)/vibran.a \
#           $(LIBDIR29)/energy.a libcharmm.a
##### end CHARMM 29###################
##### CHARMM 31
# sun
# C31SRC = /export/home/wales/c31a2-sat39/
# clust
# for 64 bit pgf90 build
#  C31SRC = /home/wales/c31a2-sat39.64
# for 64 bit mpif90 build
# C31SRC = /home/wales/c31a2-sat39.openmpi.64
# for 64 bit lam build
# C31SRC = /home/wales/c31a2-sat39.lam.64
# for 32 bit pgf90 build
# C31SRC = /home/wales/c31a2-sat39
# for 32 bit mpif90 build
# C31SRC = /home/wales/c31a2-sat39.openmpi.32
#-- comment everything inside this block if building OPTIM with C29
# CTYPE=C31
# BLAS_EXCLUDE_LIST = dnrm2.o daxpy.o dcopy.o ddot.o
# FCMDIR = ${C31SRC}/source/fcm
# SRC31 = charmm_main.src # energy.src
# EXTRAS = myblas.o mylapack.o
# clust or mek-quake
# PREFLX = ${C31SRC}/tool/prefx_gnu
# PREFDIR = ${C31SRC}/build/gnu
# nemesis
# PREFLX = ${C31SRC}/tool/prefx_sun
# PREFDIR = ${C31SRC}/build/sun
#-- end comment
#  LIBDIR31=${C31SRC}/lib/gnu
#  CHOBJS31 = $(LIBDIR31)/help.o $(LIBDIR31)/iniall.o $(LIBDIR31)/miscom.o $(LIBDIR31)/usersb.o
#  CHLIBS31 = $(LIBDIR31)/adumb.a \
#             $(LIBDIR31)/flucq.a $(LIBDIR31)/cadint.a $(LIBDIR31)/cheq.a $(LIBDIR31)/cff.a $(LIBDIR31)/correl.a $(LIBDIR31)/dimb.a \
#             $(LIBDIR31)/emap.a $(LIBDIR31)/dynamc.a $(LIBDIR31)/energy.a $(LIBDIR31)/gamint.a $(LIBDIR31)/gukint.a \
#		$(LIBDIR31)/gener.a $(LIBDIR31)/image.a $(LIBDIR31)/io.a $(LIBDIR31)/machdep.a $(LIBDIR31)/manip.a $(LIBDIR31)/mbond.a \
#		$(LIBDIR31)/mc.a $(LIBDIR31)/minmiz.a $(LIBDIR31)/misc.a $(LIBDIR31)/mmff.a $(LIBDIR31)/molvib.a $(LIBDIR31)/nbonds.a \
#		$(LIBDIR31)/pert.a $(LIBDIR31)/quantum.a $(LIBDIR31)/rxncor.a $(LIBDIR31)/shapes.a $(LIBDIR31)/solvation.a \
#		$(LIBDIR31)/util.a $(LIBDIR31)/vibran.a libcharmm.a
##### end CHARMM 31


###################################### COMPILERS AND COMPILER FLAGS ######################################
#
###### The Portland Group Compiler Technology Fortran 90 compiler
# FC = pgf90
# FC = mpif77  # for lam - don't forget to uncomment MPI!
# FC = mpif90  # for mpich and openmpi - don't forget to uncomment MPI!
#  DEFS = -DMPI 
# The usual flags:
#FFLAGS= -Mextend -fastsse -O3 -Mvect=sse,assoc,cachesize:1024000,recog,transform 
# These are the CHARMM31 flags. It is ESSENTIAL to use the same flags as for the CHARMM build!!!!
#  FFLAGS= -Mextend -O3 -Munroll -Mscalarsse -Mnoframe -Mvect=sse -Mcache_align -Mflushz -Msecond_underscore
# -Msecond_underscore might be needed with CHARMM? But doesn't work with mpif77 # for charmm
#
# These are the CHARMM31 flags for mpif90 64 bit library. It is ESSENTIAL to use the same flags as for the CHARMM build!!!!
# HOWEVER, lam mpi does not support second_underscore !!
#  FFLAGS= -Mextend -O3 -Munroll -Mnoframe -Msecond_underscore 
#   FFLAGS= -Mextend -O3 -Munroll -Mnoframe
# flags for AMBER9 
# FREEFORMAT_FLAG= -Mfree
# EXTRA_FLAGS=-module
#
# -Mvect=sse doesn't work on clust nodes
#
# FFLAGS= -Mextend -O3 -Munroll -Mscalarsse -Mnoframe -Mcache_align -Mflushz -Mvect=sse -tp k8-64
# FFLAGS= -Mextend -O3 -Munroll -Mscalarsse -Mnoframe -Mcache_align -Mflushz -pg

# FFLAGS= -Mextend -C -g  
#
#  NOOPT = -O0
#  SEARCH_PATH =  -I..
# the double reference to -lblas seems to be needed!
#  LIBS = -lblas -llapack -lblas 
#  LDFLAGS= -L.
##### end of The Portland Group Compiler Technology Fortran 90 compiler
#
##### NAGWare Fortran 95 compiler flags (SAT)
 FC = f95
 FFLAGS = -132 -maxcontin=3000 -kind=byte -mismatch_all -O4
# FFLAGS = -132 -maxcontin=3000 -C -g -kind=byte
 NOOPT = -O0
 SEARCH_PATH = -I..
 LDFLAGS= -L.
 SWITCH=nag
# the double reference to -lblas seems to be needed!
 LIBS = -lblas -llapack -lblas
##### end of NAGWare Fortran 95 compiler flags
#
##########################################################
# Intel compilers
# 
# FC = ifort
# FC = mpif77 
# FC = mpif90  
# DEFS = -DMPI 
# FFLAGS= -132 -C -g -traceback
# FFLAGS= -132 -O0  
# FFLAGS= -132 -Vaxlib -O3 # for ifc
# FFLAGS= -132 -O3 -ip -static # -ipo or -fast doesnt work 
#  NOOPT= -O0
# SWITCH=ifort
# SEARCH_PATH =  -I..
# LDFLAGS= -L.
# LIBS = -lblas -llapack -lblas -lblas -llapack
# FREEFORMAT_FLAG="-free"
# EXTRA_FLAGS="-I"
#
#
# Sun 
#
# FC = f90
# FFLAGS = -e -C -g 

# SEARCH_PATH = -M..
# mek-quake
# FFLAGS = -e -native -libmil -fsimple=2 -dalign -xlibmopt -depend -fnonstd -xO5 \
#          -xtarget=native -xcache=16/32/1:4096/64/1 -xprefetch=yes -xvector=yes -xcrossfile # -XlistE -Xlistwar # -z muldefs 
# nemesis
# FFLAGS = -e -native -libmil -fsimple=2 -dalign -xlibmopt -depend -fnonstd -xO5 \
#          -xtarget=ultra3cu -xcache=64/32/4:8192/512/2 -xprefetch=yes -xvector=yes -xcrossfile # -XlistE -Xlistwar -z muldefs
# LIBS = -xlic_lib=sunperf -L/usr/SUNWspro/lib
# LDFLAGS= -L.
# NOOPT=
# the double reference to -lblas seems to be needed!
# LIBS = -lblas -llapack -lblas 

###################################### RULES AND TARGETS ######################################
.SUFFIXES:
.SUFFIXES: .o .f .F .f90

.f90.o:
	$(FC) $(FFLAGS) ${SEARCH_PATH} -c $<
.f.o:
	$(FC) $(FFLAGS) ${SEARCH_PATH} -c $<
.F.f:
	$(CPP) $(CPFLAGS) $(DEFS) $< > $@

default: $(GPROG)

cgmin1: $(CPROG1)

cgmin2: $(CPROG2)

$(GPROG): $(OBJS) $(EXTRAS) $(CHDUM) $(AMHDUM) $(AMB9DUM)
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ $(EXTRAS) $(OBJS) $(CHDUM) $(AMHDUM) $(AMB9DUM) $(LDFLAGS) $(LIBS)

$(CPROG1): $(OBJS) $(EXTRAS) libcharmm.a $(AMHDUM) $(AMB9DUM)
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ $(EXTRAS) $(OBJS) $(AMHDUM) $(AMB9DUM) $(LDFLAGS) $(LIBS) ${CHLIBS29} ${CHLIBS29}

$(CPROG2): $(OBJS) $(EXTRAS) libcharmm.a $(AMHDUM)
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ ${CHOBJS31} $(EXTRAS) $(OBJS) $(AMHDUM) $(AMB9DUM) $(LDFLAGS) $(LIBS) \
        ${CHLIBS31} ${CHLIBS31} ${CHLIBS31}

AMBGMIN: $(AMBPROG) 

$(AMBPROG): $(OBJS) $(EXTRAS) $(CHDUM) $(AMHDUM) libamber.a
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ $(OBJS) $(EXTRAS) $(CHDUM) $(AMHDUM) $(LDFLAGS) libamber.a $(LIBS) 

AMH: $(AMHPROG)

$(AMHPROG): $(OBJS) $(EXTRAS) $(CHDUM)
	$(FC) $(FFLAGS) ${SEARCH_PATH} -o $@ $(EXTRAS) $(OBJS) $(CHDUM) $(LDFLAGS) $(LIBS) -lamh

clean:
	rm -f ${GMIN} ${CPROG1} ${CPROG2} $(OBJS) *.mod $(EXTRAS) *.lst *.o pref.dat prefx.msg ifc?????? nag.f90 FOR021.DAT porfuncs.f90 mc.f ptmc.f bspt.f main.f
	cd BLAS; make clean
	cd LAPACK; make clean
	cd CHARMM; make clean
	cd ${SANDERSRC};  make clean

timing:
	rm -f GMIN.2.0
	$(FC) $(FFLAGS) -p $(OBJS) $(EXTRAS) -o $(GPROG) $(LIBS)

feedback:
	$(FC) $(FFLAGS) -xprofile=use:gmin.profile *.f -o $(GPROG)

rebuild:
	make clean
	make
libamber.a:
	export SRCDIR=$(CURDIR);cd ${SANDERSRC}; make FC="${FC}" FFLAGS="${FFLAGS}" \
	FREEFORMAT_FLAG="${FREEFORMAT_FLAG}" EXTRA_FLAGS="${EXTRA_FLAGS}"
libamh.a: SAT-Ghost
	cd AMH; make FC="${FC}" FFLAGS="${FFLAGS}"
libblas.a: SAT-Ghost
	cd BLAS; make double FC="${FC}" FFLAGS="${FFLAGS}" BLAS_EXCLUDE_LIST="${BLAS_EXCLUDE_LIST}"
liblapack.a: SAT-Ghost
	cd LAPACK; make selection FC="${FC}" FFLAGS="${FFLAGS}" NOOPT="${NOOPT}"
libcharmm.a: SAT-Ghost
	cd CHARMM; make FC="${FC}" FFLAGS="${FFLAGS} ${SEARCH_PATH}" PREFLX="${PREFLX}" \
	PREFDIR="${PREFDIR}" \
	CTYPE="${CTYPE}" FCMDIR=${FCMDIR} C31SRC="${C31SRC}" SRC31="${SRC31}"
SAT-Ghost:

porfuncs.f90: porfuncs.csh
	./porfuncs.csh ${SWITCH} > porfuncs.f90

###################################### DEPENDENCIES ######################################
${GPROG}: libblas.a liblapack.a
${CPROG1}: libblas.a liblapack.a libcharmm.a
${CPROG2}: libblas.a liblapack.a libcharmm.a
${AMHPROG}: libblas.a liblapack.a libamh.a
${AMBPROG}: libblas.a liblapack.a libamber.a
libcharmm.a: commons.o modcharmm.o modmxatms.o
libamber.a: commons.o modamber9.o
${OBJS2}: ${OBJS1}

Alglue.o:      commons.o
BLJcluster.o:  commons.o
EAMLJ_sub.o:   commons.o
EAMal.o:       commons.o
Gupta.o:       commons.o
MSorig.o:      commons.o modconsts.o dist.o
MSorigc.o:     commons.o modconsts.o dist.o
MStrans.97.o:  commons.o modconsts_trans_97.o dist.o
Mgglue.o:      commons.o
PachecoC60.o:  commons.o
Pbglue.o:      commons.o
SW.o:          commons.o
SiSW.o:        commons.o
Zetterling.o:  commons.o
amber.o:       commons.o modamb.o
bmin.o:        commons.o modamb.o
capsid.o:      commons.o
centre.o:      commons.o
centrecom.o:      commons.o
cgmin.o:       commons.o
compress.o:    commons.o
compress2.o:   commons.o
countatoms.o:  modamber9.o
ddfpmin.o:     commons.o
dftb.o:        commons.o
dzugutov.o:    commons.o
evstep.o:      commons.o
f1dim.o:       commons.o modf1com.o
fd.o:          commons.o
fdm.o:         commons.o
finalio.o:     commons.o modamb.o qmod.o modcharmm.o
finalq.o:      commons.o qmod.o
frausi.o:      dist.o
grnd.o:        commons.o
hmat1n.o:      commons.o
hmatd_.o:      commons.o
hsmove.o:      commons.o
io1.o:         commons.o modamb.o modperm.o qmod.o modcharmm.o porfuncs.o
keyword.o:     commons.o modamb.o modcharmm.o porfuncs.o
linmin.o:      commons.o modf1com.o
lj.o:          commons.o
ljpbin.o:      commons.o
ljpshift.o:    commons.o
main.f: main.F
main.o:        commons.o modf1com.o countatoms.o modperm.o qmod.o modamb.o modmxatms.o porfuncs.o
mcruns.o:      commons.o
mf.o:          commons.o
mnbrak.o:      commons.o
commons.o:  countatoms.o
morse.o:       commons.o
mylbfgs.o:     commons.o modamb.o porfuncs.o
odesd.o:       commons.o mododesd.o
olami.o:       commons.o
otp.o:         commons.o
p46mer.o:      commons.o
BLN.o:      commons.o
pah.o:         commons.o
potential.o:   commons.o modperm.o qmod.o modcharmm.o porfuncs.o
ptgrp.o:       commons.o
quench.o:      commons.o qmod.o porfuncs.o
rad.o:         commons.o
rdpot.o:       commons.o
saveit.o:      commons.o qmod.o
sc.o:          commons.o
seed.o:        commons.o
strand.o:      commons.o
supermc.o:     commons.o
symmetry.o:    commons.o porfuncs.o
symmetry2.o:    commons.o porfuncs.o
taboo.o:       commons.o
takestep.o:    commons.o
takestep2.o:    commons.o
tip.o:         commons.o
tosifumi.o:    commons.o
welch.o:       commons.o
zwischen.o:    commons.o modf1com.o 
stock.o:       commons.o
sticky.o:      commons.o
tether.o:      tetherfunc.o
mycpu_time.o:  commons.o
gauss.o:       commons.o
mc.o:          qmod.o modcharmm.o porfuncs.o mc.f mc.F
mc.f: mc.F
ptmc.f: ptmc.F
ptmc.o:          qmod.o modcharmm.o porfuncs.o ptmc.f ptmc.F
bspt.f: bspt.F
bspt.o:          qmod.o modcharmm.o porfuncs.o bspt.f bspt.F
GMINdump.o: commons.o qmod.o porfuncs.o
quad.o:        commons.o
enumerate.o:  commons.o
convert.o:  porfuncs.o
getorbits.o: commons.o
mysd.o: commons.o
qdtest.o: commons.o
MB.o: commons.o 
